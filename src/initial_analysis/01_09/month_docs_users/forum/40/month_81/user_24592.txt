ill mention opinion possibility diminishing returns seek perfect technical security isolation anonymity dealing vacuum machines fine realize eventually stick draw attention humans invariably involved require customization oversight prefer opsec risk mitigation strategy religion ymmv peak level technical anonymity wave making exposure remembered reason dedicated server vps mailing unit location outfit long pay fashion doesnt link directly pretty face.
 kmf completely fuzzing extremely tool finding exploitable bugs fuzzing sufficient pump day day computing power time find large amount exploitable bugs popular programs experienced exploit development turn simple crash reliably executes shellcode completely true fuzzer mine ore days fuzzing random brute forcing btw complex brute forcing synthesize large valid jpeg files thin air trinity trinity spits random sensual random shit syscalls doesnt idea kernel project called syzkaller instruments syscall fuzzer american fuzzy lop instruments binary fuzzer combined trinity havent tested yield pretty damn impressive terrific syscalls eligible attack surface areas race lucky fuzz effectively trinity fate speaking dont mind kernel patching patch pi fate operations.
 quote real sigaint april pmquote kmf april amhowever protect local access servers things tricky encrypt link tor router nginx box tor router strip tor encryption forwarding traffic lan nginx box likewise implied encryption nginx box tor router attacker tap link communications ash tunneling encrypt link ipsec opened side things integrates nicely quote kmf april ami wanted ramcrypt tricky doesnt virtual machines lacking true register access told work hypervisor binary encrypt entire vm memory virtual isolation nginx isolate attackers hardware aerial numbers physical isolation tor router protects external ip address encrypted ram dont physical access hardware lost layer lines code turn vt iommu youll lose hands hardware promise find gear colo hot splice power pick running carry chassis alarm bypass trivial ram encryption isnt fool proof complexity enemy security stuff maintain stuff wrong threat model founded adversary fucked hands hardware buying hardware cash buying cash solve aerial number problems spoof mac addresses extra points octets nics vendor normal stealth isp select mentioned good buy hardware doesnt intel amt amds psp older hardware mind mix system architectures servers big endian sparc routers frustrate hell exploit writer blindly assumes entire intel amd box control building fortify guard dogs add building perimeter alarms trigger wiping disk keys wipe ram add panic button staff creative fails set legal framework hot coals countries rights talk police common carrier laws question judge signed warrant dismiss allegations claiming defective paperwork cut jib topnotch wait tomorrow.
 quote kmf april pmgrsecurity security patch linus word subgraph coming alpha.
 quote kmf april pretty opened zeros memory free automaticallythats gfree mitigation technique top quote kmf april pmcould asn poisoned memory delimiters hardened tor browser didopenbsd called guard malloc canaries.
 quote mb april pmfuzzing automatic tools pretty stupid find days find plenty free exploits exploit db combrute force wise choise select pretty legal guys thing exploits vulnerabilities originally fuzzers security advisory researcher nils address sanitizer tool fuzzing discover missing strong references browsing engine leading frees lead exploitable crash find vulnerabilities hand fashions thing fuzzers long eventually spit vulnerabilities havent patched trinity fuzzer learned studying fuzzing depth start finding kernel vulnerabilities basin idea fairly simple buzz testing suggests call syscalls random random arguments original idea times linux operating systems trinity differs arguments passes purely random bugs passing random values dumb bugs dumb fuzzers problem syscall file descriptor argument things validate fd garbage kernel reject einval startup trinity creates list file descriptors opening pipes scanning sysfs procfs dev creates bunch sockets random network protocols syscall fd passed random file descriptors thing trinity syscall arguments annotated provide semi length arguments passed bunch interesting values trinity shares file descriptors multiply processes havoc child process creates mmap pointer stored fed subsequent syscalls hilarious trinity supports alpha aarch arm ia mips powerpc power sparc adding support additional architectures small amount work involving defining order syscall table documentation hacking details quote kernel bugs triggered trinity maintain list bugs fixed work track trinity oom killer trigger long oom killer picks process trinity children dbus networkmanager working designed fair amount noise printks kernel trinity triggers set patches remove common git apply linus latest tree older kernels parts find report kernel bug cc mention trinity ira contacts fuzzes system manually patches vulnerabilities finds legit scares leet.
 quote kmf march pmalso security call formatting.
 side fbi fuck.
 quote kmf april amon side fbi fuck doesn prosecuting people ignorance barrier securing convictions.
 nice alot good dig.
 good stuff.
 quote kmf april pmim making openbsd advantages easier maintain openbsd tor router guide simultaneously working secure hidden services secure hidden services involved topic point security knowledge realize fucking scarf hackers talk irc level shit moderately afraid tbh guys security gods aware running sensitive hidden services thought pretty making lot mistakes thinking things today long shot realize year today thing forums understanding pretty shifty security reality touching security systems people cutting edge tbh fuzzing applications patching days disclosed cutting edge find contributions scarf knowledge power fuck.
 gfree techniques looked gcc implementation fmitigate rop option academy cfi implementations guess called cfi serves purpose good paper doesn work real wait paxteams rap true low overead rop implementation gfree safestack friends existing popular implementations microsofts cfg xfi protect attacker gain full control return address upside adjust threat models ensure sensitive applications adequate privsep gaining control sensitive application rop attacker quote real sigaint link topic msg msg expect surveillance benefit raid warning signs carefully colocation cage outfitted cameras hidden cases servers customer servers neat place hide camera chassis eprom pai device dont eeprom older eproms windows windows perfect hiding tiny camera excuse black glass covertly installed generic pci device facing system opened notice tampering easily big obvious surveillance camera adversary full arsenal tricks neat things hide computer gps receiver accurate time reception detecting interdiction accelerometer detecting tampering shutting avoid attacks microphone listen conversations quote real sigaint link topic msg msg cluster work shortcomings xorg workstation arena limit damage attacker inside save exploits xen huge cve list bugs vt vt txt amd iommu popcnt giant pile cup extensions countless erratas agree hypervisors security solution specific severe security erratas ring instructions times aware extremely mild incredibly racy require access ring ring deeper interesting attacker ring smm unexpected.
 quote toctou april amsubgraph ways primary tools oz complete glad pretty person taught ramcrypt security person grace forum top.
 yeah key crash program indicative exploitable fuzzers hammer programs crash note crash bug identified programs supposed crash requires analysis exploitable.
 wan comment quote kmf april pmbetter initramfs remote fde linuxremote attestation hard good luck privatecore interesting papers linked site efforts remote attestation check quote kmf april pmramcrypt partial ram encryption protects dma attacks cold boot doesn work vm vm binarythis isnt true protects passive dma attacks attack pumps malicious code memory executed ring strip encryption read key protect basin passive dma basin academy attacks trebble device working vm true qemu kvm qemu emulation mode works unusably slow ramcrypt animal protection settings takes minutes boot tails workaround tresor set memory qemu low mib lower depending os create dev ram fallocate create large empty file tops filesystem encrypt large empty file device gigabytes tremor note tresor works simple encryption modes cbc plain cic essiv modes screw things basically familiar tresor set qemu encrusted mapper device option virtio qemu de vda simply format mkswap swapon set swappiness good basically makeshift cryptkeeper google cryptkeeper ram pdf qemu tresor works efficient ramcrypt works kvm device quote kmf april pmtresvisor tresor bitvisor hypervisor iommu protect dma attackstrevisor protects dma attacks targeted hypervisor stores encryption keys ma attacks guest os store keys inside nested vt supported nag bitvisor guys working protect dma guest quote kmf april pmsel formally verified hypervisor arm guaranteed hardware layer penetration itsel supports quote kmf april pmiommu isolating hardware virtual machine limit ability compromise host advanced techniques reboots isolated default iommu lock hardware virtual machine technology utilizes iommu called vfio kernel doesnt support vfio pci passthrough careful automatically map hierarchy easily binding device trivially bypass protections iommu group fully locked simply neighbor pci device root pci device initiate dma blocked vfio guarantees entire group devices root hub locked quote kmf april mother things intel security flags experience features iommu txt sgx dont servers configuring things ability experiment tpms txt tpm provide remote attestation basically integrity checking downsides read papers linked privatecore website txt remote attestation note lots people afraid tpm dont worry limited device isnt capable sending interrupts cpu sgx systems intel skylake cpus create secure enclave encrypted intel management engine sets key hope key generation method secure hardware rng meh aes ni encryption ensures ring decrypt enclaves requires programs designed good amount work theory encrypt entire kernel entire os good bit work work breaking security model sadly skylake lots neat security features ew mpx sgx intel innovation engine xeons intel oems wrong clflushopt instruction totally useless people side channel attacks cache hardware bugs prime probe flush reload flush flush rowhammer efficient mpx nasty perf hit mentioned privatecore times ill things company sells vpses month tech closed source pretty incredible breakthroughs elegant thread managed reduce tcb trusted computing base computer compromised rest compromised cpu rest including ram totally pent computer worst crash super clever attacks harder simply attacking cpu directly exact methods secret gathered reading whitepapers theyve managed shrink linux kernel mib modified safely locked cpus cache entire ram encrypted crypto accelerated ni encryption keys stored debug profile registers cache kernel combine clever intel txt youve small tcb ram trusted light kernel acts hypervisor bloated system choice runs fully encrusted memory advertise dont trustworthy interesting idea day work implementing work implementing future find time custom dimm slots encrypt decrepit memory contents simon block cipher doesnt solve problem attestation weve things bootguard cover extent vt ma thoughts.
 guess threat model input people forum gamesome tools techniques primal things direction initramfs remote fde linuxramcrypt partial ram encryption protects dma attacks cold boot doesn work vm vm binarytresor encryption key fde cpu registertresvisor tresor bitvisor hypervisor iommu protect ma attacksgrsecurity security patch hardens linus kernelpax aslr bit implementationsrbac access control system fine grained control systemxen hypervisor virtual machines hardened rbac kernelqemu kvm hypervisor processor emulation hardened rbacsel formally verified hypervisor arm guaranteed hardware layer penetration itopenbsd security oriented os strong aslr bit implementation built hardenings lacking encryption virtualization supportphysical isolation isolating tor process initials surface exposed attacker essentially making tor routerpluggable transports bridges entry membership concealment tor hide hidden service runnginx lightweight web server naxsi web application firewall nginxst small loc web server nginx loc virtual isolation hypervisor sandbox attacker vm isolating tor process initials attack surface exposed attackeriommu isolating hardware virtual machine limit ability compromise host advanced techniques reboots isolatedcolocation sending server data center configure yourselfdedicated server term physical server provided data center opposed colocationchassis intrusion detection switch mechanism opening case server trigger event typically shut server unmount encrusted partitions clear encryption keysipsec ssh tunnels ways encrypt link servers head relation process trade offs compatible physical isolation virtual isolation isolating web server tor external ip address physical isolation superior attack surface presented reduced expose ssh server remote colo dedi opposed local console access ssh internet connected tor router ssh web server box expose tor manages hidden service place network stack tor router host isnt path external ip address application layer isolate ash client ssh ssh server web server box pwnt attacker isolated vm tor router access external ip address penetrate hypervisor physical isolation requires servers convenient security boxes point fde nginx box tor process box encryption sigaint shouldnt assume protect content drives memory servers identified attacker attacker physical access nice openbsd tor router lot good security features perfect os case doesnt encryption support learned initramfs allowing remote fde linux kvm ip switches secure place virtual isolation xen virtualizes physical isolation essentially application layer attack path hypervisor external ip address hardware layer paths row hammer primary benefit virtual isolation simplifying things keeping single server ton things input community deciding analyzing trade offs things decide choices threat modeling process configuring guide stands pretty indecisive choices ive input hacker ircs input discussion suggestions add nice things intel security flags experience features iommu txt sgx dont servers configuring things ability experiment tpms.
 quote real sigaint april pmquote kmf april pretty opened zeros memory free automaticallythats gfree mitigation technique top quote kmf april pmcould asn poisoned memory delimiters hardened tor browser didopenbsd called guard malloc canaries didnt memory making reference securefree function heard gfree looked gnufree function paired gmalloc simply calls exit oom completely boring function suggested link gfree nm.
 subgraph ways primary tools oz complete.
 process called fuzzing essentially involves feeding random random inputs program brute force fashion waiting crash crashes input caused crash bug program security bug dos bug crashed application exploitable attacker question limit fuzzing applications computation computation power inputs test inputs test crashing program times crash program bugs find essentially mining days heard fbi spending millions dollars data center full servers goal cracking encryption thought bet brute force attacks people shifty passwords realistic possibility people passwords cracked passwords good today wondering turn massive fuzzing operation finding days bypass encryption application layer.
 guide securely hosting hidden services running kinds questions pretty indecisive basin idea configure opened tor router design server xen vm web server green kernel rbac nginxthe nginx box direct path internet accessible ssh tor router interest connection ssh tor router running hidden service forwards nginx box hardening pip site cassi waf web app firewall whitelists behaviors learning mode blocks recognized behaviors enforcing mode hardens website pent protect local access servers things tricky encrypt link tor router nginx box tor router strip tor encryption forwarding traffic lan nginx box likewise implied encryption nginx box tor router attacker tap link communications ash tunneling encrypt link wanted ramcrypt tricky doesnt virtual machines lacking true register access told work hypervisor binary encrypt entire vm memory virtual isolation nginx isolate attackers hardware aerial numbers physical isolation tor router protects external ip address encrusted ram intitramfs nginx box ash access reboots fde basin fde ugh problem arises protected tor process openbsd box guess design tor router green pax patched kernel bit aslr openbsd superior ways lacking terms drive encryption ugh point fde nginx box tor process private key hs exposed attacker takes control box box plaintext traffic forwarded tor mention complete control hidden service tamper traffic transit kind cancels benefit fde place nginx box active attacker protection dma attacks protect attacker possession server cold boot attack de keys tresor host protect drive contents tresor tresvisor ramcrypt determine ideally chassis intrusion detection switch set wipe power chassis breached access state os possibilities negative security implications chassis intrusion sensorthe sys intsw sensor asserted servers top cover removed power applied server improper service action sensor serves alert authorized inadvertence removal servers cover sensor enables system administrators confidence physical integrity server violated beneficial server remote controlled location note server powered server top cover sys intsw sensor asserted servers top cover removed server powered host employ graceful shutdown power server brings point colocation server data center data center provided server colocation security advantages configure trust data center provided os hasnt rootkit block include ports dma harden physical security chassis harder penetrate encapsulate ram steel chassis lock chassis configure chassis intrusion detection switch negative aspects protect fingerprints hairs dna case anonymously purchase hardware anonymously ship server data center dedicated server provided data center convenient poses host security questions trust default installation os kvm switches hooked system monitor normal operation big benefit path server payment easy anonymize tor circuit access risk actual hardware linked aerial numbers purchase records dna left machine configuration return address postmark package server discuss tradeoffs colocation data center provided os general brainstorm hidden service security options tradeoffs decide action primary trade choices protection attackers located server protection attackers located server choices harden sort attacker tending degrade security sort attacker thinking tommy isolation nginx box exposed networking card tor router passing os network stack isolation hidden service imagine socksports work openbsd openbsd os tor router fine needing isolate network stack ways break state iommu isolation reboots cases ability understand joanna rutkowska paper interrupts early boot cycle device isolated.
 tresor encryption keys cup registers ram protect cold boot attacks tresvisor encryption keys cpu registers iommu protect ma attacks ram ramcrypt keys cpu registers protects dma attacks encrypts majority ram process flag set ramcrypt solution modified linux processes transparently work encrusted data ramcrypt deployed enabled process basis recompiling user mode applications enabled process data stored cleartext moment processed stays encrypted ram required encryption keys reside ram stored cpu registers ramcrypt effectively thwarts memory disclosure attacks grant authorized access process memory physical attacks cold boot dma attacks default configuration ramcrypt exposes memory cleartext time web server serving encrypted heavy load tls secret key hidden time fde making improvements bad involving pretty esoteric configurations moderately advanced linux skills patching compiling kernel improvement bootkit attacks encrusted boot btw encrypt stage bootloader.
 quote real sigaint april pmquote kmf april amhowever protect local access servers things tricky encrypt link tor router nginx box tor router strip tor encryption forwarding traffic lan nginx box likewise implied encryption nginx box tor router attacker tap link communications ash tunneling encrypt link ipsec opened side things integrates nicely quote kmf april ami wanted ramcrypt tricky doesnt virtual machines lacking true register access told work hypervisor binary encrypt entire vm memory virtual isolation nginx isolate attackers hardware aerial numbers physical isolation tor router protects external ip address encrypted ram dont physical access hardware lost layer lines code turn vt iommu youll lose hands hardware promise find gear colo hot splice power pick running carry chassis alarm bypass trivial ram encryption isnt fool proof complexity enemy security stuff maintain stuff wrong threat model founded adversary fucked hands hardware buying hardware cash buying cash solve aerial number problems spoof mac addresses extra points octets nics vendor normal stealth isp select mentioned good buy hardware doesnt intel amt amds psp older hardware mind mix system architectures servers big endian sparc routers frustrate hell exploit writer blindly assumes entire intel amd box control building fortify guard dogs add building perimeter alarms trigger wiping disk keys wipe ram add panic button staff creative fails set legal framework hot coals countries rights talk police common carrier laws question judge signed warrant dismiss allegations claiming defective paperwork thoughts colocation versus data center provided dedicated servers keeping server physical possession risk tbh extend attack surface area hidden service isolate primary disadvantage colocation attack surface isolation layer increased versus dedicated server data center essentially payment network good point aerial numbers physical isolation virtual isolation provided attacker root host aerial numbers assist locating server benefits virtual isolate attacker manage penetrate web server easier shove foothold provided dont penetrate hypervisor.
 thing compiling web server nginx software clang safestack gcc process implementing version called mitigate rop harden rop person learned technique questionable pretty considered alpha stage compiler security flag.
 bridges pluggable transports hidden service disguise data center data center aware hosting popular hidden service le easy confirmation attacks point cover anonymous payments hiding communications hosting provider dont tor thought mind exit membership concealment communicating buying colocation dedi entry membership concealment hidden service.
 pretty opened zeros memory free automatically grsecurity ability asn poisoned memory delimiters hardened tor browser controvery familiarize mention memory leaks firefox fit technique production server hardened tor browser ends memory time issue depending implemented preallocates memory.
 grsecurity security patch linux.
 quote real sigaint april pmquote kmf april pmanother thing compiling web server nginx software clang safestack gcc process implementing version called mitigate rop gfree wanted edit source code guess add secureallocate securefree poisoned memory delimiters free assembly memory barriers code select allocation functions allocates requested bytes poisoned delimiters prevent linear buffer overflows allocation memory delimiters request typically bytes additional memory cost remainder bytes returns pointer poisoned byte success null pointer errorstatic void secureallocate size bytesrequested int requiredpages void membuff delimiters requiredpages bytesrequested bytesize bytesrequested exact multiple bytesize bytesrequested bytesize requiredpages bytesrequested printf error allocate byte memory return null memalign membuff bytesize requiredpages bytesize print error failed allocate memory return null memset membuff requiredpages bytesize protect membuff prot mprotect membuff requiredpages bytesize prot printf error failed poison delimiters clean return null return membuff bytesize free functions returns success error memoryclear passed void pointing bytesize bytes clears byte setting implemented memset solution mem compiled warnings thing compiler warning state int memoryclear void memorypointerv size bytesize volatile uint memorypointer null memorypointerv null printf error null shouldnt return memorypointer memorypointerv bytesize memorypointer return note memorypointerpointer void void function definition returns success error passed void casts void points pointer pointing bytesize bytes sets byte null compliance frees memory points pointer null superficial testing confirms memory freed pointer set null memory cleared depth testing memory cleared required todo preferably memory clearing function replaced explicit bzero memset memzero explicit custom implementation verified optimized volatile pointer compliance memory barrier suggested security experts state int securefree void memory size bytesize void memorycorrectcast void databuffer function passed void declared void function definition technical reasons memorycorrectcast void memory basin sanity checks memorycorrectcast null printf error null shouldnt return bytesize printf error bytes memory invalid return prepare clear memory buffer databuffer void memorycorrectcast clear memory buffer volatile pointer compliance mem memoryclear databuffer bytesize print error failed clear memory buffer return attempt ensure memory clear optimized memory barrier compliance asm volatile databuffer memory tested valgrind correctly freeing memory free memorycorrectcast bytesize tested confirm proper pointer set null compliance memorycorrectcast null return.
 quote kmf april pmquote toctou april amsubgraph ways primary tools oz complete glad pretty person taught ramcrypt security person grace forum top smart retard.
 quote plunderinpete march good stuff told posted notes time.
 quote aethon march pmnice alot good dig guide secure hidden services configure guide making workstation improved good starting framework people rbac hidden service configuration workstation configuration edit bit rc rbac pretty involved sucking gamesome happening system approve block pax grsec features easy pax commands flags increases security prevents buffer overflow attacks working probabilistic definite compromises grsec hardenings clears memory freed lot security features openbsd patch linux kernel rbac system opened tor router guide cuz easier rbac isn super tor router benefits wanted learn rbac grsec workstation hidden service openbsd great router workstation hidden service design.
 quote arcane april amquote kmf april amon side fbi fuck doesn prosecuting people ignorance barrier securing convictions yeah played cp bust pwnt targets depending advanced advanced application layer attackers cut direct application layer path doubt nsa deanonymize entire forum wanted traffic analysis chain day forum day tor browser days popular hypervisors linus kernel extraordinarily sophisticated attack reach nsa pwn close active posters forum physical isolation day tor socksport.
 making openbsd advantages easier maintain openbsd tor router guide simultaneously working secure hidden services secure hidden services involved topic point security knowledge realize fucking scarf hackers talk irc level shit moderately afraid tbh guys security gods aware running sensitive hidden services thought pretty making lot mistakes thinking things today long shot realize year today thing forums understanding pretty shifty security reality touching security systems people cutting edge tbh fuzzing applications patching days disclosed cutting edge.
 quote kmf april amquote arcane april amquote kmf april amon side fbi fuck doesn prosecuting people ignorance barrier securing convictions yeah played cp bust pwnt targets depending advanced advanced application layer attackers cut direct application layer path doubt nsa deanonymize entire forum wanted traffic analysis chain day forum day tor browser days popular hypervisors linus kernel extraordinarily sophisticated attack reach nsa pwn close active posters forum true fbis attempts exploits woeful long continue.
 toctou pwnt fuck hoped compromised le lol.
 kmf laymens terms.
 situation actor successful ram based attack nevermind thinking rare considers circumstances seizing system powered.
 quote kmf april ami bridges pluggable transports hidden service disguise data center data center aware hosting popular hidden service le easy confirmation attacks point cover anonymous payments hiding communications hosting provider dont tor thought mind exit membership concealment communicating buying colocation dedi entry membership concealment hidden service dont talk.
 quote kmf april pmhowever physical isolation requires servers convenient security boxes point fde nginx box tor process box encryption sigaint shouldnt assume protect content drives memory servers identified attacker attacker physical access nice openbsd tor router lot good security features perfect os case doesnt encryption support learned initramfs allowing remote fde linux kvm ip switches secure place openbsds softraid stack boot de man bioctl problem remote youll ipmi ipkvm opens router interesting attacks type passphrase attach virtual media good god keydisk.
 quote zaphod april amquote aethon april amwtf kmf laymens terms free vulnerability create smp dialog function dialog record messaging pidgin otr plugin pidgin remote attackers execute arbitrary code vectors authenticate buddy menu item remote code execution vulnerability code box allowing things nasty shit bad zaphodouch.
 quote kmf april pmanother thing compiling web server nginx software clang safestack gcc process implementing version called mitigate rop gfree.
 quote kittenfm april pmfuzzing random strategies involved complex barely understand explaination dumbed bit true random fuzzing brute forcing password actual occurs lines password list theoretically improbable cracking someones wpa wifi reasonable amount time cases routers default random password changed deduce passkey days observe handshakes good wordlist patterns bugs software specific patterns bugs execution arbitrary code thought computing rainbow tables sense horrid markov chain dictionary list wpa cracking analogy quote fals documentation code select calibration pre fuzzing stage execution path examined detect anomalies establish baseline execution speed executed find trim pre fuzzing stage test case trimmed shortest form produces execution path length stepover chosen general relationship file size bitflip deterministic bit flips bits toggled time walking input file bit increments current variants avith deterministic arithmetics fuzzer subtract add small integers bit values stepover bits interest deterministic overwrite fuzzer list interesting bit values stepover bits extras deterministic injection dictionary terms user auto depending fuzzer user supplied dictionary auto created insert depending dictionary overwrite existing data inserted offsetting remaining data accommodate length havoc sort fixed length cycle stacked random tweaks operations attempted stage include bit lips overwrites random interesting integers block deletion block duplication assorted dictionary operations dictionary supplied place splice resort strategy kicks full queue cycle paths equivalent havoc splices random inputs queue arbitrarily selected midpoint sync stage set parallel fuzzing txt real fuzzing involved tool scans output fuzzers imports test cases time minutes exhaustive easier understand explanation techniques tool.
 leaving reference future knew theory stacks protect rop attacks months learned shadow stack implementation safe stack morequote introduction june memory corruption exploit mitigation named safestack merged llvm development branch peter collingbourne google coming release safestack developed code pointer integrity cpi project stand mitigation stay ahead curve security post aims discuss workings security benefits safestack consideration future attacks future improvements feature safestack nutshellsafestack mitigation powerful stack cookies protect critical data stack separating native stack areas safe stack control flow data accessed safe determined state analysis unsafe stack stored stack stacks located memory regions processs address space prevent buffer overflow unsafe stack corrupting safe stack safestack promises generally good protection common stack based memory corruption attacks introducing low performance overhead average documentation implemented safestack enabled stack pointer register esp rsp safe stack unsafe stack tracked thread local variable unsafe stack allocated initialization binary mmaping region readable suitable memory preceding region guard catch stack overflows unsafe stack region safestack incompatible stack cookies disables pretty school hacks involved buffer overflow overwrite return address stack force eip point executable code inserted programs memory shell code execute protected nx bit shell code excusable hackers started thing called rop return oriented programming inserting shell code simply bounced excusable code application hacked perform arbitrary actions executing op codes return arbitrary orders shadowstack hardens modern hacking stacks.
 quote kittenfm april pmdoes situation actor successful ram based attack nevermind thinking rare considers circumstances seizing system powered data ram minutes shut system cool individual hardened system wipes protects attacks guess occurrences weren frequent patches tresor grsecurity deal shortcomings fundamentally ways build encounter tool exists specific reason vulnerability exploited warrants safeguard.
 solid post solid game changer encryption entity powerful process compiling kernel fact patching kinds things breaks builds woman fat ass breaks concentration person figures figure benefits case work underground outweigh investment time build working grsecurity worth weight praised snowden type patch focus hardening linus kernels building anonymity software.
 hobbled device proof concept closer stupid secure intended attack resistance hidden service drop box emplace reliable internet access linked ideally monitor internet usage recognize device network tor traffic primary purpose device expose sensitive data mb including hidden service private key encryption key main volume sensitive keys bitcoin key attacker discovers device destroy render unintelligible data volume stored encrusted ramdisk software hardware countermeasures triggered describe device physically consists raspberry pi connected ethernet single power supply powers boards custom enclosure hardware sensors hooked gpio pi custom python scripts enclosure cardboard wood laquer mod podge raspberry pi wireless dongle runs phoenix gateway distribution extra functionality raspberry pi connected ethernet functions expect transparent tor proxy pi networking work pis lem raspberry pi boots creates mb encrypted ramdisk dm crypted container looped inside ramfs encryption key random guide gateway private key hidden service server key ends folder small pieces data sensitive rely encfs edward bitcoin private keys gateway provisioning gateway handles provisioning process bad easier main security feature mb encrypted ramdisk device boots enters provisioning mode creates primary encrypted ramdisk temporary moves encrusted set gog private public keys primary ramdisk file called ramdisk zip gpg extract primary ramdisk decrypted ram file encrypted boxs gpg keys turn gpg encrypted straight password doesnt didnt provisioning file method decrypt sd card securely deleting data memory problematical retarded figure creates temporary gpg key pair encrypts signs random string trusted public key setup device python scripts liberally stole hacked login preconfigured reddit account send encrypted signed message preconfigured reddit account manually open account decrypt pm temporary public key random string passcode encrypt password decrypt gpg keys reply message polls reddit pms minutes decrypt temporary private key random passcode contents decrypt main keys deletes temporary decrypts ramdisk secondary ramdisk extracts clearest ramdisk zip secondary ramdisk primary deletes secondary good prior forgetting key secure copy send key cleartext file directly servers encrypted ramdisk reconfigures tor hidden service keeping tor configuration files ramdisk finally connections server servers provisioning simpler creates encfs encrypted directory random password saves password encrusted ramdisk mounts directory waits key file ramdisk directory file decrypt disables ssh side gateway runs security daemon monitors gpio headers hardware security sensors basically security sensor tripped inline dc power powers pis solid state relay gateway pi energize remove power causing reset security sensor photocell sealed box light amount open box unplugging main screw holding enclosure closed completes circuit screwed unscrewed continuity broken gateway pi watches lastly gateway pi loses wife connection reconnect check ssids nearby vastly assumes moved triggers power relay removes power pi power cycle point power cycle encrusted ramdisk lost forever hidden service private key encryption keys cold boot attack successful reset discover properly setup provisioned provisioning process ate moved files sdmem wipe ram simultaneously deleting permenantly encrypted files easier point sdcards reimage fifty times working longer hour kind depth hardware electrical issues friends fact custom init runlevels work properly isnt call reliable tons reasons secure stupid pleased work wrong deletes good.
 purchase adroit phone tablet cash root wipe install cyanogenmod droid orbot sshd linuxy tools set hidden service wifi open telco splice power link wifi closest coffee shop residence walk grey box local telco branding label unplug nose technicians messing install nodes onion balance robust hidden service obfsproxy private bridges stealth benefit node free rofl.
 cross link fuzzing thread started kmf point vulnerability discovered asa.
 quote kmf april amhowever protect local access servers things tricky encrypt link tor router nginx box tor router strip tor encryption forwarding traffic lan nginx box likewise implied encryption nginx box tor router attacker tap link communications ash tunneling encrypt link ipsec opened side things integrates nicely quote kmf april ami wanted ramcrypt tricky doesnt virtual machines lacking true register access told work hypervisor binary encrypt entire vm memory virtual isolation nginx isolate attackers hardware aerial numbers physical isolation tor router protects external ip address encrypted ram dont physical access hardware lost layer lines code turn vt iommu youll lose hands hardware promise find gear colo hot splice power pick running carry chassis alarm bypass trivial ram encryption isnt fool proof complexity enemy security stuff maintain stuff wrong threat model founded adversary fucked hands hardware buying hardware cash buying cash solve aerial number problems spoof mac addresses extra points octets nics vendor normal stealth isp select mentioned good buy hardware doesnt intel amt amds psp older hardware mind mix system architectures servers big endian sparc routers frustrate hell exploit writer blindly assumes entire intel amd box control building fortify guard dogs add building perimeter alarms trigger wiping disk keys wipe ram add panic button staff creative fails set legal framework hot coals countries rights talk police common carrier laws question judge signed warrant dismiss allegations claiming defective paperwork.
 detailed guide kmf.
 quote aethon april amwtf kmf laymens terms free vulnerability create smp dialog function dialog record messaging pidgin otr plugin pidgin remote attackers execute arbitrary code vectors authenticate buddy menu item remote code execution vulnerability code box allowing things nasty shit bad zaphod.
 quote kmf april pmwhat thoughts colocation versus data center provided dedicated servers keeping server physical possession risk tbh extend attack surface area hidden service isolate primary disadvantage colocation attack surface isolation layer increased versus dedicated server data center essentially payment network colocation trust hardware installed downside colocation facility cctv cameras cover scenario operate fake hosting company countries hosting company liable common carrier laws hidden service servers physically adversary claim customer paperwork stand ground problem expect surveillance benefit raid warning signs carefully colocation cage outfitted cameras hidden cases servers customer servers musing aloud balls steel easily rocked cops win assumes netsec failed bow hosting provided hear network idea pai card literally copying ram exist os suspect pay bitcoin dedicated hosting companies honeypots call paranoid stranger shit lifetime trust ipmi pau isnt pwned asa didnt swap components server mailed bitcoin host offshore host host frequented privacy nuts aerial numbers mac addresses copied db mailed hosting company good case vms option regular business remember rons coffee shop robot place free wifi steady churn mac addresses customers servers room vpns hostile countries tor riding inside wouldn strange lots business people vpns open wifis general security concerns fake hosting company real business books till darknet stuff money easy funds bank unusual hosting companies bitcoin wouldn weird coffee shop cyber cafe add accept bitcoin coffees snacks business fronts work nail salon free wifi alarmed broom closet humming servers mark post germinal creativity pay lot spatial sphere quote kmf april pmyou good point aerial numbers physical isolation virtual isolation provided attacker root host aerial numbers assist locating server benefits virtual isolate attacker manage penetrate web server easier shove foothold provided dont penetrate hypervisor youve drinking rutkowska kool aid qubes os cool dont wrong server installation segment project physical hardware absolute amount united code addition proper memory purifications aslr pie relro heap protections blah elah blah cluster work shortcomings xorg workstation arena limit damage attacker inside save exploits xen huge cve list bugs vt vt txt amd iommu popcnt giant pile cup extensions countless erratas generally worded assumption provide security quote theo de raadt hub quoteyou absolutely deluded stupid worldwide collection software engineers write operating systems applications security holes turn suddenly write virtualization layers security holes mic drop.
 fuzzing random strategies involved complex barely understand explaination dumbed bit true random fuzzing brute forcing password actual occurs lines password list theoretically improbable cracking someones wpa wifi reasonable amount time cases routers default random password changed deduce passkey days observe handshakes good wordlist patterns bugs software specific patterns bugs execution arbitrary code thought computing rainbow tables sense.
 fuzzing automatic tools pretty stupid find days find plenty free exploits exploit db combrute force wise choise select pretty legal guys thing.
 exploitable crash key fuzzers sounds ai tech years things fuzzers.
 quote toctou april amsubgraph ways primary tools oz complete commenting shame hear enjoying playing vm.
 