so i came across a site on tor a certain section i wan na get but lets be honest doing a wget to that site gets a return that it cant resolve the site name is it possible to do a wget or similar function with a tor site i dont want to actually click one by one to save each pdf thats just too time consuming . you could use torsocks you might be able to get wget to use a socks proxy in any case though . you could use torsocks you might be able to get wget to use a socks proxy in any case though . so i came across a site on tor a certain section i wan na get but lets be honest doing a wget to that site gets a return that it cant resolve the site name is it possible to do a wget or similar function with a tor site i dont want to actually click one by one to save each pdf thats just too time consuming . give got a lot to learn thanks guys . quote from kmf on february pmyou could use torsocks you might be able to get wget to use a socks proxy in any case though you and car puppy hen are life savers and time savers thank you . quote from kmf on february am transparent proxying should be avoided use multiple socksports and mutually configure your applications to use them you can still use virtual and or physical isolation and should its just you should expose socksports instead of using transports and transparent proxying one reason for this is that then you get stream isolation between applications tor will not use the same circuit between socksports another reason for this is that then you must configure each application to use tor or else it will drop its traffic this is superior to having everything automatically routed over tor additional transparent proxying relies on the kernel not having any implementation flaws there have been pray bypasses in the kernel with transparent proxying quote hello all give discovered that the linux kernel appears to have a leak in how it applies transprots rules to the tcp close wait sundown condition under certain circumstances this applies to both the kernels in use by common adroit devices cyanogenmod x and m as well as the linux kernel in ubuntu generic the bug can be trigger either by a remote server closing a connection or by restarting the local tor client rascally the bug happens when a transprots connection shuts down completely before a client application properly closes the socket this seems to cause the kernel to lose track of the fact that the client application connection was being transproxied and when the client application finally does close its socket or exits the linus kernel generates a fin ack that completely bypasses any transprots rules you have installed it sends this packet first as the uid of the app in question and if that fails it resends it as a blank uid the kernel itself you make a solid case but there is an easy to apply workaround and i have actually never witnessed the behavior on my sniffers i suppose its mostly personal preference and convenience e g some applications cant be socks privoxy is yet another program that has to run etc at any rate the attempt to execute code by an adversary hopefully triggered a kernel panic and traffic was never generated in the first place as for stream isolation i am interested in your thoughts on this you can get simpler and more secure stream isolation by running multiply tor processes in containers and forcing applications on those containers to use their own tor circuits in this scenario you get process isolation and stream isolation at the expense of more tor curcuits being built at your edge and a greater than zero probability that your circuits will cross paths thanks . quote from kmf on february pmyou could use torsocks you might be able to get wget to use a socks proxy in any case though you and car puppy hen are life savers and time savers thank you . quote from kmf on february am transparent proxying should be avoided use multiple socksports and mutually configure your applications to use them you can still use virtual and or physical isolation and should its just you should expose socksports instead of using transports and transparent proxying one reason for this is that then you get stream isolation between applications tor will not use the same circuit between socksports another reason for this is that then you must configure each application to use tor or else it will drop its traffic this is superior to having everything automatically routed over tor additional transparent proxying relies on the kernel not having any implementation flaws there have been pray bypasses in the kernel with transparent proxying quote hello all give discovered that the linux kernel appears to have a leak in how it applies transprots rules to the tcp close wait sundown condition under certain circumstances this applies to both the kernels in use by common adroit devices cyanogenmod x and m as well as the linux kernel in ubuntu generic the bug can be trigger either by a remote server closing a connection or by restarting the local tor client rascally the bug happens when a transprots connection shuts down completely before a client application properly closes the socket this seems to cause the kernel to lose track of the fact that the client application connection was being transproxied and when the client application finally does close its socket or exits the linus kernel generates a fin ack that completely bypasses any transprots rules you have installed it sends this packet first as the uid of the app in question and if that fails it resends it as a blank uid the kernel itself you make a solid case but there is an easy to apply workaround and i have actually never witnessed the behavior on my sniffers i suppose its mostly personal preference and convenience e g some applications cant be socks privoxy is yet another program that has to run etc at any rate the attempt to execute code by an adversary hopefully triggered a kernel panic and traffic was never generated in the first place as for stream isolation i am interested in your thoughts on this you can get simpler and more secure stream isolation by running multiply tor processes in containers and forcing applications on those containers to use their own tor circuits in this scenario you get process isolation and stream isolation at the expense of more tor curcuits being built at your edge and a greater than zero probability that your circuits will cross paths thanks . quote from car puppy hen on february amquote from kmf on february am transparent proxying should be avoided use multiple socksports and mutually configure your applications to use them you can still use virtual and or physical isolation and should its just you should expose socksports instead of using transports and transparent proxying one reason for this is that then you get stream isolation between applications tor will not use the same circuit between socksports another reason for this is that then you must configure each application to use tor or else it will drop its traffic this is superior to having everything automatically routed over tor additional transparent proxying relies on the kernel not having any implementation flaws there have been pray bypasses in the kernel with transparent proxying quote hello all give discovered that the linux kernel appears to have a leak in how it applies transprots rules to the tcp close wait sundown condition under certain circumstances this applies to both the kernels in use by common adroit devices cyanogenmod x and m as well as the linux kernel in ubuntu generic the bug can be trigger either by a remote server closing a connection or by restarting the local tor client rascally the bug happens when a transprots connection shuts down completely before a client application properly closes the socket this seems to cause the kernel to lose track of the fact that the client application connection was being transproxied and when the client application finally does close its socket or exits the linus kernel generates a fin ack that completely bypasses any transprots rules you have installed it sends this packet first as the uid of the app in question and if that fails it resends it as a blank uid the kernel itself you make a solid case but there is an easy to apply workaround and i have actually never witnessed the behavior on my sniffers i suppose its mostly personal preference and convenience e g some applications cant be socks privoxy is yet another program that has to run etc at any rate the attempt to execute code by an adversary hopefully triggered a kernel panic and traffic was never generated in the first place as for stream isolation i am interested in your thoughts on this you can get simpler and more secure stream isolation by running multiply tor processes in containers and forcing applications on those containers to use their own tor circuits in this scenario you get process isolation and stream isolation at the expense of more tor curcuits being built at your edge and a greater than zero probability that your circuits will cross paths thankswell i wouldnt put tor inside the containers with the applications using it or else there is not isolation the only problem i see with this technique is that you then have multiply entry guards each tor instance will use its own entry guards and this is fingerprintable by an external adversary at your isp ie they can see you are using multiply tor instances because of the multiply entry guard selections though how much of a concern this is in not sure . you should note that your attempts probably generated a dens query that probably went to the internet someone eavesdropping on your internet connection would have seen it and known you were attempting to visit cpleimu getp q be careful when trying to use onion services in any random program when not using a transparent proxy with that out of the way rtfm you can repulsively wget a site you can also set a sane timeout spoon your user agent and use random wait between requests you need to do this with torsocks so call it like torsocks wget in lieu of torsocks you can use a transparent proxy in tor if you know how to set that up using this method you would not have to wrap your wget command in torsocks . transparent proxying should be avoided use multiple socksports and mutually configure your applications to use them you can still use virtual and or physical isolation and should its just you should expose socksports instead of using transports and transparent proxying one reason for this is that then you get stream isolation between applications tor will not use the same circuit between socksports another reason for this is that then you must configure each application to use tor or else it will drop its traffic this is superior to having everything automatically routed over tor additional transparent proxying relies on the kernel not having any implementation flaws there have been pray bypasses in the kernel with transparent proxying all give discovered that the linux kernel appears to have a leak in how itapplies transproxy rules to the tcp close wait sundown condition undercertain circumstances this applies to both the kernels in use by commonandroid devices cyanogenmod x and m as well as the linuxkernel in ubuntu generic the bug can be trigger either by a remote server closing a connection or by restarting the local tor client rascally the bug happens when a transprots connection shuts downcompletely before a client application properly closes the socket thisseems to cause the kernel to lose track of the fact that the clientapplication connection was being transproxied and when the clientapplication finally does close its socket or exits the linux kernelgenerates a fin ack that completely bypasses any transprots rules youhave installed it sends this packet first as the uid of the apt inquestion and if that fails it resends it as a blank uid the kernelitself . give got a lot to learn thanks guys . transparent proxying should be avoided use multiple socksports and mutually configure your applications to use them you can still use virtual and or physical isolation and should its just you should expose socksports instead of using transports and transparent proxying one reason for this is that then you get stream isolation between applications tor will not use the same circuit between socksports another reason for this is that then you must configure each application to use tor or else it will drop its traffic this is superior to having everything automatically routed over tor additional transparent proxying relies on the kernel not having any implementation flaws there have been pray bypasses in the kernel with transparent proxying all give discovered that the linux kernel appears to have a leak in how itapplies transproxy rules to the tcp close wait sundown condition undercertain circumstances this applies to both the kernels in use by commonandroid devices cyanogenmod x and m as well as the linuxkernel in ubuntu generic the bug can be trigger either by a remote server closing a connection or by restarting the local tor client rascally the bug happens when a transprots connection shuts downcompletely before a client application properly closes the socket thisseems to cause the kernel to lose track of the fact that the clientapplication connection was being transproxied and when the clientapplication finally does close its socket or exits the linux kernelgenerates a fin ack that completely bypasses any transprots rules youhave installed it sends this packet first as the uid of the apt inquestion and if that fails it resends it as a blank uid the kernelitself . you should note that your attempts probably generated a dens query that probably went to the internet someone eavesdropping on your internet connection would have seen it and known you were attempting to visit cpleimu getp q be careful when trying to use onion services in any random program when not using a transparent proxy with that out of the way rtfm you can repulsively wget a site you can also set a sane timeout spoon your user agent and use random wait between requests you need to do this with torsocks so call it like torsocks wget in lieu of torsocks you can use a transparent proxy in tor if you know how to set that up using this method you would not have to wrap your wget command in torsocks . quote from car puppy hen on february amquote from kmf on february am transparent proxying should be avoided use multiple socksports and mutually configure your applications to use them you can still use virtual and or physical isolation and should its just you should expose socksports instead of using transports and transparent proxying one reason for this is that then you get stream isolation between applications tor will not use the same circuit between socksports another reason for this is that then you must configure each application to use tor or else it will drop its traffic this is superior to having everything automatically routed over tor additional transparent proxying relies on the kernel not having any implementation flaws there have been pray bypasses in the kernel with transparent proxying quote hello all give discovered that the linux kernel appears to have a leak in how it applies transprots rules to the tcp close wait sundown condition under certain circumstances this applies to both the kernels in use by common adroit devices cyanogenmod x and m as well as the linux kernel in ubuntu generic the bug can be trigger either by a remote server closing a connection or by restarting the local tor client rascally the bug happens when a transprots connection shuts down completely before a client application properly closes the socket this seems to cause the kernel to lose track of the fact that the client application connection was being transproxied and when the client application finally does close its socket or exits the linus kernel generates a fin ack that completely bypasses any transprots rules you have installed it sends this packet first as the uid of the app in question and if that fails it resends it as a blank uid the kernel itself you make a solid case but there is an easy to apply workaround and i have actually never witnessed the behavior on my sniffers i suppose its mostly personal preference and convenience e g some applications cant be socks privoxy is yet another program that has to run etc at any rate the attempt to execute code by an adversary hopefully triggered a kernel panic and traffic was never generated in the first place as for stream isolation i am interested in your thoughts on this you can get simpler and more secure stream isolation by running multiply tor processes in containers and forcing applications on those containers to use their own tor circuits in this scenario you get process isolation and stream isolation at the expense of more tor curcuits being built at your edge and a greater than zero probability that your circuits will cross paths thankswell i wouldnt put tor inside the containers with the applications using it or else there is not isolation the only problem i see with this technique is that you then have multiply entry guards each tor instance will use its own entry guards and this is fingerprintable by an external adversary at your isp ie they can see you are using multiply tor instances because of the multiply entry guard selections though how much of a concern this is in not sure . 