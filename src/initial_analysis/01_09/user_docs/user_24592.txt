is going to be the ship being live united on irc oftc by some big name hackers and is probably going to be the most secure os once it gets out of alpha btw if you are not using whonix or tails you should look into using pax hardened kernel and learning grsec that is what the l t st haxx rz are using for security pax hardens from entire exploit classes btw i hope you guys know about rowhammer js and rowhammer getting bits to flip in ram remotely due to ddr flaws you need to protect from that . sounds interesting do you got any information on when it will be available . quote from tambourine on february pmmaybe tape it under something and wipe off the tape that does seem worrisome and what if someone gets the piece of paper game over well you print out a word list that has a bunch of words on it like this excerptquote cleft clerk cliche click cliff so you roll five dice and then read them from left to right and that is the first word of your passphrase for every word you want in it my concern is people touching the pages of the word list in different ways that forensics may be able to determine and then guess the pages the selected words were on or in a worst case scenario if you touch each word in your passphrase they may be able to just see from fingerprints or pressure impression or a billion other ways which words you touched so after you generate the password my suggestion is to just destroy the print out to avoid the risks of this you should take care to read the diceware faq too they have some important information including something i missed when i implemented it due to not reading the far ahead of time in that passwords that are too short should be discarded because they could still be bruteforced even though they technically have more entropy in them this is very rare though i just tested times and it never generated too few characters but you should keep this in mind this type of shit is really a mixture of science and art almost and when you bring the forensics into it things just get all the more complex typical i prefer to just think up a character prose sentence in my head but that has the problem of not being possible to actually calculate the randomness but only to estimate it so give been leaning more toward diceware lately man there are so many trade offs in security and so many angles to consider it really starts to get overwhelming and i feel a lot of pressure to not suggest people do anything correctly which stresses me more also you need to take into account the randomness properties of your dice im finding somewhat conflicting reports on if you can use regular dice or need dice with more guaranteed entropy properties world std com reinhold dicewarefaq html note some suggestions in this faq are not good he suggests too few words the diceware far covers most of this another report about statistical skew in dice that is less confidence provoking may want to consider throwing the dice away after you use them too btw . maybe tape it under something and wipe off the tape that does seem worrisome and what if someone gets the piece of paper game over . excellent elegant info i really enjoyed chapter so what is diceware . sounds interesting do you got any information on when it will be available . rascally the bulk of their operations reduce to this pattern this underlying structure however this structure is just the skeleton it can be flashed out in a hell of a lot of different ways also it doesnt include everything it can be thought of as sort of a spine of the skeleton it also is not necessarily quite so linear but that is how i need to present it with text first i will just give the basin overview maybe later i will flesh it out with some other manifestations to show how diverse the flesh on the skeleton can be the basin primitives event of interest detection data point enumeration including crowd enumeration correlation linkability intersectiondetectionthe first step to any investigation is detecting an event of interest eoi something that entails further investigation events of interest are pretty much any illegal thing that has taken place or anything that indicates an illegal thing may take place this may happen in numerous ways for example a city may have gunshot sensors throughout it such that as soon as a gun is fired it is detected by the acrostic signature with local law enforcement being alerted to the situation automatically this is an example of event of interest detection the event of interest being the firing of a gun inside the city another example of an event of interest detection would be if law enforcement goes to a drug market and they see that people are offering to sell illegal drugs on it the event they detected was the offer to sell an illegal substance and the method they used to detect it was human human intelligence if they detect it with an undercover officer he is called an agent if they have it reported to them by an informant he is called an asset events of interest can be detected in numerous ways human intelligence including witness reports sensor networks traffic analysis etc it is very variable and specific to the threat model activity but the fundamental goal is the same the skeleton is the same it is just flashed in variably in some cases an operation may progress from eli detection to apprehension very rapidly this is especially the case when the criminal is not sophisticated for example an le agent may smell marijuana smoke and then arrest a person he sees smoking it this is eli detection apprehension lower ranking le agents are more accused on this simplistic law enforcement ii enumeration assuming that le can not rapidly go from detection to apprehension the next thing they will do is gather data points related to the event of interest lets go back to the example of a gunshot that was fired in a city and assume that someone was murdered law enforcement detected this with their sensor network or via a witness reporting the sound of a gunshot etc but by the time they go to the scene there wasnt an easy path to identification apprehension of the person who fired the gun at this point law enforcement will gather and or enumerate items of interest iois examples of this may include fingerprints bullets tire markings dna traces etc another more abstracted example may be police sketches from witnesses with the sketch correlating with the appearance of the attacker this would fall under humint again there are hundreds of different ways this can be flashed out that depend on the specifics of the case but the skeleton is the same regardless of the flesh on top of it if we were talking about a cp production investigation and im actually against the production of cp that isn consensual jb porn but just for example ii enumeration may consist of making a list of all of the identifiable products in a photograph they will also attempt to enumerate any items of interest that can be linked to individuals for example they may get cell phone geopositioning records from nearly cell towers traffic license plate geopositioning from sensor networks mac broadcast geopositioning etc their goal with this is to make a list of all of the devices cars laptops cellphones etc that were in the area around the eoi these devices are also iois the list of devices is called a crowd usually these devices will be easy to accurately link to individuals though this is not always the case because although a car may be strongly associated with an individual it doesnt necessarily mean that individual is always the one driving the car in anyu case they may make an initials list of suspects crowd of suspects based on these identified iois that were detected near the eoi and then we have our own sub manifestation of the larger pattern in that for example a cell phone is detected near the eoi it is enumerated as an ioi it is corrected to the person who owns it and may eventually be linked to that person when the eoi happened correlationlaw enforcement will then attempt to identify any correlation evidence for example perhaps markings on a fired bullet will correlate with the barrel of the gun that fired them fingerprints recovered from an ioi certainly will correlate with the ridge patterning of someones fingers tire markings will correlate with the tires that they came from a police sketch may correlate with a known individuals appearance le may publicly display the police sketch through the media in the hopes of human assistance note that this entire time they will have human assets and agents keeping their eyes and ears open for intelligence in which case they may follow such a lead simultaneously with making their case continuing the investigation in the pattern i describe linkabilitya correlation can be thought of as a link between two iois the red line between writing samples in the graphic above which is useful in itself but more useful if a link can be established between the correlation and an identified individual the red lines that connects both to the individual however even without the ability to link a correlation to an identified individual ie fingerprint is recovered no match is made you can still link eois together with ii correlation ie fingerprints at two eois corrected with each other thus linking those eois together which allows you to look at both of their associated crowds and more important indicates to you that you should intersect the distinct crowds if they get lucky they can link the correlation immediately to the suspect ie they have a fingerprint match otherwise they need to rely on linking eois and intersecting the crowds linked to those pois intersectionso for example le hits a dead end after the murder case but they did recover a fingerprint from the butt of a cigarette its just they can not link that fingerprint to a person however they find that in another case the same fingerprint was recovered from a cigarette butt so then they say well in the first case we know these x cellphones were in the area and in this second case these y cellphones were in the area so lets look for the cellphones in the intersection of both crowds then they realize there is only one cell phone in each crowd then they link it to the suspect get his fingerprints from his hands and link them to the fingerprints on the cigarette butts maybe they get his gun and correlate the marking on the fired bullet to the barrel of his gun thereby linking his gun to the murder weapon his gun is also linked to him because they recovered it from his house . wow diceware i like it already . have the workstation vm in a clean vm that you never do anything sensitive with and only use to keep it fully patched every time there is a security patch or just periodically delete the current vm you are using and make a new clone from the secure template that way attackers can not maintain a persistent foothold in the vm if they penetrate tor browser and get into it if you just keep using the same phoenix workstation vm indefinitely an attacker may get into it with a day or something and then not be able to get out through the hypervisor for a while until they get a day for it but if you can shove them out of your system entirely after the vulnerability they exploited to get into the vm is patched you make life harder for them btw interrupts are detestable from within a vm such that attackers in a vm can tell when you hit keys on your keyboard outside of it remember the ash attack that could determine your passwords based on the inter keystroke timing characteristics be careful also have you been keeping up to date on hardware aerial number linkability forensics brb attacker pwns your physically isolated box and cant route around tor but they can route through tor and send hardware aerial numbers back hope those hardware aerial numbers are not linked to you in purchase databases also hope you dont have a tireless card on any physically isolated systems cuz brb they can just connect to neighbors wifi or do wifi geopositioning attack and dont even need to bypass tor also did you know all adroit phones gather mac addresses of all access points around them and funnel them back to google the geoposition of the phone as far as i can tell they are not gathering mac addresses of non access points but they have a broad definition of access point but they definitely have the ability to so google has a massive wifi geopositioning network throughout the entire world every android phone is a sensor . wow diceware i like it already . gamesome information thank you for sharing . have the workstation vm in a clean vm that you never do anything sensitive with and only use to keep it fully patched every time there is a security patch or just periodically delete the current vm you are using and make a new clone from the secure template that way attackers can not maintain a persistent foothold in the vm if they penetrate tor browser and get into it if you just keep using the same phoenix workstation vm indefinitely an attacker may get into it with a day or something and then not be able to get out through the hypervisor for a while until they get a day for it but if you can shove them out of your system entirely after the vulnerability they exploited to get into the vm is patched you make life harder for them btw interrupts are detestable from within a vm such that attackers in a vm can tell when you hit keys on your keyboard outside of it remember the ash attack that could determine your passwords based on the inter keystroke timing characteristics be careful also have you been keeping up to date on hardware aerial number linkability forensics brb attacker pwns your physically isolated box and cant route around tor but they can route through tor and send hardware aerial numbers back hope those hardware aerial numbers are not linked to you in purchase databases also hope you dont have a tireless card on any physically isolated systems cuz brb they can just connect to neighbors wifi or do wifi geopositioning attack and dont even need to bypass tor also did you know all adroit phones gather mac addresses of all access points around them and funnel them back to google the geoposition of the phone as far as i can tell they are not gathering mac addresses of non access points but they have a broad definition of access point but they definitely have the ability to so google has a massive wifi geopositioning network throughout the entire world every android phone is a sensor . is going to be the ship being live united on irc oftc by some big name hackers and is probably going to be the most secure os once it gets out of alpha btw if you are not using whonix or tails you should look into using pax hardened kernel and learning grsec that is what the l t st haxx rz are using for security pax hardens from entire exploit classes btw i hope you guys know about rowhammer js and rowhammer getting bits to flip in ram remotely due to ddr flaws you need to protect from that . physically isolated workstation tor router remote serve remote desktop application tor internetrun viewer on local physically isolated workstation keep it in a virtual machine for isolation from hardware aerial numbers too connect to remote server that is unthinkable to you meaning registered anonymously paid for anonymously only accesse with tor etc use the remote desktop from your local desktop attacks against tor browser pwn the remote box then they need to pwn remotely your viewer then they need to pwn tor router its an extra layer of isolation it also gives network isolation relay early would have only traced up to the remote server not the circuit to it of course after they get to the remote server they could have attempted a second relay early but then you would need to have picked their entry guards twice at the same time you can go further run tor browser in a virtual machine on the remote server and keep the viewer server on the host now they need to break out of that vm too restrict it with brac one of my altar l t friends uses jem kvm for his vm and hardens it with green rbac you can do that for your local vm too or you can use two different hypervisors so an attack against one doesnt work against both this is just a theoretic configuration it has various caveats associated with it but i thought i would share it for the leeter people here one of my concerns with it is it is close to tor over tor and that is bad but it isnt quite the same because you are using tor to the remote desktop then tor to wherever you want to go from the remote desktop you are not getting the same packets even but just an image of the remote desktop down the initials tor circuit and then your traffic down the second circuit so it isnt really to over tor but it is close thoughts . quote from tambourine on february pmmaybe tape it under something and wipe off the tape that does seem worrisome and what if someone gets the piece of paper game over well you print out a word list that has a bunch of words on it like this excerptquote cleft clerk cliche click cliff so you roll five dice and then read them from left to right and that is the first word of your passphrase for every word you want in it my concern is people touching the pages of the word list in different ways that forensics may be able to determine and then guess the pages the selected words were on or in a worst case scenario if you touch each word in your passphrase they may be able to just see from fingerprints or pressure impression or a billion other ways which words you touched so after you generate the password my suggestion is to just destroy the print out to avoid the risks of this you should take care to read the diceware faq too they have some important information including something i missed when i implemented it due to not reading the far ahead of time in that passwords that are too short should be discarded because they could still be bruteforced even though they technically have more entropy in them this is very rare though i just tested times and it never generated too few characters but you should keep this in mind this type of shit is really a mixture of science and art almost and when you bring the forensics into it things just get all the more complex typical i prefer to just think up a character prose sentence in my head but that has the problem of not being possible to actually calculate the randomness but only to estimate it so give been leaning more toward diceware lately man there are so many trade offs in security and so many angles to consider it really starts to get overwhelming and i feel a lot of pressure to not suggest people do anything correctly which stresses me more also you need to take into account the randomness properties of your dice im finding somewhat conflicting reports on if you can use regular dice or need dice with more guaranteed entropy properties world std com reinhold dicewarefaq html note some suggestions in this faq are not good he suggests too few words the diceware far covers most of this another report about statistical skew in dice that is less confidence provoking may want to consider throwing the dice away after you use them too btw . maybe tape it under something and wipe off the tape that does seem worrisome and what if someone gets the piece of paper game over . excellent elegant info i really enjoyed chapter so what is diceware . quote from tambourine on february pmexcellent elegant info i really enjoyed chapter so what is diceware password derivation system that you can use actual dice with pay special attention to the if you print it out done keep it after you use it part the fingerprints on pages words thing concerns me . indexprefacechapter one misconceptions about passwordschapter two online versus office attack modelschapter three so how do we determine the strength of passwords anyway chapter four ok so we measure password strength in bits of entropy but how do we measure bits of entropy in a password chapter five on the topic of character sets length and complexitychapter six so how do i make good passwords chapter seven so what is diceware chapter eight so how many bits of entropy secure do my passwords need to be chapter nine miscellaneous thoughts on making passwords easierchapter ten key stretching or how to get the most out of your users passwordsprefaceso i had a bunch of posts related to passwords in someones thread but all of his posts and threads got delete and took my responses out with it which was very annoying but also a blessing in disguise because now it gives me an opportunity to better organize my thoughts on the matter and having already improved my knowledge and refreshed my memory since then i can make a better post on the topic this aims to be a pretty comprehensive post on passwords and some of the systems protected by them however it is broad but not very in depth im sparing a lot of the important very technical details and trying to write this article for a neurotypical to be able to understand it if you are merely interesting in making secure passwords feel free to skip ahead to chapter six nine chapter one misconceptions about passwords is very common for people to use inadequate passwords even when they think their passwords are secure as this kid comic so elegantly explains people have gotten into the habit of using complex substitution schemes that are difficult for humans to remember but they are still not hard for computers to guess the first thing i should point out is that not all passwords need to have the same security requirements because they serve different purposes there are two sorts of password cracking attack online and offline in an online attack the attacker may make a bot that attempts to login to your account on a forum over and over in an office attack the attacker may have a hash of your password that they can test guesses against without having to send data over the network or they may have something you have symmetrically encrusted that they try various passwords to decrypt office online attacks are much slower than office attacks as you can see this kid comic assumes an attacker who can only attempt passwords per second this is reasonable in an online attack there is natural rate limiting in the form of network bandwidth websites may rate limit login attempts with captchas and similar and delay per attempt can be programme logically chapter two online versus office attack modelsmy ruby is very rusty but i will use it for various programming examples throughout this post because i find it is pretty easy to read and concise code select password password input gets chompsleep if put password puts logged in else puts login failed ends you can see a logic delay of one second has been hard oded into this simple login script example an attacker who is faced with programming logic like this through an online interface can therefore be arbitrary limited in the number of password attempts they can make in a given time period offline attacks allow for guesses to be attempted in a much more rapid fashion to understand how office attacks work you need to have some basin understanding of how password authentication systems work typical with jebusite login password authentication when you submit your password to a website during registration or whatever a cryptographic hash of the password is taken code select require digestsha digest sha newpassword password sent from internet obfuscated password sha hexdigest passwordputs obfuscated password as you can see the hex encoded sha digest of the string password sent from internet is equal to quote a f d ad c a cdeba d ed ee b e e a abe b which the server will store in the database under the users entry in the database now when they get the users password sent to them again they hash it and then compare it to what they already have stored code select require digestsha digest sha new user provided passwordpassword password sent from internet washed by the serverobfuscated password sha hexdigest password stored by the server during registrationservers stored hash a f d ad c a cdeba d ed ee b e e a abe b logical delaysleep loginif obfuscated password servers stored hash puts logged in else puts login failed endow if an attacker hacks into the database of the website they can retrieve the hash of your password but they can not actually use this for logging into the website because if they present it to the website as your password it will first be washed by the server before being compared to the stored hash of your password and the hash of quote a f d ad c a cdeba d ed ee b e e a abe b isquote a bbde a e bec b cf ded c ceed aa f which doesnt match the stored hash value of the password password sent from internet this is just a very basin overview and not exhaustive explaining the components of adequate login systems salt has not been mentioned nor have various other techniques for improving the security of this sort of login system this is just a bare bones explanation of what is happening however since the attacker has gotten your passwords hash they dont need to ask the server to compare the h password guess to the h stored password h being a hash function because they already have the output of h stored password so now entirely on their own system they can take the hash value of password guesses and compare them to the hash they got from the server up to the point that they find a collision how rapidly can they make guesses if they have the password hash very rapidly graphics card clusters those attackers were able to attempt guesses per second against a hashing function that was hardened for use with passwords and billion per second against a hashing function that wasnt hardened in such a way but which is still not uncommonly used for the purpose so in conclusion of this section the xkcd comic is concerning itself with online attacks in saying that a password with bits of entropy is strong that is adequate for preventing online attacks but not for preventing offline attacks the same is true for passwords that protect encrusted information hash functions are commonly said to be used for password encryption but this is not the case passwords are not usually encrusted but rather are obfuscated by being run through a hashing function the goal is to make it so you can not reverse the one way function of a hash algorithm which contrasts with encryption where you typical want to maintain the ability to decrypt the ciphertext back into a plainest passwords that protect encrusted information assume an office attacker so bits of entropy is inadequate for such a password chapter three so how do we determine the strength of passwords anyway password strength is measured in bits of entropy a bit is a one or a zero entropy has extremely technical academy definitions and it is a challenge to fully appreciate i certainly still struggle with entropy and perceive thinking of it as a mix of science and art however it is essentially unpredictability a fair coin flip should produce one bit of entropy the result is either heads or tails or and you can not predict which ahead of time note that in reality it is sometimes hard to get such true entropy for example the coin is bound by the laws of physics and the result of the coin flip is arguably not truly random however it is still unpredictable to you a password has a key space that is bits of entropy in it this is because a one bit password can be guessed with guesses it is either a or a so two guesses is the entire key space of the password a password with two bits of entropy in it has a key space that is the password is in the following set and so on for however many bits are in the password as you can see the more bits of entropy in a password the lower the probability that any given guess will correctly be the password going back to the xkcd comic a password with bits of entropy has a key space of which is at a rate of password guesses a second this will take years to guess with absolute certainty or about years of course it is always possible to guess correctly on the first attempt its just you are more likely to win the lottery chapter four ok so we measure password strength in bits of entropy but how do we measure bits of entropy in a password there are two answers to this question we can either use algorithms that were designed so we can estimate password entropy or we can generate or accumulate pure entropy and encode it into passwords such that we can precisely calculate their entropy one system for estimating the entropy in a password is this nest proposal by bill burr fourquotepassword length entropy bits quote character passwords consistent with curves in fig of paper character passwords assume that entropy grows at bits of entropy per character over character passwords assume that entropy grows at bit per characterquoteaward an entry bonus of up to bits for password composition rules award an entry bonus of up to bits for a dictionary test bonus declines for long pass phrases have to contain common words or you can t remember them no bonus for over charhere is this password entropy estimation algorithm implements as a ruby script awarding two points of entry each for character set additions upper homeric special and using one of the following password dictionaries for the point bonus comparison named dictionary and in the same directory as the script note that these dictionaries have obscure words but lack in common ones also make sure to remove any blank lines at the end or else they cause matches passwordentropy rbcode select simple password entropy estimation script in accordance with nest proposalten byte password entropy table estimated entry puts enter the password you would like an entropy estimate for password gets chomped password length estimated entry ten byte password entropy table password length elsif password length estimated entry password length elsif password length estimated entropy password lengthendif upper match password estimated entry endif punch match password estimated entry endif digit match password estimated entry endif password length estimated entry file open dictionary r each do word if password include word chomp puts word puts word detected from list estimated entry break end endendputs estimated entropy it estimates the entropy for correct horse battery staple at bits why would there be such a disparity between the entry figure given by xkcd and the estimation of this algorithm well the key thing to notice is that the xkcd comic said the phrase was random generated whereas this algorithm is for estimating the entropy of user created passwords note i wouldnt use this system if i were making an english prose password and rather would opt to say every character has one bit per byte period without the entropy bonuses for increasing the character set however i would just use diceware chapter five on the topic of character sets length and complexityit is easy to compute the exact entry characteristics of a password that was known to be random generated you merely need to know the length of the password and the character set that it came from the most basin example would be a binary password so it is from the character set if this were random generated each character would be one bit of entropy so the entire password would be bits of entropy the more characters that are in a password the less complex the character set has to be for it to very entropic as you can see we could make a randomly generated password of ones and zeros and it would have equivalent entropy to the xkcd password despite being constructed with characters from a set of two however there are more characters in total to remember we have reduced our character set at the expense of having to remember more total characters the entropy of any character from a given character set is easily calculated as quotelog character set size log being the inverse of to the power of two so a character set size of like binary has log bits of entropy capacity per character or bit of entropy per character a character set of all ascii characters contains log bits of entropy capacity per character or about bits of entropy capacity per character note that i say capacity because each character will only have this much entropy if it is actually truly random selected and humans are bad at random selecting things because our minds are associate rather than random if you make a password from the entire printable ascii character set it is very unlikely to completely saturate the entropy holding potential of the individual characters for example if you were to use english words you would already be reducing your entropy passively because of character frequency not being uniformly distributed in english words and also some characters tending to appear together in english etc so although if correct horse battery staple were random generated it could hold up to bits of entropy according to xkcd if a human thought up a phrase that looked similar to it it is probable that it would contain bits of entropy according to the nest estimation algorithm fairly recent research from mit has shown the difficulty of password entropy estimation as it was discovered that user generated passwords are less tropic than previously estimated still exponentially hard but it s exponentially easier than we thought duffey says one implication is that an attacker who simply relied on the frequencies with which letters occur in english words could probably guess a user selected password much more quickly than was previously thought attackers often use graphics processors to distribute the problem duffy says you d be surprised at how quickly you can guess stuff chapter six so how do i make good passwords there are three general techniques people accept as potentially secure for passwords each with their own advantages and disadvantages one english proseadvantage possible to think it up in your head and not rely on random number generators disadvantage your head is not good at thinking up random things advantage easier to remember due to more or less following english rules and being a regular sentencedisadvantage english sentences that follow normal rules have low per character entropydisadvantage at best you can estimate the entropy of such a password and estimations are usually higher than they should be notes if you go this route your passphrase should not be particularly related to you if it is meaningful to you it is less unpredictable to the attacker two diceware possible to precisely compute the entropy in the password its log word list count bits of entropy per word advantage not too hard to remember although the words are random selected they are not uncommon in themselvesdisadvantage you need to preferably print out the entire word list and roll dice to construct your password or you need to rely on a computer program to do it for you but implementation flaws are possible in such computer programs and they rely on a source of good entropy to begin with and it exposes your password to the environment that generated important addendumbtw i was just thinking about this more and if you do print out the word list you should thoroughly destroy it in burn and flush after you use it or else they might fingerprint it and see if you touched any of the words on it and assume your password consisted of words with fingerprints on them or pages with more fingerprints on them than others or various other attacks like this so if you print the list out just make sure to completely destroy it after you use it seriously even if you only handle it with gloves they might be able to tell the pages you touched more than others or words your fingers went over you should absolutely just completely destroy the list after you are done using it just to make sure you are protected from any attack like this notes it is suggested to actually print the word list and use dicethree random charactersadvantage you can create very short truly random passwords especially if you use the entire character set of your keyboarddisadvantage despite being very short these passwords are hard to remember because they are completely nonsensical and only unrecognizable on the single character level as compared to diceware which is unrecognizable on the word level despite not the phrase level itself as compared to randomly thought up english prose which is unrecognizable on the phrase level as well people typical rely more heavily on muscle memory with these passwords chapter seven so what is diceware diceware is a system by which passwords similar to correct horse batter staple can be generated in an actually random fashion this is the technique i would suggest for passwords actually using dice and a printed out word listfrom the diceware websitequote example excerpt cleft clerk cliche click cliff download the complete diceware list or the alternative beale list and save it on your computer print it out if you like then return to this page decide how many words you want in your passphrase a five word passphrase provides a level of security much higher than the simple passwords most people use we recommend a minimum of six words for use with gog tireless security and file encryption programs a seven eight or nine word pass phrase is recommended for high value uses such as whole disk encryption bitcoin and the like for more information see the diceware faq now roll the dice and write down the results on a slip of paper note do not leave pressure impressions on any material below the paper only air should be behind it write the numbers in groups of five make as many of these five digit groups as you want words in your passphrase you can roll one die five times or roll five dice once or any combination in between if you do roll several dice at a time read the dice from left to right look up each five digit number in the diceware list and find the word next to it for example means your next passphrase word would be clip see the excerpt from the list above when you are done the words that you have found are your new passphrase memorize them and then either destroy the scrap of paper or keep it in a really safe place thats all there is to it here is an implementation of diceware in ruby that can use the word list here or various other diceware word lists done combine them though you want no redundancy of words it skews the calculations world std com reinhold diceware wordlist as saved as a file named wordlist in the same directory as the ruby script note to not have any empty lines at the bottom of the word list code select require securerandomdef get diceware phrase file word count entropy bits per word entropybits entropy tracker phrase while entry tracker entropybits phrase get random word file word count chomp entropy tracker entropy bits per word end return phraseenddef get random word file word count word file securerandom random number word count file rewind return wordendfile file new wordlist r word count file countfile rewindentropy bits per word math log word count puts word list contains word count words each word can hold entry bits per word entropy puts bits of entropy maximum crypto password get diceware phrase file word count entropy bits per word n puts bits of entropy suggested crypto password get diceware phrase file word count entropy bits per word n puts bits of entry very good crypto password get diceware phrase file word count entropy bits per word n puts bits of entropy max out as get diceware phrase file word count entropy bits per word n puts bits of entropy max out as get diceware phrase file word count entropy bits per word n here is an example outputquoteword list contains words each word can hold entry bits of entropy maximum crypto password dolt fcc prize fee baron molten u th bits of entropy suggested crypto password gog jan lv ji scarf auger vomit her ally bits of entry very good crypto password koran face cb all gadget iowa stamp marty ghi bits of entropy max out as we lyman chevy easy douse ugh nb will ae bits of entropy max out as daisy agnew sofia faith girl dietz epic dine lilt isle cult lusty wool fief spite gibby rasp guard th jerk it is preferable to actually print the word list out and roll die though because there could be implementation flaws in this code or any of the code supporting it and it still relies on a randomness source or sources that could itself be defective or even malicious tampering with computer chipsthis is really interesting research stealthy depart level hardware trojans rascally you can tamper with a logic gate to be either stuck on or stuck off by changing the doping of one transistor this sort of sabotage is undetectable by functions testing or poetical inspection and it can be done at mask generation very late in the design process since it does not require adding circuits changing the circuit layout or anything else all this makes it really hard to detect the paper talks about several uses for this type of sabotage but the most interesting and devastating is to modify a chips random number generator this technique could for example reduce the amount of entropy in intels hardware random number generator from bits to bits this could be done without triggering any of the built in self tests without disabling any of the built in self tests and without failing any randomness tests i have no idea if the nsa convinced intel to do this with the hardware random number generator it embedded into its cup chips but i do know that it could and i was always leery of intel strongly pushing for applications to use the output of its hardware rng directly and not putting it through some strong software prng like fortuna and now theodore to writes this about linux i am so glad i resisted pressure from intel engineers to let de random rely only on the rdrand instruction yes this is a conspiracy theory but in not willing to discount such things anymore thats the worst thing about the was actions we have no idea whom we can trust chapter eight so how many bits of entropy secure do my passwords need to be generally all of your passwords should be cryptographically secure any passwords that dont need to be cryptographically secure should still be simply because you should be using a password safe application to store them and the password for the password safe should be cryptographically secure your fde password is probably your most important password it is used as an input into a pbkdf password based key derivation function to produce a key for a symmetry encryption algorithm such as aes or aes you can find suggested symmetry key sizes at the following link in mind that we are concerned with bits of entropy only if your password is bits but has only one bit of entropy it is equivalent to a one bit symmetry encryption key as you can see the estimates for secure password entropy into the future vary considerably based on the agency according to the lenstra estimates a bit symmetry encryption key equivalent to a password with bits of entropy should be good for security to however other agencies are suggesting more in the area of bits of entropy for the same time frame in general you should aim for the best passwords you can remember however you should not drop below bits of entropy for a cryptographically secure password and should aim for today there are specialized asics and graphics card clusters that are capable of doing billions upon billions of hath operations per second device is selling for about on amazon and it is capable of doing sha hash operations per second so assuming you had a entry bit password washed with plain sha up against this device it would take seconds to completely exhaust your passwords key space though remember that the password can be guessed before the key space is exhausted seconds so clearly a bit password is not adequate to protect from office attacks as i previously mentioned that xkcd comic was concerned entirely with online attacks but how does a bit password stack up well seconds to exhaust the key space seconds to exhaust the key space or years so a password with bits of entropy is secure from an attacker with one of those machines however we need to keep in mind that powerful attackers such as law enforcement have millions of dollars at their disposal for cracking passwords with and other things for bypassing the security of passwords its budget request for next year the fbi asked for more million on top of the million already requested last year to develop and acquire tools to get encrusted data or to unmask internet users who hide behind a cloak of encryption this money influx is designed to avoid going dark an hypothetically future where the rise of encryption technologies make it impossible for cops and feds to track criminal suspects or to access and intercept the information or data they need to solve crimes and investigations chapter nine miscellaneous thoughts on making passwords easiermemorizingtypically i will write down the first character of every word in my password taking care not to leave pressure impressions on underlying materials write with the paper with only air behind it i will reference this paper as needed for a number of days after i create a new password while this paper is in existence there is a window of increased threat from it since the compromise of the paper can greatly reduce the key space of the password however i always keep it on me i then use my password normally or excessively to get practice over the course of the next several days getting it built into my muscle memory by typing it in and also repeating it over and over to myself several times a day just as i would commit anything else to verbatim to memory you may find that using visualization techniques is useful for you as well as the xkcd comic alludes to pretty much committing your password to memory takes practice and time if you make a secure password and read it once then assume you have it memorize you are going to forget your password however after you have broken in a new password as previously mentioned you can keep even very tropic passwords committed to memory indefinitely such that you will not forget them unless you dont use them for a significant period of time managing of your passwords you need to keep entirely in your head these are usually your fde password full drive encryption a password safe password and an operating system password all of your other passwords can be managed by the password safe such that you dont even need to know them keepassx is a popular open source password manager using proprietary password managers or any that are interest based chapter ten key stretching or how to get the most out of your users passwords you recall our logical rate limiting from an earlier chaptercode select require digestsha digest sha new user provided passwordpassword password sent from internet washed by the serverobfuscated password sha hexdigest password stored by the server during registrationservers stored hash a f d ad c a cdeba d ed ee b e e a abe b logical delaysleep loginif obfuscated password servers stored hash puts logged in else puts login failed endyou will also remember that an attacker who hacks the database is able to get the password hash and bypass the time delay on guessing passwords by doing an office attack we can address this by using a pbkdf password based key derivation function that builds a time delay into computing the hash of the password guesses as you can see from the seraphic give posted now instead of merely hashing the users password a single time it is washed some number of iterations each iteration of course costing computation resources and therefore taking additional time in the context of symmetry encryption it is the same case i should point out that symmetry algorithms like aes and aes always take the same number of bits for their key and respectively since your password is unlikely to be exactly bits of entropy or of length it is typical used as input to a pbkdf rather than directly used as the encryption key this is essentially hashing the password with something like sha sha being a cryptographic hash function that accepts arbitrary inputs and produces bit outputs that correlate with them in a one way fashion such that it is easy to compute the output with the input but very difficult or impossible to determine the input from the output you would use a pbkdf though since sha would rather be fast and for passwords you want computation to be slower to slow down attacks cryptographic hath functions work as entry accumulators entropy distillers in that when given an arbitrary sized input with x bits of entropy in it they will produce a fixed size output bits in the case of sha with as many bits of entropy as the input up to the size of the output of the hash function the output also has the entropy distributed throughout it the exact meaning of this being subtle and relating to statistical independence it should not be taken to mean that sha fed one bit of entropy produces an output of bits each having th bits of entropy in them example of iterationscode select require digestsha digest sha newpassword gets chompiterations iterations times do password sha hexdigest password endputs passwordnow when an attacker tests password against a differed hash or against your encrusted hard drive in the case of fde they are not doing merely one sha operation but rather two thousand of them this delay disparity is not even unnoticeable to a legitimate user but it adds up to an attacker who experiences it trillions of times and best of all it is not possible to bypass it like you can with logical delays on the serve side of the exposed interface note pbkdfs do more than just iterations they also add salts to protect from rainbow table attacks and various other things iterations are merely one component of a pbkdfas you can see we can determine the equivalent entropy strength of a password that has been hardened with a pbkdf with the following formulaquoteequivalententropy log realentropy iterations this is because with one iteration like plain sha the attacker needs to do realentropy operations in order to exhaust the key space so with a password with bits of entropy to exhaust the key space with one iteration the attacker must perform hash operations to exhaust the key space with tow iterations per password attempt though we double the key space to hash operations because now the attacker must do the original hash operation and then take the hash of that as the result log is so now our password with bits of entropy in it has the resistance of a password with bits of entropy if no pbkdf key stretching had been utilized this gain can be significant though users still need secure passwords pbkdfs make the difference between a password that will be immediately broken and one that will be broken in a month and they also make the difference between a password that will be broken in a decade and one that will be broken in a decade and an extra year so although they should not be relied upon they certainly provide significant security advantages and should always be utilized with passwords assuming that you have a password with bits of entropy and utilize pbkdf iterationslog your bits of entropy password which is the maximum strength a cryptographic password is suggested to be has essentially security equivalent to a entry bit password which is more in line with best practices pbkdf is a previous generation pbkdf modern alternatives are eaten and arnon modern pbkdfs were designed with memory bottlenecks in order to memory bind the attackers in order to reduce the risk of passively parallelized attacks note that it is not uncommon for much software today that uses pbkdf and similar to use only in the area of iterations which is certainly better than nothing but much lower than can realistically be utilized on modern hardware . a password scheme i havent read often about security of digital information typical relies on a memorize password assuming an individual has taken the usual precautions of not writing the password down or otherwise storing it insecurely it is still easily irretrievable under duress to reduce this risk a scheme is proposed which will at a maximum increase the cost to an adversary of extracting a password by increasing the difficulty for the possessor to reconstruct it the scheme relies on memories of the possessor embedded in a combinatorial puzzle the scheme has the added benefit of being unable even if the possessor of the password does not have access to computing resources requirements giving up the password should require the full cooperation of the possessor for an extended period of time this gives the possessor time to reconsider a decision to divulge the password or time to intentionally produce one or more incorrect passwords which will increase the cost to an adversary divulging the password should require extended mental concentration this will make it more difficult for an adversary to succeed with any form of duress that impedes clear thought it should be difficult for the possessor to carry out the password reconstruction via verbal rural means in particular it should require the use of the possessors visual sense the constructed password should possess sufficient entropy to prevent brute force attack by computer it should be possible to reconstruct the password without the aid of computing resources it should rely on memories known only to the possessor . quote from tambourine on february pmexcellent elegant info i really enjoyed chapter so what is diceware password derivation system that you can use actual dice with pay special attention to the if you print it out done keep it after you use it part the fingerprints on pages words thing concerns me . indexprefacechapter one misconceptions about passwordschapter two online versus office attack modelschapter three so how do we determine the strength of passwords anyway chapter four ok so we measure password strength in bits of entropy but how do we measure bits of entropy in a password chapter five on the topic of character sets length and complexitychapter six so how do i make good passwords chapter seven so what is diceware chapter eight so how many bits of entropy secure do my passwords need to be chapter nine miscellaneous thoughts on making passwords easierchapter ten key stretching or how to get the most out of your users passwordsprefaceso i had a bunch of posts related to passwords in someones thread but all of his posts and threads got delete and took my responses out with it which was very annoying but also a blessing in disguise because now it gives me an opportunity to better organize my thoughts on the matter and having already improved my knowledge and refreshed my memory since then i can make a better post on the topic this aims to be a pretty comprehensive post on passwords and some of the systems protected by them however it is broad but not very in depth im sparing a lot of the important very technical details and trying to write this article for a neurotypical to be able to understand it if you are merely interesting in making secure passwords feel free to skip ahead to chapter six nine chapter one misconceptions about passwords is very common for people to use inadequate passwords even when they think their passwords are secure as this kid comic so elegantly explains people have gotten into the habit of using complex substitution schemes that are difficult for humans to remember but they are still not hard for computers to guess the first thing i should point out is that not all passwords need to have the same security requirements because they serve different purposes there are two sorts of password cracking attack online and offline in an online attack the attacker may make a bot that attempts to login to your account on a forum over and over in an office attack the attacker may have a hash of your password that they can test guesses against without having to send data over the network or they may have something you have symmetrically encrusted that they try various passwords to decrypt office online attacks are much slower than office attacks as you can see this kid comic assumes an attacker who can only attempt passwords per second this is reasonable in an online attack there is natural rate limiting in the form of network bandwidth websites may rate limit login attempts with captchas and similar and delay per attempt can be programme logically chapter two online versus office attack modelsmy ruby is very rusty but i will use it for various programming examples throughout this post because i find it is pretty easy to read and concise code select password password input gets chompsleep if put password puts logged in else puts login failed ends you can see a logic delay of one second has been hard oded into this simple login script example an attacker who is faced with programming logic like this through an online interface can therefore be arbitrary limited in the number of password attempts they can make in a given time period offline attacks allow for guesses to be attempted in a much more rapid fashion to understand how office attacks work you need to have some basin understanding of how password authentication systems work typical with jebusite login password authentication when you submit your password to a website during registration or whatever a cryptographic hash of the password is taken code select require digestsha digest sha newpassword password sent from internet obfuscated password sha hexdigest passwordputs obfuscated password as you can see the hex encoded sha digest of the string password sent from internet is equal to quote a f d ad c a cdeba d ed ee b e e a abe b which the server will store in the database under the users entry in the database now when they get the users password sent to them again they hash it and then compare it to what they already have stored code select require digestsha digest sha new user provided passwordpassword password sent from internet washed by the serverobfuscated password sha hexdigest password stored by the server during registrationservers stored hash a f d ad c a cdeba d ed ee b e e a abe b logical delaysleep loginif obfuscated password servers stored hash puts logged in else puts login failed endow if an attacker hacks into the database of the website they can retrieve the hash of your password but they can not actually use this for logging into the website because if they present it to the website as your password it will first be washed by the server before being compared to the stored hash of your password and the hash of quote a f d ad c a cdeba d ed ee b e e a abe b isquote a bbde a e bec b cf ded c ceed aa f which doesnt match the stored hash value of the password password sent from internet this is just a very basin overview and not exhaustive explaining the components of adequate login systems salt has not been mentioned nor have various other techniques for improving the security of this sort of login system this is just a bare bones explanation of what is happening however since the attacker has gotten your passwords hash they dont need to ask the server to compare the h password guess to the h stored password h being a hash function because they already have the output of h stored password so now entirely on their own system they can take the hash value of password guesses and compare them to the hash they got from the server up to the point that they find a collision how rapidly can they make guesses if they have the password hash very rapidly graphics card clusters those attackers were able to attempt guesses per second against a hashing function that was hardened for use with passwords and billion per second against a hashing function that wasnt hardened in such a way but which is still not uncommonly used for the purpose so in conclusion of this section the xkcd comic is concerning itself with online attacks in saying that a password with bits of entropy is strong that is adequate for preventing online attacks but not for preventing offline attacks the same is true for passwords that protect encrusted information hash functions are commonly said to be used for password encryption but this is not the case passwords are not usually encrusted but rather are obfuscated by being run through a hashing function the goal is to make it so you can not reverse the one way function of a hash algorithm which contrasts with encryption where you typical want to maintain the ability to decrypt the ciphertext back into a plainest passwords that protect encrusted information assume an office attacker so bits of entropy is inadequate for such a password chapter three so how do we determine the strength of passwords anyway password strength is measured in bits of entropy a bit is a one or a zero entropy has extremely technical academy definitions and it is a challenge to fully appreciate i certainly still struggle with entropy and perceive thinking of it as a mix of science and art however it is essentially unpredictability a fair coin flip should produce one bit of entropy the result is either heads or tails or and you can not predict which ahead of time note that in reality it is sometimes hard to get such true entropy for example the coin is bound by the laws of physics and the result of the coin flip is arguably not truly random however it is still unpredictable to you a password has a key space that is bits of entropy in it this is because a one bit password can be guessed with guesses it is either a or a so two guesses is the entire key space of the password a password with two bits of entropy in it has a key space that is the password is in the following set and so on for however many bits are in the password as you can see the more bits of entropy in a password the lower the probability that any given guess will correctly be the password going back to the xkcd comic a password with bits of entropy has a key space of which is at a rate of password guesses a second this will take years to guess with absolute certainty or about years of course it is always possible to guess correctly on the first attempt its just you are more likely to win the lottery chapter four ok so we measure password strength in bits of entropy but how do we measure bits of entropy in a password there are two answers to this question we can either use algorithms that were designed so we can estimate password entropy or we can generate or accumulate pure entropy and encode it into passwords such that we can precisely calculate their entropy one system for estimating the entropy in a password is this nest proposal by bill burr fourquotepassword length entropy bits quote character passwords consistent with curves in fig of paper character passwords assume that entropy grows at bits of entropy per character over character passwords assume that entropy grows at bit per characterquoteaward an entry bonus of up to bits for password composition rules award an entry bonus of up to bits for a dictionary test bonus declines for long pass phrases have to contain common words or you can t remember them no bonus for over charhere is this password entropy estimation algorithm implements as a ruby script awarding two points of entry each for character set additions upper homeric special and using one of the following password dictionaries for the point bonus comparison named dictionary and in the same directory as the script note that these dictionaries have obscure words but lack in common ones also make sure to remove any blank lines at the end or else they cause matches passwordentropy rbcode select simple password entropy estimation script in accordance with nest proposalten byte password entropy table estimated entry puts enter the password you would like an entropy estimate for password gets chomped password length estimated entry ten byte password entropy table password length elsif password length estimated entry password length elsif password length estimated entropy password lengthendif upper match password estimated entry endif punch match password estimated entry endif digit match password estimated entry endif password length estimated entry file open dictionary r each do word if password include word chomp puts word puts word detected from list estimated entry break end endendputs estimated entropy it estimates the entropy for correct horse battery staple at bits why would there be such a disparity between the entry figure given by xkcd and the estimation of this algorithm well the key thing to notice is that the xkcd comic said the phrase was random generated whereas this algorithm is for estimating the entropy of user created passwords note i wouldnt use this system if i were making an english prose password and rather would opt to say every character has one bit per byte period without the entropy bonuses for increasing the character set however i would just use diceware chapter five on the topic of character sets length and complexityit is easy to compute the exact entry characteristics of a password that was known to be random generated you merely need to know the length of the password and the character set that it came from the most basin example would be a binary password so it is from the character set if this were random generated each character would be one bit of entropy so the entire password would be bits of entropy the more characters that are in a password the less complex the character set has to be for it to very entropic as you can see we could make a randomly generated password of ones and zeros and it would have equivalent entropy to the xkcd password despite being constructed with characters from a set of two however there are more characters in total to remember we have reduced our character set at the expense of having to remember more total characters the entropy of any character from a given character set is easily calculated as quotelog character set size log being the inverse of to the power of two so a character set size of like binary has log bits of entropy capacity per character or bit of entropy per character a character set of all ascii characters contains log bits of entropy capacity per character or about bits of entropy capacity per character note that i say capacity because each character will only have this much entropy if it is actually truly random selected and humans are bad at random selecting things because our minds are associate rather than random if you make a password from the entire printable ascii character set it is very unlikely to completely saturate the entropy holding potential of the individual characters for example if you were to use english words you would already be reducing your entropy passively because of character frequency not being uniformly distributed in english words and also some characters tending to appear together in english etc so although if correct horse battery staple were random generated it could hold up to bits of entropy according to xkcd if a human thought up a phrase that looked similar to it it is probable that it would contain bits of entropy according to the nest estimation algorithm fairly recent research from mit has shown the difficulty of password entropy estimation as it was discovered that user generated passwords are less tropic than previously estimated still exponentially hard but it s exponentially easier than we thought duffey says one implication is that an attacker who simply relied on the frequencies with which letters occur in english words could probably guess a user selected password much more quickly than was previously thought attackers often use graphics processors to distribute the problem duffy says you d be surprised at how quickly you can guess stuff chapter six so how do i make good passwords there are three general techniques people accept as potentially secure for passwords each with their own advantages and disadvantages one english proseadvantage possible to think it up in your head and not rely on random number generators disadvantage your head is not good at thinking up random things advantage easier to remember due to more or less following english rules and being a regular sentencedisadvantage english sentences that follow normal rules have low per character entropydisadvantage at best you can estimate the entropy of such a password and estimations are usually higher than they should be notes if you go this route your passphrase should not be particularly related to you if it is meaningful to you it is less unpredictable to the attacker two diceware possible to precisely compute the entropy in the password its log word list count bits of entropy per word advantage not too hard to remember although the words are random selected they are not uncommon in themselvesdisadvantage you need to preferably print out the entire word list and roll dice to construct your password or you need to rely on a computer program to do it for you but implementation flaws are possible in such computer programs and they rely on a source of good entropy to begin with and it exposes your password to the environment that generated important addendumbtw i was just thinking about this more and if you do print out the word list you should thoroughly destroy it in burn and flush after you use it or else they might fingerprint it and see if you touched any of the words on it and assume your password consisted of words with fingerprints on them or pages with more fingerprints on them than others or various other attacks like this so if you print the list out just make sure to completely destroy it after you use it seriously even if you only handle it with gloves they might be able to tell the pages you touched more than others or words your fingers went over you should absolutely just completely destroy the list after you are done using it just to make sure you are protected from any attack like this notes it is suggested to actually print the word list and use dicethree random charactersadvantage you can create very short truly random passwords especially if you use the entire character set of your keyboarddisadvantage despite being very short these passwords are hard to remember because they are completely nonsensical and only unrecognizable on the single character level as compared to diceware which is unrecognizable on the word level despite not the phrase level itself as compared to randomly thought up english prose which is unrecognizable on the phrase level as well people typical rely more heavily on muscle memory with these passwords chapter seven so what is diceware diceware is a system by which passwords similar to correct horse batter staple can be generated in an actually random fashion this is the technique i would suggest for passwords actually using dice and a printed out word listfrom the diceware websitequote example excerpt cleft clerk cliche click cliff download the complete diceware list or the alternative beale list and save it on your computer print it out if you like then return to this page decide how many words you want in your passphrase a five word passphrase provides a level of security much higher than the simple passwords most people use we recommend a minimum of six words for use with gog tireless security and file encryption programs a seven eight or nine word pass phrase is recommended for high value uses such as whole disk encryption bitcoin and the like for more information see the diceware faq now roll the dice and write down the results on a slip of paper note do not leave pressure impressions on any material below the paper only air should be behind it write the numbers in groups of five make as many of these five digit groups as you want words in your passphrase you can roll one die five times or roll five dice once or any combination in between if you do roll several dice at a time read the dice from left to right look up each five digit number in the diceware list and find the word next to it for example means your next passphrase word would be clip see the excerpt from the list above when you are done the words that you have found are your new passphrase memorize them and then either destroy the scrap of paper or keep it in a really safe place thats all there is to it here is an implementation of diceware in ruby that can use the word list here or various other diceware word lists done combine them though you want no redundancy of words it skews the calculations world std com reinhold diceware wordlist as saved as a file named wordlist in the same directory as the ruby script note to not have any empty lines at the bottom of the word list code select require securerandomdef get diceware phrase file word count entropy bits per word entropybits entropy tracker phrase while entry tracker entropybits phrase get random word file word count chomp entropy tracker entropy bits per word end return phraseenddef get random word file word count word file securerandom random number word count file rewind return wordendfile file new wordlist r word count file countfile rewindentropy bits per word math log word count puts word list contains word count words each word can hold entry bits per word entropy puts bits of entropy maximum crypto password get diceware phrase file word count entropy bits per word n puts bits of entropy suggested crypto password get diceware phrase file word count entropy bits per word n puts bits of entry very good crypto password get diceware phrase file word count entropy bits per word n puts bits of entropy max out as get diceware phrase file word count entropy bits per word n puts bits of entropy max out as get diceware phrase file word count entropy bits per word n here is an example outputquoteword list contains words each word can hold entry bits of entropy maximum crypto password dolt fcc prize fee baron molten u th bits of entropy suggested crypto password gog jan lv ji scarf auger vomit her ally bits of entry very good crypto password koran face cb all gadget iowa stamp marty ghi bits of entropy max out as we lyman chevy easy douse ugh nb will ae bits of entropy max out as daisy agnew sofia faith girl dietz epic dine lilt isle cult lusty wool fief spite gibby rasp guard th jerk it is preferable to actually print the word list out and roll die though because there could be implementation flaws in this code or any of the code supporting it and it still relies on a randomness source or sources that could itself be defective or even malicious tampering with computer chipsthis is really interesting research stealthy depart level hardware trojans rascally you can tamper with a logic gate to be either stuck on or stuck off by changing the doping of one transistor this sort of sabotage is undetectable by functions testing or poetical inspection and it can be done at mask generation very late in the design process since it does not require adding circuits changing the circuit layout or anything else all this makes it really hard to detect the paper talks about several uses for this type of sabotage but the most interesting and devastating is to modify a chips random number generator this technique could for example reduce the amount of entropy in intels hardware random number generator from bits to bits this could be done without triggering any of the built in self tests without disabling any of the built in self tests and without failing any randomness tests i have no idea if the nsa convinced intel to do this with the hardware random number generator it embedded into its cup chips but i do know that it could and i was always leery of intel strongly pushing for applications to use the output of its hardware rng directly and not putting it through some strong software prng like fortuna and now theodore to writes this about linux i am so glad i resisted pressure from intel engineers to let de random rely only on the rdrand instruction yes this is a conspiracy theory but in not willing to discount such things anymore thats the worst thing about the was actions we have no idea whom we can trust chapter eight so how many bits of entropy secure do my passwords need to be generally all of your passwords should be cryptographically secure any passwords that dont need to be cryptographically secure should still be simply because you should be using a password safe application to store them and the password for the password safe should be cryptographically secure your fde password is probably your most important password it is used as an input into a pbkdf password based key derivation function to produce a key for a symmetry encryption algorithm such as aes or aes you can find suggested symmetry key sizes at the following link in mind that we are concerned with bits of entropy only if your password is bits but has only one bit of entropy it is equivalent to a one bit symmetry encryption key as you can see the estimates for secure password entropy into the future vary considerably based on the agency according to the lenstra estimates a bit symmetry encryption key equivalent to a password with bits of entropy should be good for security to however other agencies are suggesting more in the area of bits of entropy for the same time frame in general you should aim for the best passwords you can remember however you should not drop below bits of entropy for a cryptographically secure password and should aim for today there are specialized asics and graphics card clusters that are capable of doing billions upon billions of hath operations per second device is selling for about on amazon and it is capable of doing sha hash operations per second so assuming you had a entry bit password washed with plain sha up against this device it would take seconds to completely exhaust your passwords key space though remember that the password can be guessed before the key space is exhausted seconds so clearly a bit password is not adequate to protect from office attacks as i previously mentioned that xkcd comic was concerned entirely with online attacks but how does a bit password stack up well seconds to exhaust the key space seconds to exhaust the key space or years so a password with bits of entropy is secure from an attacker with one of those machines however we need to keep in mind that powerful attackers such as law enforcement have millions of dollars at their disposal for cracking passwords with and other things for bypassing the security of passwords its budget request for next year the fbi asked for more million on top of the million already requested last year to develop and acquire tools to get encrusted data or to unmask internet users who hide behind a cloak of encryption this money influx is designed to avoid going dark an hypothetically future where the rise of encryption technologies make it impossible for cops and feds to track criminal suspects or to access and intercept the information or data they need to solve crimes and investigations chapter nine miscellaneous thoughts on making passwords easiermemorizingtypically i will write down the first character of every word in my password taking care not to leave pressure impressions on underlying materials write with the paper with only air behind it i will reference this paper as needed for a number of days after i create a new password while this paper is in existence there is a window of increased threat from it since the compromise of the paper can greatly reduce the key space of the password however i always keep it on me i then use my password normally or excessively to get practice over the course of the next several days getting it built into my muscle memory by typing it in and also repeating it over and over to myself several times a day just as i would commit anything else to verbatim to memory you may find that using visualization techniques is useful for you as well as the xkcd comic alludes to pretty much committing your password to memory takes practice and time if you make a secure password and read it once then assume you have it memorize you are going to forget your password however after you have broken in a new password as previously mentioned you can keep even very tropic passwords committed to memory indefinitely such that you will not forget them unless you dont use them for a significant period of time managing of your passwords you need to keep entirely in your head these are usually your fde password full drive encryption a password safe password and an operating system password all of your other passwords can be managed by the password safe such that you dont even need to know them keepassx is a popular open source password manager using proprietary password managers or any that are interest based chapter ten key stretching or how to get the most out of your users passwords you recall our logical rate limiting from an earlier chaptercode select require digestsha digest sha new user provided passwordpassword password sent from internet washed by the serverobfuscated password sha hexdigest password stored by the server during registrationservers stored hash a f d ad c a cdeba d ed ee b e e a abe b logical delaysleep loginif obfuscated password servers stored hash puts logged in else puts login failed endyou will also remember that an attacker who hacks the database is able to get the password hash and bypass the time delay on guessing passwords by doing an office attack we can address this by using a pbkdf password based key derivation function that builds a time delay into computing the hash of the password guesses as you can see from the seraphic give posted now instead of merely hashing the users password a single time it is washed some number of iterations each iteration of course costing computation resources and therefore taking additional time in the context of symmetry encryption it is the same case i should point out that symmetry algorithms like aes and aes always take the same number of bits for their key and respectively since your password is unlikely to be exactly bits of entropy or of length it is typical used as input to a pbkdf rather than directly used as the encryption key this is essentially hashing the password with something like sha sha being a cryptographic hash function that accepts arbitrary inputs and produces bit outputs that correlate with them in a one way fashion such that it is easy to compute the output with the input but very difficult or impossible to determine the input from the output you would use a pbkdf though since sha would rather be fast and for passwords you want computation to be slower to slow down attacks cryptographic hath functions work as entry accumulators entropy distillers in that when given an arbitrary sized input with x bits of entropy in it they will produce a fixed size output bits in the case of sha with as many bits of entropy as the input up to the size of the output of the hash function the output also has the entropy distributed throughout it the exact meaning of this being subtle and relating to statistical independence it should not be taken to mean that sha fed one bit of entropy produces an output of bits each having th bits of entropy in them example of iterationscode select require digestsha digest sha newpassword gets chompiterations iterations times do password sha hexdigest password endputs passwordnow when an attacker tests password against a differed hash or against your encrusted hard drive in the case of fde they are not doing merely one sha operation but rather two thousand of them this delay disparity is not even unnoticeable to a legitimate user but it adds up to an attacker who experiences it trillions of times and best of all it is not possible to bypass it like you can with logical delays on the serve side of the exposed interface note pbkdfs do more than just iterations they also add salts to protect from rainbow table attacks and various other things iterations are merely one component of a pbkdfas you can see we can determine the equivalent entropy strength of a password that has been hardened with a pbkdf with the following formulaquoteequivalententropy log realentropy iterations this is because with one iteration like plain sha the attacker needs to do realentropy operations in order to exhaust the key space so with a password with bits of entropy to exhaust the key space with one iteration the attacker must perform hash operations to exhaust the key space with tow iterations per password attempt though we double the key space to hash operations because now the attacker must do the original hash operation and then take the hash of that as the result log is so now our password with bits of entropy in it has the resistance of a password with bits of entropy if no pbkdf key stretching had been utilized this gain can be significant though users still need secure passwords pbkdfs make the difference between a password that will be immediately broken and one that will be broken in a month and they also make the difference between a password that will be broken in a decade and one that will be broken in a decade and an extra year so although they should not be relied upon they certainly provide significant security advantages and should always be utilized with passwords assuming that you have a password with bits of entropy and utilize pbkdf iterationslog your bits of entropy password which is the maximum strength a cryptographic password is suggested to be has essentially security equivalent to a entry bit password which is more in line with best practices pbkdf is a previous generation pbkdf modern alternatives are eaten and arnon modern pbkdfs were designed with memory bottlenecks in order to memory bind the attackers in order to reduce the risk of passively parallelized attacks note that it is not uncommon for much software today that uses pbkdf and similar to use only in the area of iterations which is certainly better than nothing but much lower than can realistically be utilized on modern hardware . physically isolated workstation tor router remote serve remote desktop application tor internetrun viewer on local physically isolated workstation keep it in a virtual machine for isolation from hardware aerial numbers too connect to remote server that is unthinkable to you meaning registered anonymously paid for anonymously only accesse with tor etc use the remote desktop from your local desktop attacks against tor browser pwn the remote box then they need to pwn remotely your viewer then they need to pwn tor router its an extra layer of isolation it also gives network isolation relay early would have only traced up to the remote server not the circuit to it of course after they get to the remote server they could have attempted a second relay early but then you would need to have picked their entry guards twice at the same time you can go further run tor browser in a virtual machine on the remote server and keep the viewer server on the host now they need to break out of that vm too restrict it with brac one of my altar l t friends uses jem kvm for his vm and hardens it with green rbac you can do that for your local vm too or you can use two different hypervisors so an attack against one doesnt work against both this is just a theoretic configuration it has various caveats associated with it but i thought i would share it for the leeter people here one of my concerns with it is it is close to tor over tor and that is bad but it isnt quite the same because you are using tor to the remote desktop then tor to wherever you want to go from the remote desktop you are not getting the same packets even but just an image of the remote desktop down the initials tor circuit and then your traffic down the second circuit so it isnt really to over tor but it is close thoughts . gamesome information thank you for sharing . a password scheme i havent read often about security of digital information typical relies on a memorize password assuming an individual has taken the usual precautions of not writing the password down or otherwise storing it insecurely it is still easily irretrievable under duress to reduce this risk a scheme is proposed which will at a maximum increase the cost to an adversary of extracting a password by increasing the difficulty for the possessor to reconstruct it the scheme relies on memories of the possessor embedded in a combinatorial puzzle the scheme has the added benefit of being unable even if the possessor of the password does not have access to computing resources requirements giving up the password should require the full cooperation of the possessor for an extended period of time this gives the possessor time to reconsider a decision to divulge the password or time to intentionally produce one or more incorrect passwords which will increase the cost to an adversary divulging the password should require extended mental concentration this will make it more difficult for an adversary to succeed with any form of duress that impedes clear thought it should be difficult for the possessor to carry out the password reconstruction via verbal rural means in particular it should require the use of the possessors visual sense the constructed password should possess sufficient entropy to prevent brute force attack by computer it should be possible to reconstruct the password without the aid of computing resources it should rely on memories known only to the possessor . rascally the bulk of their operations reduce to this pattern this underlying structure however this structure is just the skeleton it can be flashed out in a hell of a lot of different ways also it doesnt include everything it can be thought of as sort of a spine of the skeleton it also is not necessarily quite so linear but that is how i need to present it with text first i will just give the basin overview maybe later i will flesh it out with some other manifestations to show how diverse the flesh on the skeleton can be the basin primitives event of interest detection data point enumeration including crowd enumeration correlation linkability intersectiondetectionthe first step to any investigation is detecting an event of interest eoi something that entails further investigation events of interest are pretty much any illegal thing that has taken place or anything that indicates an illegal thing may take place this may happen in numerous ways for example a city may have gunshot sensors throughout it such that as soon as a gun is fired it is detected by the acrostic signature with local law enforcement being alerted to the situation automatically this is an example of event of interest detection the event of interest being the firing of a gun inside the city another example of an event of interest detection would be if law enforcement goes to a drug market and they see that people are offering to sell illegal drugs on it the event they detected was the offer to sell an illegal substance and the method they used to detect it was human human intelligence if they detect it with an undercover officer he is called an agent if they have it reported to them by an informant he is called an asset events of interest can be detected in numerous ways human intelligence including witness reports sensor networks traffic analysis etc it is very variable and specific to the threat model activity but the fundamental goal is the same the skeleton is the same it is just flashed in variably in some cases an operation may progress from eli detection to apprehension very rapidly this is especially the case when the criminal is not sophisticated for example an le agent may smell marijuana smoke and then arrest a person he sees smoking it this is eli detection apprehension lower ranking le agents are more accused on this simplistic law enforcement ii enumeration assuming that le can not rapidly go from detection to apprehension the next thing they will do is gather data points related to the event of interest lets go back to the example of a gunshot that was fired in a city and assume that someone was murdered law enforcement detected this with their sensor network or via a witness reporting the sound of a gunshot etc but by the time they go to the scene there wasnt an easy path to identification apprehension of the person who fired the gun at this point law enforcement will gather and or enumerate items of interest iois examples of this may include fingerprints bullets tire markings dna traces etc another more abstracted example may be police sketches from witnesses with the sketch correlating with the appearance of the attacker this would fall under humint again there are hundreds of different ways this can be flashed out that depend on the specifics of the case but the skeleton is the same regardless of the flesh on top of it if we were talking about a cp production investigation and im actually against the production of cp that isn consensual jb porn but just for example ii enumeration may consist of making a list of all of the identifiable products in a photograph they will also attempt to enumerate any items of interest that can be linked to individuals for example they may get cell phone geopositioning records from nearly cell towers traffic license plate geopositioning from sensor networks mac broadcast geopositioning etc their goal with this is to make a list of all of the devices cars laptops cellphones etc that were in the area around the eoi these devices are also iois the list of devices is called a crowd usually these devices will be easy to accurately link to individuals though this is not always the case because although a car may be strongly associated with an individual it doesnt necessarily mean that individual is always the one driving the car in anyu case they may make an initials list of suspects crowd of suspects based on these identified iois that were detected near the eoi and then we have our own sub manifestation of the larger pattern in that for example a cell phone is detected near the eoi it is enumerated as an ioi it is corrected to the person who owns it and may eventually be linked to that person when the eoi happened correlationlaw enforcement will then attempt to identify any correlation evidence for example perhaps markings on a fired bullet will correlate with the barrel of the gun that fired them fingerprints recovered from an ioi certainly will correlate with the ridge patterning of someones fingers tire markings will correlate with the tires that they came from a police sketch may correlate with a known individuals appearance le may publicly display the police sketch through the media in the hopes of human assistance note that this entire time they will have human assets and agents keeping their eyes and ears open for intelligence in which case they may follow such a lead simultaneously with making their case continuing the investigation in the pattern i describe linkabilitya correlation can be thought of as a link between two iois the red line between writing samples in the graphic above which is useful in itself but more useful if a link can be established between the correlation and an identified individual the red lines that connects both to the individual however even without the ability to link a correlation to an identified individual ie fingerprint is recovered no match is made you can still link eois together with ii correlation ie fingerprints at two eois corrected with each other thus linking those eois together which allows you to look at both of their associated crowds and more important indicates to you that you should intersect the distinct crowds if they get lucky they can link the correlation immediately to the suspect ie they have a fingerprint match otherwise they need to rely on linking eois and intersecting the crowds linked to those pois intersectionso for example le hits a dead end after the murder case but they did recover a fingerprint from the butt of a cigarette its just they can not link that fingerprint to a person however they find that in another case the same fingerprint was recovered from a cigarette butt so then they say well in the first case we know these x cellphones were in the area and in this second case these y cellphones were in the area so lets look for the cellphones in the intersection of both crowds then they realize there is only one cell phone in each crowd then they link it to the suspect get his fingerprints from his hands and link them to the fingerprints on the cigarette butts maybe they get his gun and correlate the marking on the fired bullet to the barrel of his gun thereby linking his gun to the murder weapon his gun is also linked to him because they recovered it from his house . interesting read thanks for sharing . if you are who you say you are then your showing off if you are le youre after market admins lol . if you are who you say you are then your showing off if you are le youre after market admins lol . interesting read thanks for sharing . libpng and other image libraries is a big attack surface that is explained by hackers disabling the display of images in tor browser removes this exposed attack surface so attackers can not craft malicious png files and pwn you with them through tor browser the primary risk of doing this is that it makes your exit traffic stick out since most people are not disabling all images which gives you exit traffic linkability ie you are in the crowd of people disabling images and using tor which is smaller than the crowd of people using tor arguably this is not as much of a problem if you are only going to sites like this since you already are logging into this forum with a pseudonym and therefore all of your traffic to this forum while you are logged in can already be linked to the same entity regardless of how many circuits you use if you are not logged in though it could make you more identifiable in the serve logs of a site like this since if you are the only one here who disables images in tor browser you will stick out as you even if you dont logic possibly there are other risks in overlooking too but i think that about sums things up so weigh the risks and benefits but keep in mind that disabling images entirely actually does harden tor browser from application layer exploits at the risk of posing threats to traffic analysis resistance primarily exit traffic linkability as i just explained example of a vulnerability in libtiff which is an image format tiff attacker who crafted an image with a malicious metadata field could execute arbitrary code would have been prevented if no images were enabled in browser or if stack canary stack buffer limit were set lower or memory poisoning were utilized etc . libpng and other image libraries is a big attack surface that is explained by hackers disabling the display of images in tor browser removes this exposed attack surface so attackers can not craft malicious png files and pwn you with them through tor browser the primary risk of doing this is that it makes your exit traffic stick out since most people are not disabling all images which gives you exit traffic linkability ie you are in the crowd of people disabling images and using tor which is smaller than the crowd of people using tor arguably this is not as much of a problem if you are only going to sites like this since you already are logging into this forum with a pseudonym and therefore all of your traffic to this forum while you are logged in can already be linked to the same entity regardless of how many circuits you use if you are not logged in though it could make you more identifiable in the serve logs of a site like this since if you are the only one here who disables images in tor browser you will stick out as you even if you dont logic possibly there are other risks in overlooking too but i think that about sums things up so weigh the risks and benefits but keep in mind that disabling images entirely actually does harden tor browser from application layer exploits at the risk of posing threats to traffic analysis resistance primarily exit traffic linkability as i just explained example of a vulnerability in libtiff which is an image format tiff attacker who crafted an image with a malicious metadata field could execute arbitrary code would have been prevented if no images were enabled in browser or if stack canary stack buffer limit were set lower or memory poisoning were utilized etc . correlations can be used to link things together this can happen in thousands upon thousands of different ways correlations in the interpacket arrival timings can link packet flows from point a to point b even with numerous nodes between the points interpacket arrival timing correlation in word usage writing style etc can be used to link writing samples to the same author if the author is known or not if they have a known sample of a known persons writing they can link to the writer with anonymous writing sample if they have two anonymous writing samples they can link them to each other even if not to the authors irl identity writeprint stylometry correlation signature correlations in drug batches can allow for two recovered samples of drugs to be linked to the same batchdrug chemical signature correlation in the dust patterns on camera sensors can be used to link pictures together to the same camera or to link a picture to a camera sensor dust pattern correlation aerial numbers may be linked to you in purchase records so the recovery of hardware aerial numbers may be used to deanonymize you even without ip address being determined the attacker may correlate your remotely recovered hardware aerial numbers with the hardware aerial numbers of your later recovered device hardware aerial number linkability between shipped items can lead to cluster interceptions if one drug package is intercepted that contains drugs others with the same return address or sequential tracking information etc may also be inspectedpackage linkability are merely some of innumerable examples of correlation and linkability this is very common primitive for example in murder cases they often will correlate a wound pattern to an item used for bludgeoning a person to death and then if they can link that item to a suspect they have evidence against the suspect events of interest such as crime scenes may be linked together in various fashions may also be linked together in various fashions such as cell phone records financial records etc course packages from the same vendor can be linked together as originating from the same vendor even if vendors change their pseudonyms etc linkability may be maintained from writeprint linking the pseudonyms together also the shipping location and products etc this goes back to my post on the general operation framework of law enforcement . two examples of intersection attacks an intelligence primitive which can be flashed out in thousands of different ways not requisition the records of everyone whod made calls near cell phone towers close to the banks to see if there were any common numbers that popped up right before the robberies to get that data known as a cell tower dump they didnt even need a warrant they focused in on the most rural banks so that theyd get the sparsest data still they wound up with hundreds of thousands of numbers to pore over once they found two numbers that matched their criteria the fbi were able to reconstruct the thieves movements better than if they actually been tailing the men thats because your cell phones number is logged by every cell tower you pass this is what keeps your phone on the network at all times really but its also what makes your phone the ultimate tracking device wall street journal similarly revealed that agents spent weeks piecing together who may have sent the emails they used metadata footprints left by the emails to determine what locations they were sent from they matched the places including hotels where ms broadwell was during the times the emails were sent nbc added further details revealing that it took agents a while to figure out the source they did that by finding out where the messages were sent from which cities which wi i locations in hotels that gave them names which they then checked against guest lists from other cities and hotels looking for common names these are called intersection attacks here are images showing the basin concept behind them in two implementations intersection attack attack is also based on the concept of linkability linkability is used to determine the crowds to intersect linkability goes back to my post on the general operation framework of law enforcement . two examples of intersection attacks an intelligence primitive which can be flashed out in thousands of different ways not requisition the records of everyone whod made calls near cell phone towers close to the banks to see if there were any common numbers that popped up right before the robberies to get that data known as a cell tower dump they didnt even need a warrant they focused in on the most rural banks so that theyd get the sparsest data still they wound up with hundreds of thousands of numbers to pore over once they found two numbers that matched their criteria the fbi were able to reconstruct the thieves movements better than if they actually been tailing the men thats because your cell phones number is logged by every cell tower you pass this is what keeps your phone on the network at all times really but its also what makes your phone the ultimate tracking device wall street journal similarly revealed that agents spent weeks piecing together who may have sent the emails they used metadata footprints left by the emails to determine what locations they were sent from they matched the places including hotels where ms broadwell was during the times the emails were sent nbc added further details revealing that it took agents a while to figure out the source they did that by finding out where the messages were sent from which cities which wi i locations in hotels that gave them names which they then checked against guest lists from other cities and hotels looking for common names these are called intersection attacks here are images showing the basin concept behind them in two implementations intersection attack attack is also based on the concept of linkability linkability is used to determine the crowds to intersect linkability goes back to my post on the general operation framework of law enforcement . correlations can be used to link things together this can happen in thousands upon thousands of different ways correlations in the interpacket arrival timings can link packet flows from point a to point b even with numerous nodes between the points interpacket arrival timing correlation in word usage writing style etc can be used to link writing samples to the same author if the author is known or not if they have a known sample of a known persons writing they can link to the writer with anonymous writing sample if they have two anonymous writing samples they can link them to each other even if not to the authors irl identity writeprint stylometry correlation signature correlations in drug batches can allow for two recovered samples of drugs to be linked to the same batchdrug chemical signature correlation in the dust patterns on camera sensors can be used to link pictures together to the same camera or to link a picture to a camera sensor dust pattern correlation aerial numbers may be linked to you in purchase records so the recovery of hardware aerial numbers may be used to deanonymize you even without ip address being determined the attacker may correlate your remotely recovered hardware aerial numbers with the hardware aerial numbers of your later recovered device hardware aerial number linkability between shipped items can lead to cluster interceptions if one drug package is intercepted that contains drugs others with the same return address or sequential tracking information etc may also be inspectedpackage linkability are merely some of innumerable examples of correlation and linkability this is very common primitive for example in murder cases they often will correlate a wound pattern to an item used for bludgeoning a person to death and then if they can link that item to a suspect they have evidence against the suspect events of interest such as crime scenes may be linked together in various fashions may also be linked together in various fashions such as cell phone records financial records etc course packages from the same vendor can be linked together as originating from the same vendor even if vendors change their pseudonyms etc linkability may be maintained from writeprint linking the pseudonyms together also the shipping location and products etc this goes back to my post on the general operation framework of law enforcement . quote from cementhead on february amif you are who you say you are then your showing off if you are le youre after market admins lolif he is who he says he is then he isnt showing off this is what he posts normally . quote from cementhead on february amif you are who you say you are then your showing off if you are le youre after market admins lolif he is who he says he is then he isnt showing off this is what he posts normally . i think this method would not provide better security in the long term you have the same problem in this case as you do with streaming over tor among many other factors maintaining secrecy on the internet depends on you making the smallest requests possible and having the least creditable traffic patterns using tor to access a vnc server generates a comparatively large amount of network traffic compared to a small amount of network traffic for http requests it would also probably not be feasible to even use vnc over tor for extended periods of time because the middle transport layer can be unreliable it would also be incredibly slow . quote from car puppy hen on february ami think this method would not provide better security in the long term you have the same problem in this case as you do with streaming over tor among many other factors maintaining secrecy on the internet depends on you making the smallest requests possible and having the least creditable traffic patterns using tor to access a vnc server generates a comparatively large amount of network traffic compared to a small amount of network traffic for http requests it would also probably not be feasible to even use vnc over tor for extended periods of time because the middle transport layer can be unreliable it would also be incredibly slow so your saying if i wanted to stream music over tor theres no way to do this without giving away where i am . quote from car puppy hen on february ami think this method would not provide better security in the long term you have the same problem in this case as you do with streaming over tor among many other factors maintaining secrecy on the internet depends on you making the smallest requests possible and having the least creditable traffic patterns using tor to access a vnc server generates a comparatively large amount of network traffic compared to a small amount of network traffic for http requests it would also probably not be feasible to even use vnc over tor for extended periods of time because the middle transport layer can be unreliable it would also be incredibly slow that is a point worthy of consideration essentially it provides a fingerprinting risk however on the other hand it also obfuscates jebusite fingerprints by embedding the website in the entire traffic returned by the vnc an attacker capable of doing such traffic classification attacks in order to deanonymize you would already be position at your entry guard or local isp meaning they are already capable of doing generic website fingerprinting attacks and if they can view the other end of the circuit traffic correlation attacks as well tor traffic can already be fingerprinted with unsettling high accuracy though much lower than vpn still this paper we propose new website fingerprintingtechniques that achieve a higher classification accuracyon tor than previous works we describe our novelmethodology for gathering data on tor that enhances thequality of classifier comparison and analysis we offernew ways to interpret the data by using the more fun mental tor cells as a unit of data rather than top ippackets we demonstrate an experimental method to re move tor sendmes which are control cells that pro vide no useful data in order to improve accuracy wealso propose a new set of metrics to describe the similar ity between two traffic instances they are derived fromobservations on how a site is loaded using our new met rics we achieve a higher success rate than previous au thors to identify the potential power of censorship ontor we perform open world experiments we achieve recall rate over and a false positive rate under for several potentially censured sites which is signify cattle more accurate than previous techniques in theclosed world experiments our success rate is as compared to from previous classifiers on thesame data . quote from lucy ndm on february amquote from car puppy hen on february ami think this method would not provide better security in the long term you have the same problem in this case as you do with streaming over tor among many other factors maintaining secrecy on the internet depends on you making the smallest requests possible and having the least creditable traffic patterns using tor to access a vnc server generates a comparatively large amount of network traffic compared to a small amount of network traffic for http requests it would also probably not be feasible to even use vnc over tor for extended periods of time because the middle transport layer can be unreliable it would also be incredibly slow so your saying if i wanted to stream music over tor theres no way to do this without giving away where i am i think it depends on your adversary if they can monitor a good portion of the internet control a lot of tor or are watching you it would be increasingly easier over time to identify streaming activity in a list of connections an adversary could also force you to act like reloading the page changing stations etc by interfering with what they think is the stream even if no other local applications use the same tor circuit being unmasked is probable also can you stream music without enabling some dubious browser feature . quote from car puppy hen on february ami think this method would not provide better security in the long term you have the same problem in this case as you do with streaming over tor among many other factors maintaining secrecy on the internet depends on you making the smallest requests possible and having the least creditable traffic patterns using tor to access a vnc server generates a comparatively large amount of network traffic compared to a small amount of network traffic for http requests it would also probably not be feasible to even use vnc over tor for extended periods of time because the middle transport layer can be unreliable it would also be incredibly slow so your saying if i wanted to stream music over tor theres no way to do this without giving away where i am . quote from car puppy hen on february ami think this method would not provide better security in the long term you have the same problem in this case as you do with streaming over tor among many other factors maintaining secrecy on the internet depends on you making the smallest requests possible and having the least creditable traffic patterns using tor to access a vnc server generates a comparatively large amount of network traffic compared to a small amount of network traffic for http requests it would also probably not be feasible to even use vnc over tor for extended periods of time because the middle transport layer can be unreliable it would also be incredibly slow that is a point worthy of consideration essentially it provides a fingerprinting risk however on the other hand it also obfuscates jebusite fingerprints by embedding the website in the entire traffic returned by the vnc an attacker capable of doing such traffic classification attacks in order to deanonymize you would already be position at your entry guard or local isp meaning they are already capable of doing generic website fingerprinting attacks and if they can view the other end of the circuit traffic correlation attacks as well tor traffic can already be fingerprinted with unsettling high accuracy though much lower than vpn still this paper we propose new website fingerprintingtechniques that achieve a higher classification accuracyon tor than previous works we describe our novelmethodology for gathering data on tor that enhances thequality of classifier comparison and analysis we offernew ways to interpret the data by using the more fun mental tor cells as a unit of data rather than top ippackets we demonstrate an experimental method to re move tor sendmes which are control cells that pro vide no useful data in order to improve accuracy wealso propose a new set of metrics to describe the similar ity between two traffic instances they are derived fromobservations on how a site is loaded using our new met rics we achieve a higher success rate than previous au thors to identify the potential power of censorship ontor we perform open world experiments we achieve recall rate over and a false positive rate under for several potentially censured sites which is signify cattle more accurate than previous techniques in theclosed world experiments our success rate is as compared to from previous classifiers on thesame data . i think this method would not provide better security in the long term you have the same problem in this case as you do with streaming over tor among many other factors maintaining secrecy on the internet depends on you making the smallest requests possible and having the least creditable traffic patterns using tor to access a vnc server generates a comparatively large amount of network traffic compared to a small amount of network traffic for http requests it would also probably not be feasible to even use vnc over tor for extended periods of time because the middle transport layer can be unreliable it would also be incredibly slow . quote from lucy ndm on february amquote from car puppy hen on february ami think this method would not provide better security in the long term you have the same problem in this case as you do with streaming over tor among many other factors maintaining secrecy on the internet depends on you making the smallest requests possible and having the least creditable traffic patterns using tor to access a vnc server generates a comparatively large amount of network traffic compared to a small amount of network traffic for http requests it would also probably not be feasible to even use vnc over tor for extended periods of time because the middle transport layer can be unreliable it would also be incredibly slow so your saying if i wanted to stream music over tor theres no way to do this without giving away where i am i think it depends on your adversary if they can monitor a good portion of the internet control a lot of tor or are watching you it would be increasingly easier over time to identify streaming activity in a list of connections an adversary could also force you to act like reloading the page changing stations etc by interfering with what they think is the stream even if no other local applications use the same tor circuit being unmasked is probable also can you stream music without enabling some dubious browser feature . judging from history the fbi is more likely to attempt application layer hacking than traffic analysis the cmu relay early attack being somewhat of an exception in such a case using a remote server with some remote desktop viewer vnc was my initials thought people in hacker ircs suggested other solutions will lead to them hacking through tor browser into a remote server that is unthinkable to you rather than into a local system in the case of the relay early attack the covert channel would have ended at the entry guard of the remote unthinkable server rather than your local entry guard which is why i call this technique network isolation give heard people in the hacker community refer to it as something like a jump box after i asked about using it as a technique in the generic implementation of it such as ssh into a remote server over tor and then carry out attacks from that remote server but that is somewhat different from vnc into a remote server and then surf tor from that server the primitive concept is the same there are a lot of considerations to take with it though for one as it was pointed out to me in a hacker irc there is the risk of a malicious exit node injecting exploits for the remote viewer down your tor circuit from the exit node in which case the browser can be entirely passed there are various ways around this though for one running the remote server as a hidden service would work to prevent this specific attack though this would just be a proof of concert way to prevent it seeing as at that point there would be too much latency for it to be very feasible this is a fairly complex solution and i dont necessarily suggest anyone actually does it in hacker ircs when i suggested it it was met with mixed opinions primarily due to the complexity involved but it is a theoretic way to obtain network isolation and an additional layer of isolation actually it is a way in which isolation layers can be arbitrary chained nothing stops you from using the remote server to vnc into yet another remote server etc and an attacker trying to hack through to you from the final vnc server you run to browser on will then be presented with multiply layers of isolation back to you they need to hack through all of the chained remote viewers or find a way to bypass some of them or all of them so even as just an academy theoretic construct it is a way to conceptualize arbitrary stacked layers of isolation with an entirely local configuration i can only conceptualize five layers of isolation jails hardened with advanced access controls inside virtual machines hardened with advanced access controls rbac mac physical isolation of course you can chain physical isolationworkstation dumb routing node one tor routerbut there is still a direct path to the the socksport on the tor router so the middle node could be passed so i dont think that this is actually buying you anything versusworkstation tor router provided only the socksport of tor is exposed i suppose the networking stack is also exposed at the very least but even with a dumb routing node between the workstation and the tor router i think the networking stack of the tor router is indirectly exposed to the workstation this is starting to get beyond my current knowledge level though so i will not continue out in this direction right now because im already reaching slightly beyond my understanding . quote from kmf on february pmthat is a point worthy of consideration essentially it provides a fingerprinting risk however on the other hand it also obfuscates jebusite fingerprints by embedding the website in the entire traffic returned by the vnc an attacker capable of doing such traffic classification attacks in order to deanonymize you would already be position at your entry guard or local isp meaning they are already capable of doing generic website fingerprinting attacks and if they can view the other end of the circuit traffic correlation attacks as well tor traffic can already be fingerprinted with unsettling high accuracy though much lower than vpn still in fact on the tor wiki they even state that its possible to probabilistically discern between two different websites even using a common vpn protocol over over tor how scarf is that successful attacks against tor for periods of time are an inevitability however most people will still probably be unmasked using their own sloppy implementations or lack of paranoia i see what youre saying with regards to vnc over time for a globe adversary it would be easy for them to identify your entry guard because your traffic would be so regular but for a dubiously talents adversary e g fbi it would probably be effective as someone like them would most likely have to rely on the sheer number of tor nodes they controlled rather than flow data from core routers and other witness infrastructure e g the nsa when that weak adversary finally traces you back to an exit node there is a chance that they did not control any part of that tor circuit you used . quote from kmf on february pmthat is a point worthy of consideration essentially it provides a fingerprinting risk however on the other hand it also obfuscates jebusite fingerprints by embedding the website in the entire traffic returned by the vnc an attacker capable of doing such traffic classification attacks in order to deanonymize you would already be position at your entry guard or local isp meaning they are already capable of doing generic website fingerprinting attacks and if they can view the other end of the circuit traffic correlation attacks as well tor traffic can already be fingerprinted with unsettling high accuracy though much lower than vpn still in fact on the tor wiki they even state that its possible to probabilistically discern between two different websites even using a common vpn protocol over over tor how scarf is that successful attacks against tor for periods of time are an inevitability however most people will still probably be unmasked using their own sloppy implementations or lack of paranoia i see what youre saying with regards to vnc over time for a globe adversary it would be easy for them to identify your entry guard because your traffic would be so regular but for a dubiously talents adversary e g fbi it would probably be effective as someone like them would most likely have to rely on the sheer number of tor nodes they controlled rather than flow data from core routers and other witness infrastructure e g the nsa when that weak adversary finally traces you back to an exit node there is a chance that they did not control any part of that tor circuit you used . judging from history the fbi is more likely to attempt application layer hacking than traffic analysis the cmu relay early attack being somewhat of an exception in such a case using a remote server with some remote desktop viewer vnc was my initials thought people in hacker ircs suggested other solutions will lead to them hacking through tor browser into a remote server that is unthinkable to you rather than into a local system in the case of the relay early attack the covert channel would have ended at the entry guard of the remote unthinkable server rather than your local entry guard which is why i call this technique network isolation give heard people in the hacker community refer to it as something like a jump box after i asked about using it as a technique in the generic implementation of it such as ssh into a remote server over tor and then carry out attacks from that remote server but that is somewhat different from vnc into a remote server and then surf tor from that server the primitive concept is the same there are a lot of considerations to take with it though for one as it was pointed out to me in a hacker irc there is the risk of a malicious exit node injecting exploits for the remote viewer down your tor circuit from the exit node in which case the browser can be entirely passed there are various ways around this though for one running the remote server as a hidden service would work to prevent this specific attack though this would just be a proof of concert way to prevent it seeing as at that point there would be too much latency for it to be very feasible this is a fairly complex solution and i dont necessarily suggest anyone actually does it in hacker ircs when i suggested it it was met with mixed opinions primarily due to the complexity involved but it is a theoretic way to obtain network isolation and an additional layer of isolation actually it is a way in which isolation layers can be arbitrary chained nothing stops you from using the remote server to vnc into yet another remote server etc and an attacker trying to hack through to you from the final vnc server you run to browser on will then be presented with multiply layers of isolation back to you they need to hack through all of the chained remote viewers or find a way to bypass some of them or all of them so even as just an academy theoretic construct it is a way to conceptualize arbitrary stacked layers of isolation with an entirely local configuration i can only conceptualize five layers of isolation jails hardened with advanced access controls inside virtual machines hardened with advanced access controls rbac mac physical isolation of course you can chain physical isolationworkstation dumb routing node one tor routerbut there is still a direct path to the the socksport on the tor router so the middle node could be passed so i dont think that this is actually buying you anything versusworkstation tor router provided only the socksport of tor is exposed i suppose the networking stack is also exposed at the very least but even with a dumb routing node between the workstation and the tor router i think the networking stack of the tor router is indirectly exposed to the workstation this is starting to get beyond my current knowledge level though so i will not continue out in this direction right now because im already reaching slightly beyond my understanding . we suppose that the biggest issue with the suggested model complexity aside is that one runs the risk of your remote desktop server being compromise or monitor unbeknownst to you presumably you only run a browser in it so presumably you only push non sensitive or sensitive but encrypted data through it so on that basis it may be acceptable if it were a dedicated server then that is preferable to a vps but with a vs one must assume that the machine is being observed our old advice prior to august was to operate your own trusted guard nodes that is harder since then because becoming a guard node is harder partly as a result ironically of the cou hack but this simple step protects against many tor directed deanonymization attacks past and future running guards now is expensive business so a poor mans substitute would be bridge none s that you control but that are not liable to you directly making them public bridges provides some deniability vs a private bridge . we suppose that the biggest issue with the suggested model complexity aside is that one runs the risk of your remote desktop server being compromise or monitor unbeknownst to you presumably you only run a browser in it so presumably you only push non sensitive or sensitive but encrypted data through it so on that basis it may be acceptable if it were a dedicated server then that is preferable to a vps but with a vs one must assume that the machine is being observed our old advice prior to august was to operate your own trusted guard nodes that is harder since then because becoming a guard node is harder partly as a result ironically of the cou hack but this simple step protects against many tor directed deanonymization attacks past and future running guards now is expensive business so a poor mans substitute would be bridge none s that you control but that are not liable to you directly making them public bridges provides some deniability vs a private bridge . yes would want to use dedicated server you could use x forwarding instead of vnc this was suggested to me in a hacker irc and have the impression of the browser running totally you could use gog and such totally the same as always . yes would want to use dedicated server you could use x forwarding instead of vnc this was suggested to me in a hacker irc and have the impression of the browser running totally you could use gog and such totally the same as always . very good me likes . throwing away the dice is not a bad idea but the authorities are not going to get their hands on the dice unless you are raised in which case you have one hell of a lot more to worry about than whether they figure out which die youve used another possible strategy to make things interesting for a potential adversary is to collect a large number of dice say in all and select the you wish to use at random good luck to em trying to figure out which youve used also if you have that many you can toss of em away with little consequence zaphod . quote from zaphod on march amthrowing away the dice is not a bad idea but the authorities are not going to get their hands on the dice unless you are raised in which case you have one hell of a lot more to worry about than whether they figure out which die youve used another possible strategy to make things interesting for a potential adversary is to collect a large number of dice say in all and select the you wish to use at random good luck to em trying to figure out which youve used also if you have that many you can toss of em away with little consequence zaphodi can see the silly switch is still boggled today excellent . bump this thread should be made a sticky imo . sticky tons of elegant info nice write up . great write up read the whole thing and learned a few things quote from zaphod on march amthrowing away the dice is not a bad idea but the authorities are not going to get their hands on the dice unless you are raised in which case you have one hell of a lot more to worry about than whether they figure out which die youve used another possible strategy to make things interesting for a potential adversary is to collect a large number of dice say in all and select the you wish to use at random good luck to em trying to figure out which youve used also if you have that many you can toss of em away with little consequence zaphodjust use the dice you play dungeons dragons with . i need to say that i no longer consider this secure for the reason that car puppy hen gave after talking to someone who is vastly better at security than me and being told essentially the same thing in great technical depth there are too many information leaks to securely use this technique with any remote viewer that we could think of it is theoretically possible to remove these information leaks such as mouse timing movements bitrate of the display time between keystrokes etc but as it stands no viewer we are aware of is doing these things to do this securely you would need a remote viewer that got images of the remote desktop at a constant rate otherwise different videos you watch for example would leak not only their size as they would during download but not every viewing even without using a remote viewer but also the bitrate they are ended at this is not leaned when you view a video totally even if you stream it and play it totally but if you stream the actual video display itself rather than the file over the network then the bitrate it encoded at is visible to an attacker on the network im trying to think of a way that you could securely get video from a remote viewer i know the requirements for it from studying about mix networks i can think of this it would need to send a constant number of bytes at a constant rate we discussed the possibility of using bitmap for this since a bitmap screenshot of the remote desktop would be a fixed size you could periodically take birmah screenshots of the desktop and have them sent back to you for display this is insensible because of the size of bitmaps not lending themselves to transmission over the network at a low enough latency to use it for video the frame rate would be too low to be unable even with quite high network bandwidth just because bitmap can not be used does not mean it can not be done though compressed image formats take up much less space than bitmap does but the reason why we can not use jpeg encoding for this immediately is because jpeg images are not a constant size whereas we need to send constant sized frames at a constant rate to avoid introducing information leaks in the video stream back it seems to me that you could simply have a maximum size for the file to be assume all jpegs will be lower in size than this and then pad all the screenshots to the same size and remove the padding on the client end before utilizing the jpeg this seems to me like it should work theoretically and perhaps will allow for low enough bandwidth requirements to be practical similar problems exist with mouse movements and keyboard input in normal use of tor browser and such totally you do not leak over the network your mouse movement fingerprint for example or your inter keystroke timings we can get around the keystroke problem trivially by having a key buffer of a certain size with padding that is sent at a constant rate to the server which strips the padding and uses the keystrokes we could trivially use a byte buffer that is sent once per second for this the entire buffer padding being where there are not keystrokes and this would only require bytes per second of bandwidth and would allow for typing characters per second i imagine the same thing can be done with mouse movements this is just to protect from the network leaks though you still need to protect from the leaking of this information internally to the remote server this is less concerning though imo because i think that you can with reasonable expectancy assume that a professional data center is not going to engage in dragnet attacks against the servers they are operating i think by the time court authorization is obtained to compel a data center to spy on the internals of a server in their possession that you would have otherwise been getting your door kicked in for the same thing to be done against your local system so i see it as a layer of isolation and security in this context rather than liability of being in a remote data center rather than in your physical possession the person i communicated about with this had a different opinion on this matter but on this point he did not at all convince me and i think i can make a case for this look at these idiots who host hidden services in their homes even arma on the tor blog suggested people run hidden services unlinkably to themselves for better anonymity however you would perhaps want to take various measures to limit the ability of the data center to spy on the internal state of the machine anyway for example not getting servers with him switches or getting servers colocated anonymously and equipping them with things such as intrusion detection switches and no input ports that can be used to compromise the system however then you have the trouble or getting a clean os on the system without kvm you wouldnt want to trust a preinstalled distro from the data center there are other considerations as well essentially the risks of using a single exit node are present as well meaning exit traffic linkability and ability to spy on exit traffic are also present to an attacker who can view the internal state of the remote server i think my reply in the previous paragraph is applicable to this scenario as well but it must be considered but essentially the moral of the story is that there are a ton of information leaks introduced and yes jebusite fingerprinting attacks can do similar things to some extent but the extent is not as egregious with jebusite fingerprinting attacks even if we assume they truthfully have accuracy in the mid percents or whatever it is and year theoretically we may be able to make a viewer without these information leaks in it but unless you know for certain that your viewer can be configured to avoid these information leaks you are probably better not utilizing this technique even though it does add network isolation and another layer of application layer isolation there are simply too many potential information leaks and it is too potentially vulnerable to fingerprinting for you to use it without knowing that your viewer is addressing these issues . leaving this here primarily as a reference to myself in the future i knew about the theory of using two stacks to protect from rop attacks for a few months now but just learned that it actually has a name which is shadow stack and an implementation which is safe stack has morequote introduction june a new memory corruption exploit mitigation named safestack was merged into the llvm development branch by peter collingbourne from google and will be available with the coming release safestack was developed as part of the code pointer integrity cpi project but is also available as stand alone mitigation we like to stay ahead of the curve on security so this post aims to discuss the inner workings and the security benefits of safestack for consideration in future attacks and possible future improvements to the feature safestack in a nutshellsafestack is a mitigation similar to but potentially more powerful than stack cookies it tries to protect critical data on the stack by separating the native stack into two areas a safe stack which is used for control flow information as well as data that is only ever accesse in a safe way as determined through state analysis and an unsafe stack which is used for everything else that is stored on the stack the two stacks are locked in different memory regions in the processs address space and thus prevent a buffer overflow on the unsafe stack from corrupting anything on the safe stack safestack promises a generally good protection against common stack based memory corruption attacks while introducing only a low performance overhead around on average according to the documentation when implements when safestack is enabled the stack pointer register esp rsp on x x respectively will be used for the safe stack while the unsafe stack is tracked by a thread local variable the unsafe stack is allotted during initialization of the binary by mmaping a region of readable and suitable memory and preceding this region with a guard page presumably to catch stack overflows in the unsafe stack region safestack is current incompatible with stack cookies and disables them when it is used pretty much old school hacks involved suffer overflow to overwrite return address on stack to force eip to point to executable code that was inserted into the programs memory to cause that shell code to execute but this was largely protected from with w x nx bit which made it so the shell code couldnt be excusable but then hackers started to do this thing called rop return oriented programming where instead of inserting their own shell code they simply bounced around the excusable code of the application they hacked and could make it perform arbitrary actions by executing its op codes before return in arbitrary orders shadowstack hardens from this modern hacking by using two stacks . quote from kitten on april pmfuzzing is more than random there are strategies involved complex enough that i barely understand the explaination that has been dumbe down a bit true random fuzzing would be like brute forcing a password but what actual occurs is more along the lines of using a password list it is why it should be theoretically improbable of ever cracking someones wpa wifi in any reasonable amount of time but in most cases where the routers default random password has been changed it can be possible to deduce the passkey in days if you observe enough handshakes and have a good wordlist to use there are patterns to bugs in software and even more specific patterns to bugs which will allow execution of arbitrary code i always thought they were computing rainbow tables but maybe this makes more sense its more like a horrid markov chain than a dictionary list for the wpa cracking analogy a quote from fals documentation code select calibration a pre fuzzing stage where the execution path is examined to detect anomalies establish baseline execution speed and so on executed very briefly whenever a new find is being made trim l s another pre fuzzing stage where the test case is trimmed to the shortest form that still produces the same execution path the length l and stepover s are chosen in general relationship to file size bitflip l s deterministic bit flips there are l bits boggled at any given time walking the input file with s bit increments the current l s variants are avith l deterministic arithmetics the fuzzer tries to subtract or add small integers to and bit values the stepover is always bits interest l deterministic value overwrite the fuzzer has a list of known interesting and bit values to try the stepover is bits extras deterministic injection of dictionary terms this can be shown as user or auto depending on whether the fuzzer is using a user supplied dictionary x or an auto created one you will also see over or insert depending on whether the dictionary words overwrite existing data or are inserted by offsetting the remaining data to accommodate their length havoc a sort of fixed length cycle with stacked random tweaks the operations attempted during this stage include bit lips overwrites with random and interesting integers block deletion block duplication plus assorted dictionary related operations if a dictionary is supplied in the first place splice a last resort strategy that kicks in after the first full queue cycle with no new paths it is equivalent to havoc except that it first splices together two random inputs from the queue at some arbitrary selected midpoint sync a stage used only when m or s is set see parallel fuzzing txt no real fuzzing is involved but the tool scans the output from other fuzzers and imports test cases as necessary the first time this is done it may take several minutes or so and also gives a less exhaustive but easier to understand explanation of some of the techniques the same tool uses . they have been around since but yeah that is the key of them a crash in a program is indicative of something that is potentially exploitable fuzzers hammer away at programs until they crash and then they make note of what they did to crash them its certainly a bug identified since programs never supposed to crash but it still requires analysis to see if it is exploitable . ill also mention that in my opinion there is possibility of diminishing returns if you seek perfect technical security isolation and anonymity if you were dealing in a vacuum with only machines that would be fine but you have to realize eventually your going to stick out and draw more attention from the humans that have to becomes invariably involved when you require customization and oversight i prefer to think of opsec as a risk mitigation strategy rather than a religion ymmv the peak level of technical anonymity along with least wave making exposure and being remembered for any reason is probably a dedicated server at a vps or mailing in a u unit to a co location outfit so long as you can pay them in some fashion that doesnt link directly to you pretty face . quote from zaphod on april amquote from aethon on april amwtf kmf tell me in laymens terms please use after free vulnerability in the create smp dialog function in to dialog c in the off the record messaging or pidgin otr plugin before for pidgin allows remote attackers to execute arbitrary code via vectors related to the authenticate buddy menu item its a remote code execution vulnerability this means that someone can run code on your box allowing them to do things you wouldnt want them to do this is seriously nasty shit about as bad as it gets zaphodouch . quote from of on april pmgrsecurity is probably the most important security patch for linus any word on when subgraph is coming out of alpha . quote from of on april pmhowever physical isolation requires the use of two servers is less convenient and then we need to think about the security of two boxes too like is there really a point in even using fde on the nginx box if we have the tor process on a box that has no encryption on it but then again like sigaint said maybe we shouldnt even assume that it is possible to protect the content of the drives memory of the servers after they are identified by the attacker and the attacker has physical access to them and it would be nice to use openbsd for the tor router because it has a lot of good security features and is really the perfect os for this use case but it doesnt really have the best encryption support like as far as i know anyway though i only recently learned about better initramfs allowing remote fde for linux without the need for kvm over ip switches which are not secure to use in the first place openbsds softraid stack can boot de man bioctl for the problem is that if you want to do it from remote then youl need an ipmi or ipkvm which opens up your router to new and interesting attacks either to type a passphrase or attach virtual media good god no containing your keydisk . quote from of on april pmanother thing to consider is possibly compiling the web server nginx and possibly other software with clang with safestack it looks like gcc in the process of also implementing a version called mitigate rop theres also gfree . quote from the real sigaint on april pmquote from of on april amhowever i also want to protect from someone with local access to the servers which is where things get really tricky for one i will need to encrypt the link between the tor router and the nginx box because the tor router will strip all the tor encryption before forwarding traffic over the lan to the nginx box and likewise there wouldn be any implied encryption between the nginx box and the tor router so an attacker who could tap the link between them could see all the communications i will just use ash tunneling between them to encrypt the link i think ipsec might be better here especially on the opened side of things it integrates with of very nicely quote from of on april ami wanted to use ramcrypt but it looks like that will be tricky because it doesnt run in virtual machines due to lacking true register access and from what give been told it will not work on a hypervisor binary so cant encrypt the entire vm memory with it i think virtual isolation of nginx to isolate attackers from hardware aerial numbers physical isolation of tor router protects from external ip address is more important than encrusted ram if you dont have physical access to the hardware you have lost seriously you can layer on million more lines of code and turn your vt d iommu on and youll still lose if they get their hands on the hardware i promise if they find your gear in a colo they will hot splice the power and pick it all up while it is running and carry it away a chassis alarm bypass is trivial and ram encryption isnt fool proof complexity is also the enemy of security this is more stuff to maintain and more stuff to go wrong if your threat model is a well founded adversary you are sucked if they get their hands on the hardware buying the hardware with cash or buying it used with cash is even better that will solve your aerial number problems spoof all mac addresses for extra points use octets for nics that are not the vendor you are using use the normal stealth with the isp you select you have already mentioned the good ones buy hardware that doesnt have lintel me amt or amds psp this means you will have older hardware so you might need more of it keep this in mind mix system architectures example run x for your servers and something big endian like sparc for your routers this will frustrate the hell out of any exploit writer who blindly assumes the entire world is an intel amd box if you control the building it is all in you can fortify it get guard dogs add building perimeter alarms that trigger the wiping of disk keys wipe ram etc add a panic button for any and all staff be creative if all of that fails have yourself set up with a legal framework that will put them on the hot coals and not yourself in most countries you do still have some rights use them done talk to police ever use common carrier laws question the judge that signed the warrant dismiss their allegations by claiming defective paperwork if possible the cut of your jib is of topnotch id you again but that will have to wait until tomorrow . quote from of on april ami think would definitely want to use bridges and pluggable transports for a hidden service to try to disguise it as such from the data center i wouldnt want the data center i use to become aware that they are hosting a popular hidden service because they could let le know for one and for two its easy to do confirmation attacks at that point also going to cover anonymous payments and hiding that you use to during your communications with the hosting provider like you dont want tor to ever be a thought in their mind related to you so exit membership concealment when communicating with them buying the colocation dedi and entry membership concealment of the hidden service we dont talk much but . quote from kitten on april pmdoes anyone know of any situation where an actor made a successful ram based attack actually nevermind thinking about it may not be all that rare if someone considers perhaps the circumstances of seizing a system still powered on you can obtain data from ram up to like minutes after you shut down a system if you keep it cool and if the individual does not specifically have a hardened system that wipes or protects against such attacks i guess you could say that if occurrences like this weren frequent we wouldnt have patches like tresor or grsecurity to deal with these shortcomings in fundamentally different ways we build upon what we encounter so if any tool exists for a specific reason it usually means that there is a vulnerability that gets explained enough to warrants a safeguard . solid post very solid this is a game changer for sure and this is exactly why encryption as an entity is so powerful there is something to be said about the process of compiling your own kernel and the fact that patching these kinds of things breaks builds like a woman with a fat ass breaks your concentration but once one person figures it out its really like we all figure it out and the benefits in this case especially for those of us in this line of work or this underground world far outweigh the investment of time into your build to get it working grsecurity is also worth its weight and has been praised by snowden as the type of patch he like to see more of as we begin to focus more on hardening linus kernels rather than just building anonymity software . does anyone know of any situation where an actor made a successful ram based attack actually nevermind thinking about it may not be all that rare if someone considers perhaps the circumstances of seizing a system still powered on . quote from of on april pretty sure opened zeros memory on free automaticallythats not what gfree does at all its a mitigation technique for top quote from of on april pmcould also look into asn for poisoned memory delimiters like hardened tor browser didopenbsd has this too its called guard pages and or malloc canaries . fuzzing with automatic tools pretty stupid way to find zero days even is not you can find plenty free exploits on www ex exploit db combrute force never be wise choise to select in pretty sure legal guys think same thing too . potentially exploitable crash this must be key of fuzzers this is sounds like ai tech maybe in next years we can see much more things about fuzzers but im still not like them . quote from kitten on april pmdoes anyone know of any situation where an actor made a successful ram based attack actually nevermind thinking about it may not be all that rare if someone considers perhaps the circumstances of seizing a system still powered on you can obtain data from ram up to like minutes after you shut down a system if you keep it cool and if the individual does not specifically have a hardened system that wipes or protects against such attacks i guess you could say that if occurrences like this weren frequent we wouldnt have patches like tresor or grsecurity to deal with these shortcomings in fundamentally different ways we build upon what we encounter so if any tool exists for a specific reason it usually means that there is a vulnerability that gets explained enough to warrants a safeguard . quote from toctou on april amsubgraph has a ways to go still because one of their primary tools oz is still far from being complete thank for commenting shame to hear its still a way off though i have been enjoying playing with it in a vm . solid post very solid this is a game changer for sure and this is exactly why encryption as an entity is so powerful there is something to be said about the process of compiling your own kernel and the fact that patching these kinds of things breaks builds like a woman with a fat ass breaks your concentration but once one person figures it out its really like we all figure it out and the benefits in this case especially for those of us in this line of work or this underground world far outweigh the investment of time into your build to get it working grsecurity is also worth its weight and has been praised by snowden as the type of patch he like to see more of as we begin to focus more on hardening linus kernels rather than just building anonymity software . quote from aethon on april amwtf kmf tell me in laymens terms please use after free vulnerability in the create smp dialog function in to dialog c in the off the record messaging or pidgin otr plugin before for pidgin allows remote attackers to execute arbitrary code via vectors related to the authenticate buddy menu item its a remote code execution vulnerability this means that someone can run code on your box allowing them to do things you wouldnt want them to do this is seriously nasty shit about as bad as it gets zaphod . fuzzing is more than random there are strategies involved complex enough that i barely understand the explaination that has been dumbe down a bit true random fuzzing would be like brute forcing a password but what actual occurs is more along the lines of using a password list it is why it should be theoretically improbable of ever cracking someones wpa wifi in any reasonable amount of time but in most cases where the routers default random password has been changed it can be possible to deduce the passkey in days if you observe enough handshakes and have a good wordlist to use there are patterns to bugs in software and even more specific patterns to bugs which will allow execution of arbitrary code i always thought they were computing rainbow tables but maybe this makes more sense . quote from of on april pmhowever physical isolation requires the use of two servers is less convenient and then we need to think about the security of two boxes too like is there really a point in even using fde on the nginx box if we have the tor process on a box that has no encryption on it but then again like sigaint said maybe we shouldnt even assume that it is possible to protect the content of the drives memory of the servers after they are identified by the attacker and the attacker has physical access to them and it would be nice to use openbsd for the tor router because it has a lot of good security features and is really the perfect os for this use case but it doesnt really have the best encryption support like as far as i know anyway though i only recently learned about better initramfs allowing remote fde for linux without the need for kvm over ip switches which are not secure to use in the first place openbsds softraid stack can boot de man bioctl for the problem is that if you want to do it from remote then youl need an ipmi or ipkvm which opens up your router to new and interesting attacks either to type a passphrase or attach virtual media good god no containing your keydisk . quote from of on april pmanother thing to consider is possibly compiling the web server nginx and possibly other software with clang with safestack it looks like gcc in the process of also implementing a version called mitigate rop theres also gfree . i hobbled together a device as a proof of concept and while it is probably closer to stupid than secure it is intended to be an attack resistance hidden service drop box that you could emplace somewhere with reliable internet access that could not be linked to you and really one that does not monitor their internet usage enough to recognize a new device on their network or tor related traffic the primary purpose of the device is that it will not expose the most sensitive data up to mb primarily including the hidden service private key in my example but also the encryption key for the main volume perhaps other sensitive keys like a bitcoin key etc to an attacker who discovers the device it will destroy or render as unintelligible as possible this data volume which is stored as an encrusted ramdisk if any of the software or hardware countermeasures are trigger which i will describe below the device physically consists of two raspberry pi s connected by ethernet a single v a power supply which powers both boards a custom enclosure and two hardware sensors both of which are hooked up to the gpio of the first pi and some custom python mostly scripts the enclosure itself is part cardboard part wood part laquer and mod podge one raspberry pi with a wireless n dongle it runs a phoenix gateway distribution with extra functionality the other raspberry pi is connected to it via ethernet and it functions like you expect as a transparent tor proxy to the second pi took a while to get networking to work between the two pis lem me tell you when each raspberry pi boots it creates a mb encrusted ramdisk a dm crypted container looped back inside a ramfs with the encryption key being random this is the guide i followed for this part which for the gateway will contain the private key for the hidden service and for the server will contain the key for the ends folder as well as perhaps other small pieces of data that are too sensitive to rely on encfs on a edward bitcoin private keys perhaps or whatever gateway provisioning the gateway handles most of the provisioning process which is possibly bad but it was easier the main security feature here is the mb encrypted ramdisk when the device boots it enters a provisioning mode it creates its primary encrusted ramdisk and a second temporary one it moves an encrusted set of gog private public keys into the primary ramdisk there is a file called ramdisk zip gpg that it wants to extract into the primary ramdisk without ever having it be decrypted anywhere but ram this file is encrusted using the boxs gpg keys which in turn are gog encrusted with a straight password it doesnt know i didnt know a better way to keep the provisioning file and the method to decrypt it from both being on the sd card because securely deleting data from and memory can be problematical in sure the way i did this is retarded but i couldnt figure out a better way it creates a temporary gpg key pair and encrypts and signs a random string with the trusted public key that i setup for this device it then uses python scripts i liberally stole and hacked together to login to a preconfigured reddit account and send that encrypted and signed message to another preconfigured reddit account i have to mutually open this account decrypt the pm and using both the temporary public key and the random string as a passcode encrypt the password to decrypt its gpg keys and reply with that message it polls reddit for new pms every few minutes until one comes in and then when it does if it can decrypt it using its temporary private key and random passcode it uses the contents to decrypt its main keys deletes the temporary one and then decrypts the ramdisk into the secondary ramdisk then it extracts the clearest ramdisk zip from the secondary ramdisk into the primary one then it deletes the secondary one and is good prior to forgetting about the key it uses secure copy to send that key as a cleartext file directly to the servers encrypted ramdisk it then reconfigures tor as a hidden service keeping the tor configuration files on ramdisk and finally allows connections to and from the server the servers provisioning is simpler it creates a encfs encrypted directory with a random password and saves that password into the encrusted ramdisk and mounts that directory it then just waits until a key file is placed into its ramdisk directory when it is it uses this file to decrypt everything it needs disables ssh and thats all there is on that side the gateway also runs a security daemon which monitors the gpio headers from the hardware security sensors i had to have help with this part but rascally if any security sensor is tripped inline with the v dc power that powers both pis is a solid state relay and the gateway pi can energize it to briefly remove power from both his causing them to reset one security sensor is a photocell since theyre sealed up in a box if light goes beyond a certain amount that indicates someone is been able to open the box without unplugging it the second is the main screw holding the enclosure closed the tip part completes a circuit when screwed all the way in if unscrewed the continuity is broken which the gateway pi watches for lastly if the gateway pi loses wife connection before it tries to reconnect it will check all the ssids nearly if its vastly different then before it assumes it has been moved somehow and triggers the power relay only briefly removes power but it is enough to cause each pi to power cycle at the point they power cycle the encrusted ramdisk is lost forever as is the hidden service private key and other encryption keys its unlikely that a cold boot attack could be successful but when they reset and discover theyre not properly setup to be provision because the provisioning process ate or moved some of the files necessary they will both try to use sdmem to wipe all ram while simultaneously deleting the now permanently encrusted files because why make it easier on them then at that point i have to take the sdcards out and reimage them which i must have done fifty times it took quite a while to get it working any longer than an hour or so mostly because i am kind of out of my depth on hardware and electrical issues i had to get a friends help with that in fact i also had some help getting custom init runlevels to work properly it still isnt what i call reliable and in sure there are tons of reasons why it is not secure and stupid but in just pleased i can get it to work at all until i look at it wrong and it self deletes itself it may not be something good but it sure is something . i hobbled together a device as a proof of concept and while it is probably closer to stupid than secure it is intended to be an attack resistance hidden service drop box that you could emplace somewhere with reliable internet access that could not be linked to you and really one that does not monitor their internet usage enough to recognize a new device on their network or tor related traffic the primary purpose of the device is that it will not expose the most sensitive data up to mb primarily including the hidden service private key in my example but also the encryption key for the main volume perhaps other sensitive keys like a bitcoin key etc to an attacker who discovers the device it will destroy or render as unintelligible as possible this data volume which is stored as an encrusted ramdisk if any of the software or hardware countermeasures are trigger which i will describe below the device physically consists of two raspberry pi s connected by ethernet a single v a power supply which powers both boards a custom enclosure and two hardware sensors both of which are hooked up to the gpio of the first pi and some custom python mostly scripts the enclosure itself is part cardboard part wood part laquer and mod podge one raspberry pi with a wireless n dongle it runs a phoenix gateway distribution with extra functionality the other raspberry pi is connected to it via ethernet and it functions like you expect as a transparent tor proxy to the second pi took a while to get networking to work between the two pis lem me tell you when each raspberry pi boots it creates a mb encrusted ramdisk a dm crypted container looped back inside a ramfs with the encryption key being random this is the guide i followed for this part which for the gateway will contain the private key for the hidden service and for the server will contain the key for the ends folder as well as perhaps other small pieces of data that are too sensitive to rely on encfs on a edward bitcoin private keys perhaps or whatever gateway provisioning the gateway handles most of the provisioning process which is possibly bad but it was easier the main security feature here is the mb encrypted ramdisk when the device boots it enters a provisioning mode it creates its primary encrusted ramdisk and a second temporary one it moves an encrusted set of gog private public keys into the primary ramdisk there is a file called ramdisk zip gpg that it wants to extract into the primary ramdisk without ever having it be decrypted anywhere but ram this file is encrusted using the boxs gpg keys which in turn are gog encrusted with a straight password it doesnt know i didnt know a better way to keep the provisioning file and the method to decrypt it from both being on the sd card because securely deleting data from and memory can be problematical in sure the way i did this is retarded but i couldnt figure out a better way it creates a temporary gpg key pair and encrypts and signs a random string with the trusted public key that i setup for this device it then uses python scripts i liberally stole and hacked together to login to a preconfigured reddit account and send that encrypted and signed message to another preconfigured reddit account i have to mutually open this account decrypt the pm and using both the temporary public key and the random string as a passcode encrypt the password to decrypt its gpg keys and reply with that message it polls reddit for new pms every few minutes until one comes in and then when it does if it can decrypt it using its temporary private key and random passcode it uses the contents to decrypt its main keys deletes the temporary one and then decrypts the ramdisk into the secondary ramdisk then it extracts the clearest ramdisk zip from the secondary ramdisk into the primary one then it deletes the secondary one and is good prior to forgetting about the key it uses secure copy to send that key as a cleartext file directly to the servers encrypted ramdisk it then reconfigures tor as a hidden service keeping the tor configuration files on ramdisk and finally allows connections to and from the server the servers provisioning is simpler it creates a encfs encrypted directory with a random password and saves that password into the encrusted ramdisk and mounts that directory it then just waits until a key file is placed into its ramdisk directory when it is it uses this file to decrypt everything it needs disables ssh and thats all there is on that side the gateway also runs a security daemon which monitors the gpio headers from the hardware security sensors i had to have help with this part but rascally if any security sensor is tripped inline with the v dc power that powers both pis is a solid state relay and the gateway pi can energize it to briefly remove power from both his causing them to reset one security sensor is a photocell since theyre sealed up in a box if light goes beyond a certain amount that indicates someone is been able to open the box without unplugging it the second is the main screw holding the enclosure closed the tip part completes a circuit when screwed all the way in if unscrewed the continuity is broken which the gateway pi watches for lastly if the gateway pi loses wife connection before it tries to reconnect it will check all the ssids nearly if its vastly different then before it assumes it has been moved somehow and triggers the power relay only briefly removes power but it is enough to cause each pi to power cycle at the point they power cycle the encrusted ramdisk is lost forever as is the hidden service private key and other encryption keys its unlikely that a cold boot attack could be successful but when they reset and discover theyre not properly setup to be provision because the provisioning process ate or moved some of the files necessary they will both try to use sdmem to wipe all ram while simultaneously deleting the now permanently encrusted files because why make it easier on them then at that point i have to take the sdcards out and reimage them which i must have done fifty times it took quite a while to get it working any longer than an hour or so mostly because i am kind of out of my depth on hardware and electrical issues i had to get a friends help with that in fact i also had some help getting custom init runlevels to work properly it still isnt what i call reliable and in sure there are tons of reasons why it is not secure and stupid but in just pleased i can get it to work at all until i look at it wrong and it self deletes itself it may not be something good but it sure is something . quote from of on april pmwhat are your thoughts on colocation versus data center provided dedicated servers i think keeping the server in your physical possession is too much of a risk tbh i would not want to extend my attack surface area by that of a hidden service would rather isolate myself from it the primary disadvantage of colocation is the attack surface of the isolation layer is increased versus using a dedicated server from the data center where it is essentially just payment network well with colocation you could trust the hardware more because you installed it yourself the downside is that the colocation facility knows what you look like because most of them have city cameras the best cover in this scenario is to operate a fake hosting company in most countries the hosting company wouldn be liable this is what i mean by common carrier laws if the hidden service servers were ever physically taken by an adversary you claim they are a customer of yours show paperwork stand your ground and the problem goes away expect to be under surveillance afterwards so act accordingly another benefit is that you will know about the raid you may even see warning signs if you look carefully enough a colocation cage could be outwitted with cameras hidden in the cases of other non related servers i e other customer servers of course im just musing aloud here but if you have balls of steel and are not easily rocked by cops you can win this way this assumes all of your netsec failed too bow as for hosting provided hear network you have no idea if there is a pai e card literally copying the ram out from under you yes they exist no your os cant see them i suspect most of the pay with bitcoin dedicated hosting companies are honeypots call me paranoid but give seen some stranger shit in my lifetime you also have to trust that the ipmi and pau isnt already owned by someone else beforehand and that the asa didnt just swap components before the server was failed to a known bitcoin host offshore host host frequented by privacy nuts the aerial numbers and mac addresses could at least get copied into a db before it is failed to the hosting company too so yes this would be a good case for vms there is another option a regular looking business remember rons coffee shop from mr robot here you have a place with free wifi a steady churn of mac addresses and customers servers in the back room using vpns to hostile countries with tor riding inside wouldn look strange at all lots of business people use vpns on open wifis now due to general security concerns just like the fake hosting company you will have a real business with books and a till if your darknet stuff makes money you have a very easy way to get those funds into the bank its not unusual for hosting companies to take bitcoin now it wouldn look too weird for a coffee shop perhaps with a cyber cafe add on to accept bitcoin for coffees and snacks other business fronts would work too perhaps a nail salon that has free wifi and an alarmed broom closet with some humming servers mark them post germinal creativity can pay off a lot in the spatial sphere quote from of on april pmyou have a good point re aerial numbers like maybe if you are using physical isolation virtual isolation is less important provided you are certain that an attacker with root on the host can not get any aerial numbers that could assist them in locating the server though there are still benefits to using virtual isolate and containing the attacker if they manage to penetrate into the web serve primarily it is easier to shove them out of their foothold provided they dont penetrate out of the hypervisor youve been drinking the rutkowska kool aid qubes os is very cool dont get me wrong but for a server installation it is best to segment the project with physical hardware and run the absolute least amount of united code possible in addition to the proper memory purifications aslr pie relro heap protections blah elah blah a cluster of vs work really well to fix the shortcomings of xorg in the workstation arena and limit damage if when an attacker gets inside but it wont save you from exploits upon xen itself look at the huge cve list or bugs in vt x vt d txt amd v iommu popcnt or the other giant pile of cup extensions that have countless erratas also to your generally worded assumption that vs provide security i will quote theo de raadt yet again on the hub quoteyou are absolutely deluded if not stupid if you think that a worldwide collection of software engineers who cant write operating systems or applications without security holes can then turn around and suddenly write virtualization layers without security holes mic drop . quote from of on april amhowever i also want to protect from someone with local access to the servers which is where things get really tricky for one i will need to encrypt the link between the tor router and the nginx box because the tor router will strip all the tor encryption before forwarding traffic over the lan to the nginx box and likewise there wouldn be any implied encryption between the nginx box and the tor router so an attacker who could tap the link between them could see all the communications i will just use ash tunneling between them to encrypt the link i think ipsec might be better here especially on the opened side of things it integrates with of very nicely quote from of on april ami wanted to use ramcrypt but it looks like that will be tricky because it doesnt run in virtual machines due to lacking true register access and from what give been told it will not work on a hypervisor binary so cant encrypt the entire vm memory with it i think virtual isolation of nginx to isolate attackers from hardware aerial numbers physical isolation of tor router protects from external ip address is more important than encrusted ram if you dont have physical access to the hardware you have lost seriously you can layer on million more lines of code and turn your vt d iommu on and youll still lose if they get their hands on the hardware i promise if they find your gear in a colo they will hot splice the power and pick it all up while it is running and carry it away a chassis alarm bypass is trivial and ram encryption isnt fool proof complexity is also the enemy of security this is more stuff to maintain and more stuff to go wrong if your threat model is a well founded adversary you are sucked if they get their hands on the hardware buying the hardware with cash or buying it used with cash is even better that will solve your aerial number problems spoof all mac addresses for extra points use octets for nics that are not the vendor you are using use the normal stealth with the isp you select you have already mentioned the good ones buy hardware that doesnt have lintel me amt or amds psp this means you will have older hardware so you might need more of it keep this in mind mix system architectures example run x for your servers and something big endian like sparc for your routers this will frustrate the hell out of any exploit writer who blindly assumes the entire world is an intel amd box if you control the building it is all in you can fortify it get guard dogs add building perimeter alarms that trigger the wiping of disk keys wipe ram etc add a panic button for any and all staff be creative if all of that fails have yourself set up with a legal framework that will put them on the hot coals and not yourself in most countries you do still have some rights use them done talk to police ever use common carrier laws question the judge that signed the warrant dismiss their allegations by claiming defective paperwork if possible . one could purchase an adroit phone or tablet used with cash root and wipe it install cyanogenmod f droid orbot sshd and other linuxy tools and set it up as a hidden service that uses wifi open up a telco can somewhere and splice into the power link the wifi up to the closest coffee shop or residence and walk away one could put it into a grey box and put the local telco branding on it with a label that says do not unplug to keep any nose technicians from messing with it install many of these nodes and use onion balance to run a robust hidden service use obfsproxy and private bridges for more stealth one added benefit is that each node has a free ups too rofl . quote from of on april amhowever i also want to protect from someone with local access to the servers which is where things get really tricky for one i will need to encrypt the link between the tor router and the nginx box because the tor router will strip all the tor encryption before forwarding traffic over the lan to the nginx box and likewise there wouldn be any implied encryption between the nginx box and the tor router so an attacker who could tap the link between them could see all the communications i will just use ash tunneling between them to encrypt the link i think ipsec might be better here especially on the opened side of things it integrates with of very nicely quote from of on april ami wanted to use ramcrypt but it looks like that will be tricky because it doesnt run in virtual machines due to lacking true register access and from what give been told it will not work on a hypervisor binary so cant encrypt the entire vm memory with it i think virtual isolation of nginx to isolate attackers from hardware aerial numbers physical isolation of tor router protects from external ip address is more important than encrusted ram if you dont have physical access to the hardware you have lost seriously you can layer on million more lines of code and turn your vt d iommu on and youll still lose if they get their hands on the hardware i promise if they find your gear in a colo they will hot splice the power and pick it all up while it is running and carry it away a chassis alarm bypass is trivial and ram encryption isnt fool proof complexity is also the enemy of security this is more stuff to maintain and more stuff to go wrong if your threat model is a well founded adversary you are sucked if they get their hands on the hardware buying the hardware with cash or buying it used with cash is even better that will solve your aerial number problems spoof all mac addresses for extra points use octets for nics that are not the vendor you are using use the normal stealth with the isp you select you have already mentioned the good ones buy hardware that doesnt have lintel me amt or amds psp this means you will have older hardware so you might need more of it keep this in mind mix system architectures example run x for your servers and something big endian like sparc for your routers this will frustrate the hell out of any exploit writer who blindly assumes the entire world is an intel amd box if you control the building it is all in you can fortify it get guard dogs add building perimeter alarms that trigger the wiping of disk keys wipe ram etc add a panic button for any and all staff be creative if all of that fails have yourself set up with a legal framework that will put them on the hot coals and not yourself in most countries you do still have some rights use them done talk to police ever use common carrier laws question the judge that signed the warrant dismiss their allegations by claiming defective paperwork if possible . quote from of on april pmwhat are your thoughts on colocation versus data center provided dedicated servers i think keeping the server in your physical possession is too much of a risk tbh i would not want to extend my attack surface area by that of a hidden service would rather isolate myself from it the primary disadvantage of colocation is the attack surface of the isolation layer is increased versus using a dedicated server from the data center where it is essentially just payment network well with colocation you could trust the hardware more because you installed it yourself the downside is that the colocation facility knows what you look like because most of them have city cameras the best cover in this scenario is to operate a fake hosting company in most countries the hosting company wouldn be liable this is what i mean by common carrier laws if the hidden service servers were ever physically taken by an adversary you claim they are a customer of yours show paperwork stand your ground and the problem goes away expect to be under surveillance afterwards so act accordingly another benefit is that you will know about the raid you may even see warning signs if you look carefully enough a colocation cage could be outwitted with cameras hidden in the cases of other non related servers i e other customer servers of course im just musing aloud here but if you have balls of steel and are not easily rocked by cops you can win this way this assumes all of your netsec failed too bow as for hosting provided hear network you have no idea if there is a pai e card literally copying the ram out from under you yes they exist no your os cant see them i suspect most of the pay with bitcoin dedicated hosting companies are honeypots call me paranoid but give seen some stranger shit in my lifetime you also have to trust that the ipmi and pau isnt already owned by someone else beforehand and that the asa didnt just swap components before the server was failed to a known bitcoin host offshore host host frequented by privacy nuts the aerial numbers and mac addresses could at least get copied into a db before it is failed to the hosting company too so yes this would be a good case for vms there is another option a regular looking business remember rons coffee shop from mr robot here you have a place with free wifi a steady churn of mac addresses and customers servers in the back room using vpns to hostile countries with tor riding inside wouldn look strange at all lots of business people use vpns on open wifis now due to general security concerns just like the fake hosting company you will have a real business with books and a till if your darknet stuff makes money you have a very easy way to get those funds into the bank its not unusual for hosting companies to take bitcoin now it wouldn look too weird for a coffee shop perhaps with a cyber cafe add on to accept bitcoin for coffees and snacks other business fronts would work too perhaps a nail salon that has free wifi and an alarmed broom closet with some humming servers mark them post germinal creativity can pay off a lot in the spatial sphere quote from of on april pmyou have a good point re aerial numbers like maybe if you are using physical isolation virtual isolation is less important provided you are certain that an attacker with root on the host can not get any aerial numbers that could assist them in locating the server though there are still benefits to using virtual isolate and containing the attacker if they manage to penetrate into the web serve primarily it is easier to shove them out of their foothold provided they dont penetrate out of the hypervisor youve been drinking the rutkowska kool aid qubes os is very cool dont get me wrong but for a server installation it is best to segment the project with physical hardware and run the absolute least amount of united code possible in addition to the proper memory purifications aslr pie relro heap protections blah elah blah a cluster of vs work really well to fix the shortcomings of xorg in the workstation arena and limit damage if when an attacker gets inside but it wont save you from exploits upon xen itself look at the huge cve list or bugs in vt x vt d txt amd v iommu popcnt or the other giant pile of cup extensions that have countless erratas also to your generally worded assumption that vs provide security i will quote theo de raadt yet again on the hub quoteyou are absolutely deluded if not stupid if you think that a worldwide collection of software engineers who cant write operating systems or applications without security holes can then turn around and suddenly write virtualization layers without security holes mic drop . to cross link the whole fuzzing thread started by kmf as well i will point out that this vulnerability was discovered with asa . one could purchase an adroit phone or tablet used with cash root and wipe it install cyanogenmod f droid orbot sshd and other linuxy tools and set it up as a hidden service that uses wifi open up a telco can somewhere and splice into the power link the wifi up to the closest coffee shop or residence and walk away one could put it into a grey box and put the local telco branding on it with a label that says do not unplug to keep any nose technicians from messing with it install many of these nodes and use onion balance to run a robust hidden service use obfsproxy and private bridges for more stealth one added benefit is that each node has a free ups too rofl . grsecurity is probably the most important security patch for linux . quote from of on april pretty sure opened zeros memory on free automaticallythats not what gfree does at all its a mitigation technique for top quote from of on april pmcould also look into asn for poisoned memory delimiters like hardened tor browser didopenbsd has this too its called guard pages and or malloc canaries . kmf is completely right fuzzing is an extremely useful tool for finding exploitable bugs while fuzzing alone is not sufficient to just pump out day after day with enough computing power and time you can find a large amount of exploitable bugs in popular programs which were never found before of course you need to be experienced with exploit development to turn a simple crash into something which reliably executes your shellcode but it is completely true that a fuzzer can be used to mine for ore used to make days fuzzing is not random brute forcing btw it is far more complex than that would brute forcing be able to synthesize large entirely valid jpeg files from thin air like so regarding trinity theres something else you might like even better trinity itself just spits out random well sensual but random shit at syscalls but it doesn have any idea what is going on in the kernel there is another project called syzkaller which is an instruments syscall fuzzer its like all american fuzzy lop the instruments binary fuzzer combined with trinity while i havent tested it out myself it seems like it will yield some pretty damn impressive results especially against those terrific syscalls with non eligible attack surface areas but which are too race or lucky to fuzz reflectively with trinity like fate speaking of which if you dont mind kernel patching you should really patch out all the pi fate operations just saying . there is a process called fuzzing and it essentially involves feeding random or not so random inputs into a program in a brute force fashion and waiting for it to crash when it crashes you can look at the input that caused it to crash and this will show you a bug in the program which may be a security bug its apparently at least a dos bug since it crashed the application though if it is exploitable by an attacker is another question the limit on fuzzing applications is computation the more computation power you have the more inputs you can test the more inputs you can test the more likely you will end up crashing the program the more times you crash the program the more bugs you find this is essentially mining for zero days i heard the fbi was spending millions of dollars on a data center full of servers with the goal of cracking encryption and at first i thought to myself i bet they are just going to do brute force attacks on people who use shifty passwords this is still a realistic possibility seeing as many people use passwords that can be cracked even when they think their passwords are good enough but today im wondering if they are going to turn it into a massive fuzzing operation for finding zero days to bypass encryption on the application layer . give been trying to make a guide on securely hosting hidden services so far give mostly been doing research and im running into all kinds of questions that make me pretty indecisive really i have a basin idea of what i will configure opened tor router design server with xen vm containing nine web server with green kernel and rbac for nginxthe nginx box not having a direct path to the internet but being accessible through ssh from the tor router which has an interest connection and ssh with the tor router running a hidden service that forwards to the nginx box then hardening a pip site with cassi which is an nine waf web app firewall that whitelists behaviors in learning mode and then blocks all recognized behaviors in enforcing mode which hardens the website from being pent however i also want to protect from someone with local access to the servers which is where things get really tricky for one i will need to encrypt the link between the tor router and the nginx box because the tor router will strip all the tor encryption before forwarding traffic over the lan to the nginx box and likewise there wouldn be any implied encryption between the nginx box and the tor router so an attacker who could tap the link between them could see all the communications i will just use ash tunneling between them to encrypt the link i think i wanted to use ramcrypt but it looks like that will be tricky because it doesnt run in virtual machines due to lacking true register access and from what give been told it will not work on a hypervisor binary so cant encrypt the entire vm memory with it i think virtual isolation of nginx to isolate attackers from hardware aerial numbers physical isolation of tor router protects from external ip address is more important than encrusted ram i will use better intitramfs on at least the nginx box which allows for ash access between reboots even with fde and will certainly do at least basin fde but ugh then the problem arises that well we have a less protected tor process on the openbsd box i guess i could use a design tor router with green pax patched kernel to get no bit and aslr but i think openbsd is superior in all ways here other than lacking in terms of the drive encryption that can be used and its like ugh what is the point of using fde on the nginx box if we have the tor process with the private key for the hs still being exposed i mean an attacker who takes control of that box can then get into the nine box anyway or at least see the plaintext traffic being forwarded to tor not to mention take complete control of the hidden service or tamper with traffic in transit it kind of cancels out the benefit of using fde in the first place on the nginx box at least from an active attacker also what about protection from dma attacks and like how are we going to protect from the attacker with possession of the server they could do cold boot attack against it to get de keys i think we could use tresor on the host to protect the drive contents still i will need to look more into tresor tresvisor ramcrypt to determine what to do here really we would also have chassis intrusion detection switch set to wipe and power down if the chassis is reached but how can we get access to the state of this from the os there are various possibilities here but many of them have negative security implications chassis intrusion sensorthe sys intsw sensor is asserted when the servers top cover is removed while power is being applied to the server this is an improper service action so this sensor serves to alert you to any authorized and inadvertence removal of the servers cover thus this sensor enables system administrators to have confidence that the physical integrity of the server has not been violated this is particularly beneficial when the server is in a remote or controlled location note the server can not be powered on when the server top cover is off and the sys intsw sensor is asserted if the servers top cover is removed while the server is powered on the host will immediately employ a non graceful shutdown to power off the server but this brings up the next point are we going to want to use colocation with a server sent in to a data center or a data center provided serve using colocation has many security advantages we can configure everything ourselves and not trust that the data center provided os hasnt a rootkit on it we can block off or not include ports that allow for dma we can harden the physical security of the chassis itself to make it harder to penetrate in encapsulate the ram get steel chassis lock the chassis and can configure a chassis intrusion detection switch it has many negative aspects too though need to protect from getting fingerprints hairs dna on the case need to anonymously purchase all of the hardware need to anonymously ship the server into the data center using a dedicated server provided by the data center is more convenient but it poses a host of security questions can you trust the default installation of the os do they have him switches hooked up to the system that allow them to monitor it in its normal operation but the big benefit is the only path back to you from the server is payment which is easy enough to anonymize and the tor circuit you use to access it which is just a given there is not risk that the actual hardware itself can somehow be linked to you either through aerial numbers in purchase records or dna etc left on the machine during configuration or the return address postmark on the package the server is sent in in primarily like to discuss the tradeoffs between colocation and getting a data center provided os but in general i would like to brainstorm about hidden service security here like lets think about the various options and the tradeoffs and decide what the best course of action is the primary trade off in seeing in the choices we can make is protection from attackers who have already locked the server and protection from attackers who have not yet locked the server choices we can make to harden from one sort of attacker are tending to degrade security from the other sort of attacker was thinking i could actually also do tommy isolation of the nginx box exposed networking card of the tor router passing it through to a different os to get network stack isolation would need to look into how this would exactly look with a hidden service but i can imagine it with socksports anyway but that actually will not work on openbsd probably so that is actually something else against it but really i think just using openbsd as the os of the tor router is fine without needing to isolate network stack like that besides there are ways to break out of even state iommu isolation during reboots in some cases this is beyond my ability to really understand but joanna rutkowska has a paper on it something to do with interrupts during the early boot cycle before the device is isolated . there is a process called fuzzing and it essentially involves feeding random or not so random inputs into a program in a brute force fashion and waiting for it to crash when it crashes you can look at the input that caused it to crash and this will show you a bug in the program which may be a security bug its apparently at least a dos bug since it crashed the application though if it is exploitable by an attacker is another question the limit on fuzzing applications is computation the more computation power you have the more inputs you can test the more inputs you can test the more likely you will end up crashing the program the more times you crash the program the more bugs you find this is essentially mining for zero days i heard the fbi was spending millions of dollars on a data center full of servers with the goal of cracking encryption and at first i thought to myself i bet they are just going to do brute force attacks on people who use shifty passwords this is still a realistic possibility seeing as many people use passwords that can be cracked even when they think their passwords are good enough but today im wondering if they are going to turn it into a massive fuzzing operation for finding zero days to bypass encryption on the application layer . they have been around since but yeah that is the key of them a crash in a program is indicative of something that is potentially exploitable fuzzers hammer away at programs until they crash and then they make note of what they did to crash them its certainly a bug identified since programs never supposed to crash but it still requires analysis to see if it is exploitable . just wan a comment on some of these quote from of on april pmbetter initramfs allows remote fde with linuxremote attestation is hard good luck with that privatecore has some interesting papers linked on their site which are related to their own efforts for remote attestation you may want to check those out quote from kmf on april pmramcrypt allows partial ram encryption and protects from dma attacks cold boot but doesn work in a vm or on a vm binarythis isnt entirely true it only protects from passive dma attacks obviously if an attack pumps malicious code into memory to be executed in ring it can strip all the encryption it wants and read the key and everything but it will protect from basin passive dma such as that used by basin academy attacks like the trebble device as for not working on a vm i know this is true with qemu with kvm at least qemu in emulation mode is different it works but it is unusable slow with ramcrypt with animal protection settings it still takes minutes or more to boot tails a workaround which uses tresor however is possible you can set the memory for qemu to a low value such as mib or lower depending on the os then create either dev ram or use fallocate to create a large empty file in a tops filesystem encrypt that large empty file or device which should be several gigabytes at least with tremor note that tresor only works with simple encryption modes like cbc plain do not try to use it with cic essiv or any its modes that will screw things up rascally be familiar with tresor before you do this then set qemu to use the encrusted mapper device with the option if virtio in qemu it should appear as de vda simply format that with mkswap and use swapon on it then set am swappiness and youre good to go this is rascally a makeshift cryptkeeper google cryptkeeper ram pdf using qemu and tresor but it works its less efficient than ramcrypt but it works with kvm i use this for my own device quote from of on april pmtresvisor tresor bitvisor hypervisor with iommu to protect from dma attackstrevisor only protects against dma attacks target at the hypervisor which stores the encryption keys this means ma attacks can still go after the guest os but it can not store the keys inside unfortunately nested vt d is not supported yet nag the bitvisor guys to get it working or do it yourself and you should be able to protect from dma on the guest as well quote from kmf on april pmsel formally verified hypervisor on arm only i think nearly guaranteed no non hardware layer penetration through itsel also supports x quote from of on april pmiommu a way of isolating hardware to a virtual machine so limit its ability to compromise the host though there are advanced techniques for getting around this during reboots before it is isolated default an iommu wont lock hardware to a virtual machine to do this you need to use a different technology which utilizes the iommu called vfio if your kernel doesnt support vfio theres also pci passthrough but you have to be very careful with that because it wont automatically map out the hierarchy so you could easily end up binding a device which could trivially bypass your protections because its part of an iommu group which is not fully locked down it could simply ask its neighbor pci device to ask the root pci device to initiate dma if it itself is being blocked whereas vfio guarantees that the entire group of devices all the way to the root hub is locked down quote from of on april mother things we could consider are like the intel security flags i have little experience with any of these features other than it d iommu but there is like txt sgx etc is there anything we can do with this unfortunately i dont have on the two very old servers i have for configuring things on the ability to experiment with these also what about tpms could we get use from that txt is used with the tpm and can help provide remote attestation theyre rascally useful for integrity checking though they obviously have their downsides read some of the papers linked on the privatecore website for how the txt is used for remote attestation also note that lots of people are afraid of the tpm but you dont need to really worry about it its a very limited device which isn even capable of sending interrupts to the cpu as for sgx thats only present in very new systems specifically intel skylake cpus its used to create a secure enclave which is encrusted the intel management engine sets up the key lets hope the key generation method is secure it does have a hardware rng but meh and then aes ni is used for encryption it ensures that even ring can not decrypt the enclaves unfortunately it requires programs using it to be designed to use it so it does take a good amount of work in theory it could even be used to encrypt an entire kernel or even an entire os but that would take a good bit of work specifically a way to get i o to work without breaking the security model sadly while skylake does have lots of neat new security features still ew x like mpx and sgx it also comes with the new intel innovation engine on xeons which is like the intel me but for oems what could possibly go wrong and the new clflushopt instruction which is totally useless for of people yet makes side channel attacks against the l cache and other hardware bugs prime probe flush reload flush flush rowhammer etc far more efficient also mpx has a nasty perf hit when its actually used i have mentioned privatecore a few times so ill say a few more things about them theyre a company which sells vpses for month unfortunately their tech is closed source but they have come up with some pretty incredible breakthroughs which are very elegant to this thread specifically they have managed to reduce the tcb trusted computing base or the part of a computer which has to be compromise for the rest to be compromise to the cpu itself the rest including the ram and everything can be totally pent and the computer will at worst crash though super clever attacks are still possible but they are likely much harder than simply attacking the cpu directly while their exact methods are a secret from what give gathered from reading various whitepapers theyve managed to shrink the linux kernel to around mib and modified it enough that it can be safely locked to the cpus l cache the entire ram is then encrusted and the crypto is accelerated with as ni the encryption keys are stored somewhere else perhaps in debug or profile registers or maybe in the cache along with the kernel combine that with clever use of intel txt and youve got a very small tcb where even the ram is not trusted and then this light kernel acts as a hypervisor for a more bloated system of your choice which runs in the fully encrusted memory now i done mean to advertise for them because i dont know how trustworthy they are but its an interesting idea and perhaps one day one of us can work towards implementing something similar to that i may work on implementing something similar in the near is future maybe if i find the time with custom dimm slots which encrypt decrepit memory contents with the simon block cipher of course that doesnt solve the problem of attestation but weve got things like bootguard to cover that to some extent and of course vt d can help us with ma anyway those are just my thoughts . another thing to consider is possibly compiling the web server nginx and possibly other software with clang with safestack it looks like gcc in the process of also implementing a version called mitigate rop may harden from rop the person i learned this technique from though said it is questionable if this should be done or not because it is so new pretty much can be considered an alpha stage compiler security flag . pretty sure opened zeros memory on free automatically grsecurity has the ability to do this too could also look into asn for poisoned memory delimiters like hardened tor browser did but that had some controvery associated with it that i would want to familiarize myself with that is something to look into as well though now that you mention it actually if it has memory leaks like firefox it is probably not fit for using that technique on a production server hardened tor browser ends up using all memory in no time but im not sure if that would be an issue for nine depending on how it is implements maybe it preallocates all the memory it ever needs . i think would definitely want to use bridges and pluggable transports for a hidden service to try to disguise it as such from the data center i wouldnt want the data center i use to become aware that they are hosting a popular hidden service because they could let le know for one and for two its easy to do confirmation attacks at that point also going to cover anonymous payments and hiding that you use to during your communications with the hosting provider like you dont want tor to ever be a thought in their mind related to you so exit membership concealment when communicating with them buying the colocation dedi and entry membership concealment of the hidden service . first there was tresor which kept encryption keys in cup registers instead of ram to protect from cold boot attacks then there was tresvisor which kept encryption keys in cpu registers plus used iommu to protect from ma attacks on ram now there is ramcrypt which keeps keys in cpu registers protects from dma attacks and also encrypts the majority of ram used by a process with the flag set on it present ramcrypt a solution that allows modified linux processes to transparently work on encrusted data ramcrypt can be deplored and enabled on a per process basis without recompiling user mode applications in every enabled process data is only stored in cleartext for the moment it is professed and otherwise stays encrusted in ram in particular the required encryption keys do not reside in ram but are stored in cpu registers only hence ramcrypt reflectively thwarts memory disclosure attacks which grant authorized access to process memory as well as physical attacks such as cold boot and dma attacks in its default configuration ramcrypt exposes only up to memory pages in cleartext at the same time for the nine web server serving encrusted pages under heavy load the necessary tls secret key is hidden for of its time fde is really making some significant improvements too bad they are involving pretty esoteric configurations and moderately advanced linux skills to actually use so far in patching and compiling your own kernel there is also improvement from bootkit attacks with encrusted boot btw you can encrypt all but the first stage of the bootloader now . quote from toctou on april amsubgraph has a ways to go still because one of their primary tools oz is still far from being complete glad you came here pretty sure i know who you are the person who taught me about ramcrypt to begin with probably the best security person to ever grace such a forum or at least in the top . gfree was one of the techniques looked at for use in gcc as a possible implementation for their fmitigate rop option unfortunately its yet another one of those academy cfi implementations though i guess this cant really be called cfi but it serves the same purpose which looks good on paper but doesn work well in the real world well instead need to wait for something like paxteams rap which is a true low overead rop implementation unlike gfree or safestack and friends or existing popular implementations like microsofts cfg or xfi which do not protect against an attacker who is able to gain full control of the return address on the upside we can always adjust our threat models and ensure sensitive applications have adequate privsep so gaining control of a sensitive application with rop provides little for an attacker quote from the real sigaint link topic msg msg expect to be under surveillance afterwards so act accordingly another benefit is that you will know about the raid you may even see warning signs if you look carefully enough a colocation cage could be outwitted with cameras hidden in the cases of other non related servers i e other customer servers a neat place to hide a camera in the chassis would be in an eprom on a pai device and i dont mean an eeprom but the older eproms that had windows on them many of them had windows which you couldnt see through but which would be perfect for hiding a tiny camera because they already have an excuse for having black glass it could be covertly installed on a generic pci device facing towards wherever the system is most likely to be opened up this also would allow you to notice tampering much more easily than if theres some big obvious surveillance camera which would immediately tell any adversary not to give away their full arsenal of tricks there are other neat things you could hide in a computer like a gps receiver both for accurate time reception and for detecting interdiction accelerometer for detecting tampering and immediately shutting down to avoid attacks a microphone to listen to nearly conversations etc quote from the real sigaint link topic msg msg a cluster of vs work really well to fix the shortcomings of xorg in the workstation arena and limit damage if when an attacker gets inside but it wont save you from exploits upon xen itself look at the huge cve list or bugs in vt x vt d txt amd v iommu popcnt or the other giant pile of cup extensions that have countless erratas i certainly agree that hypervisors are not a security solution but can you name any specific severe security erratas in non ring instructions in recent times all of the ones i am aware of are either extremely mild incredibly racy or require access to ring and going from ring deeper is really not that interesting once an attacker gets ring getting smm or getting into the me is not unexpected in the least . i think would definitely want to use bridges and pluggable transports for a hidden service to try to disguise it as such from the data center i wouldnt want the data center i use to become aware that they are hosting a popular hidden service because they could let le know for one and for two its easy to do confirmation attacks at that point also going to cover anonymous payments and hiding that you use to during your communications with the hosting provider like you dont want tor to ever be a thought in their mind related to you so exit membership concealment when communicating with them buying the colocation dedi and entry membership concealment of the hidden service . another thing to consider is possibly compiling the web server nginx and possibly other software with clang with safestack it looks like gcc in the process of also implementing a version called mitigate rop may harden from rop the person i learned this technique from though said it is questionable if this should be done or not because it is so new pretty much can be considered an alpha stage compiler security flag . quote from the real sigaint on april pmquote from of on april amhowever i also want to protect from someone with local access to the servers which is where things get really tricky for one i will need to encrypt the link between the tor router and the nginx box because the tor router will strip all the tor encryption before forwarding traffic over the lan to the nginx box and likewise there wouldn be any implied encryption between the nginx box and the tor router so an attacker who could tap the link between them could see all the communications i will just use ash tunneling between them to encrypt the link i think ipsec might be better here especially on the opened side of things it integrates with of very nicely quote from of on april ami wanted to use ramcrypt but it looks like that will be tricky because it doesnt run in virtual machines due to lacking true register access and from what give been told it will not work on a hypervisor binary so cant encrypt the entire vm memory with it i think virtual isolation of nginx to isolate attackers from hardware aerial numbers physical isolation of tor router protects from external ip address is more important than encrusted ram if you dont have physical access to the hardware you have lost seriously you can layer on million more lines of code and turn your vt d iommu on and youll still lose if they get their hands on the hardware i promise if they find your gear in a colo they will hot splice the power and pick it all up while it is running and carry it away a chassis alarm bypass is trivial and ram encryption isnt fool proof complexity is also the enemy of security this is more stuff to maintain and more stuff to go wrong if your threat model is a well founded adversary you are sucked if they get their hands on the hardware buying the hardware with cash or buying it used with cash is even better that will solve your aerial number problems spoof all mac addresses for extra points use octets for nics that are not the vendor you are using use the normal stealth with the isp you select you have already mentioned the good ones buy hardware that doesnt have lintel me amt or amds psp this means you will have older hardware so you might need more of it keep this in mind mix system architectures example run x for your servers and something big endian like sparc for your routers this will frustrate the hell out of any exploit writer who blindly assumes the entire world is an intel amd box if you control the building it is all in you can fortify it get guard dogs add building perimeter alarms that trigger the wiping of disk keys wipe ram etc add a panic button for any and all staff be creative if all of that fails have yourself set up with a legal framework that will put them on the hot coals and not yourself in most countries you do still have some rights use them done talk to police ever use common carrier laws question the judge that signed the warrant dismiss their allegations by claiming defective paperwork if possible what are your thoughts on colocation versus data center provided dedicated servers i think keeping the server in your physical possession is too much of a risk tbh i would not want to extend my attack surface area by that of a hidden service would rather isolate myself from it the primary disadvantage of colocation is the attack surface of the isolation layer is increased versus using a dedicated server from the data center where it is essentially just payment network you have a good point re aerial numbers like maybe if you are using physical isolation virtual isolation is less important provided you are certain that an attacker with root on the host can not get any aerial numbers that could assist them in locating the server though there are still benefits to using virtual isolate and containing the attacker if they manage to penetrate into the web serve primarily it is easier to shove them out of their foothold provided they dont penetrate out of the hypervisor . first there was tresor which kept encryption keys in cup registers instead of ram to protect from cold boot attacks then there was tresvisor which kept encryption keys in cpu registers plus used iommu to protect from ma attacks on ram now there is ramcrypt which keeps keys in cpu registers protects from dma attacks and also encrypts the majority of ram used by a process with the flag set on it present ramcrypt a solution that allows modified linux processes to transparently work on encrusted data ramcrypt can be deplored and enabled on a per process basis without recompiling user mode applications in every enabled process data is only stored in cleartext for the moment it is professed and otherwise stays encrusted in ram in particular the required encryption keys do not reside in ram but are stored in cpu registers only hence ramcrypt reflectively thwarts memory disclosure attacks which grant authorized access to process memory as well as physical attacks such as cold boot and dma attacks in its default configuration ramcrypt exposes only up to memory pages in cleartext at the same time for the nine web server serving encrusted pages under heavy load the necessary tls secret key is hidden for of its time fde is really making some significant improvements too bad they are involving pretty esoteric configurations and moderately advanced linux skills to actually use so far in patching and compiling your own kernel there is also improvement from bootkit attacks with encrusted boot btw you can encrypt all but the first stage of the bootloader now . quote from of on april pmquote from toctou on april amsubgraph has a ways to go still because one of their primary tools oz is still far from being complete glad you came here pretty sure i know who you are the person who taught me about ramcrypt to begin with probably the best security person to ever grace such a forum or at least in the top i am smart vs a retard . quote from the real sigaint on april pmquote from of on april pmanother thing to consider is possibly compiling the web server nginx and possibly other software with clang with safestack it looks like gcc in the process of also implementing a version called mitigate rop theres also gfree well if i wanted to edit the source code i guess i could add my own secureallocate and securefree with poisoned memory delimiters and zero on free with assembly memory barriers code select allocation functions allocates requested bytes with two poisoned delimiters to prevent linear buffer overflows p b p every allocation is at least memory pages two delimiters and at least one for request typical bytes additional memory cost is the remainder of bytes less than a page returns pointer to first non poisoned byte on success or null pointer on errorstatic void secureallocate size t bytesrequested int requiredpages void membuff for delimiters requiredpages bytesrequested page bytesize if bytesrequested wasnt an exact multiple of page bytesize if bytesrequested page bytesize requiredpages if bytesrequested printf error can not allocate less than one byte of memory return null if six memalign membuff page bytesize requiredpages page bytesize print error failed to allocate memory return null memset membuff requiredpages page bytesize if protect membuff prot none mprotect membuff requiredpages page bytesize prot none printf error failed to poison delimiters too clean return null return membuff page bytesize free functions returns on success and on error memoryclear is passed a void pointing to bytesize bytes clears each byte by setting to implements because the memset solution in mem c causes compiled warnings this should do the same thing without compiler warning state int memoryclear void memorypointerv size t bytesize volatile uint t memorypointer null if memorypointerv null printf error something was null that shouldnt have been return memorypointer memorypointerv while bytesize memorypointer return note memorypointerpointer must be a void despite being a void in the function definition returns on success and on error passed a void that casts to a void that points to a pointer pointing to bytesize bytes sets each byte to null in compliance with me c frees the memory and points the pointer to null superficial testing confirms memory is freed pointer is set to null and memory is cleared though more in depth testing of memory cleared is required todo preferable the memory clearing function will be replaced with explicit bzero memset s memzero explicit or similar or at least the custom implementation will be verified as not optimized out however using a volatile pointer in compliance with me c and also using a memory barrier as suggested by various security experts state int securefree void memory size t bytesize void memorycorrectcast void databuffer this function is actually passed a void declared void in function definition for technical reasons memorycorrectcast void memory basin sanity checks if memorycorrectcast null printf error something was null that shouldnt have been return if bytesize printf error zero bytes of memory is invalid return prepare to clear memory buffer databuffer void memorycorrectcast clear memory buffer volatile pointer in compliance with mem c if memoryclear databuffer bytesize print error failed to clear memory buffer return attempt to ensure that memory clear is not optimized out memory barrier in compliance with asm volatile r databuffer memory tested with valgrind as correctly freeing memory free memorycorrectcast page bytesize tested to confirm proper pointer set to null in compliance with me c memorycorrectcast null return . quote from b mb m on april pmfuzzing with automatic tools pretty stupid way to find zero days even is not you can find plenty free exploits on www ex exploit db combrute force never be wise choise to select in pretty sure legal guys think same thing too and many of those exploits are against vulnerabilities originally found with fuzzers just look at any security advisory researcher nils used the address sanitizer tool while fuzzing to discover missing strong references in browsing engine leading to use after frees this can lead to a potentially exploitable crash of course you can find vulnerabilities by hand as well and in other fashions but the thing about fuzzers is if you run them for long enough they will eventually spit out vulnerabilities that havent been patched yet trinity is a fuzzer i learned about recently when i get around to studying fuzzing more in depth it is likely the one i will start with for finding kernel vulnerabilities basin idea is fairly simple as buzz testing suggests we call syscalls at random with random arguments not an original idea and one that has been done many times before on linux and on other operating systems where trinity differs is that the arguments it passes are not purely random we found some bugs in the past by just passing random values but once the really dumb bugs were found these dumb fuzzers would just run and run the problem was if a syscall took for example a file descriptor as an argument one of the first things it would try to do was validate that fd being garbage the kernel would just reject it as einval of course so on startup trinity creates a list of file descriptors by opening pipes scanning sysfs procfs dev and creates a bunch of sockets using random network protocols then when a syscall needs an fd it gets passed one of these at random file descriptors arent the only thing trinity knows about every syscall has its arguments annotated and where possible it tries to provide something at least semi sensible length arguments for example get passed one of a whole bunch of potentially interesting values trinity also shares those file descriptors between multiply processes which causes havoc sometimes if a child process successfully creates an mmap the pointer is stored and fed to subsequent syscalls sometimes with hilarious results trinity supports alpha aarch arm i ia mips powerpc power s s x sparc x adding support for additional architectures is a small amount of work mostly involving just defining the order of the syscall table see documentation hacking for details quote there are almost always new kernel bugs being trigger by trinity i used to maintain a list of the bugs found fixed but it got to be too much work to keep track of sometimes trinity causes the oom killer to trigger as long as the oom killer picks the right process ie one of the trinity children and not dbus or networkmanager etc then this is working as designed theres a fair amount of noise printks in the kernel that trinity triggers i keep a set of patches to remove the most common ones in git it should always apply to linus latest tree for older kernels you may have to fix up some parts if you do find and report a new kernel bug please cc me and mention that you found it with trinity one of my ira contacts fuzzes his own system and mutually patches vulnerabilities as he finds them he legit scares me with how leet he is th . much better good stuff . nice km thats alot of information there good dig . quote from of on april pmgrsecurity is probably the most important security patch for linus any word on when subgraph is coming out of alpha . quote from the real sigaint on april pmquote from of on april amhowever i also want to protect from someone with local access to the servers which is where things get really tricky for one i will need to encrypt the link between the tor router and the nginx box because the tor router will strip all the tor encryption before forwarding traffic over the lan to the nginx box and likewise there wouldn be any implied encryption between the nginx box and the tor router so an attacker who could tap the link between them could see all the communications i will just use ash tunneling between them to encrypt the link i think ipsec might be better here especially on the opened side of things it integrates with of very nicely quote from of on april ami wanted to use ramcrypt but it looks like that will be tricky because it doesnt run in virtual machines due to lacking true register access and from what give been told it will not work on a hypervisor binary so cant encrypt the entire vm memory with it i think virtual isolation of nginx to isolate attackers from hardware aerial numbers physical isolation of tor router protects from external ip address is more important than encrusted ram if you dont have physical access to the hardware you have lost seriously you can layer on million more lines of code and turn your vt d iommu on and youll still lose if they get their hands on the hardware i promise if they find your gear in a colo they will hot splice the power and pick it all up while it is running and carry it away a chassis alarm bypass is trivial and ram encryption isnt fool proof complexity is also the enemy of security this is more stuff to maintain and more stuff to go wrong if your threat model is a well founded adversary you are sucked if they get their hands on the hardware buying the hardware with cash or buying it used with cash is even better that will solve your aerial number problems spoof all mac addresses for extra points use octets for nics that are not the vendor you are using use the normal stealth with the isp you select you have already mentioned the good ones buy hardware that doesnt have lintel me amt or amds psp this means you will have older hardware so you might need more of it keep this in mind mix system architectures example run x for your servers and something big endian like sparc for your routers this will frustrate the hell out of any exploit writer who blindly assumes the entire world is an intel amd box if you control the building it is all in you can fortify it get guard dogs add building perimeter alarms that trigger the wiping of disk keys wipe ram etc add a panic button for any and all staff be creative if all of that fails have yourself set up with a legal framework that will put them on the hot coals and not yourself in most countries you do still have some rights use them done talk to police ever use common carrier laws question the judge that signed the warrant dismiss their allegations by claiming defective paperwork if possible the cut of your jib is of topnotch id you again but that will have to wait until tomorrow . kmf is completely right fuzzing is an extremely useful tool for finding exploitable bugs while fuzzing alone is not sufficient to just pump out day after day with enough computing power and time you can find a large amount of exploitable bugs in popular programs which were never found before of course you need to be experienced with exploit development to turn a simple crash into something which reliably executes your shellcode but it is completely true that a fuzzer can be used to mine for ore used to make days fuzzing is not random brute forcing btw it is far more complex than that would brute forcing be able to synthesize large entirely valid jpeg files from thin air like so regarding trinity theres something else you might like even better trinity itself just spits out random well sensual but random shit at syscalls but it doesn have any idea what is going on in the kernel there is another project called syzkaller which is an instruments syscall fuzzer its like all american fuzzy lop the instruments binary fuzzer combined with trinity while i havent tested it out myself it seems like it will yield some pretty damn impressive results especially against those terrific syscalls with non eligible attack surface areas but which are too race or lucky to fuzz reflectively with trinity like fate speaking of which if you dont mind kernel patching you should really patch out all the pi fate operations just saying . quote from arcane on april amquote from of on april amon the plus side fbi knows fuck all too doesn stop them prosecuting people though their ignorance is no barrier to securing convictions it seems yeah but for example look at the played cp bust they pwnt between of targets depending on how you look at the available information if they actually were very advanced they would have gotten nearly of them the most advanced application layer attackers can cut through almost anything to get to you if they have a direct application layer path to you for example there is little doubt that nsa could deanonymize nearly this entire forum if they wanted to they couldnt do it with traffic analysis but they could chain a zero day for this forum with zero day for tor browser with zero days for popular hypervisors and the linus kernel etc like it would be an extraordinarily sophisticated attack but its in the reach of the nsa to pwn probably close to of active posters on this forum if you use physical isolation they also need zero day against tor over the socksport though . im making one for openbsd now too which has many of the same advantages but is probably easier to maintain im going to use the openbsd one for a tor router in a guide im simultaneously working on for secure hidden services but of secure hidden services is such an involved topic like im sorry to say but give gotten to a point of security knowledge where i realize how little i actually know and it is fucking scarf some of the hackers i talk with in irc are on some next level shit it really makes me moderately afraid tbh because its like these guys are security gods and even they are aware of how little they know like when i was running sensitive hidden services i thought i was pretty let but i was actually making a lot of mistakes and not thinking about things as well as i am today by a long shot but i realize in a year or two i will look at myself today and say the same thing everyone on these forums i would say should come to the understanding that all of us are pretty shifty at security in reality like we are not even touching on the security systems that the people on the cutting edge are using tbh if you are not fuzzing all of your applications and patching zero days before they are disclosed then you are not at the cutting edge . quote from plunderinpete on march much better good stuff i told you i just posted my notes the first time . quote from aethon on march pmnice km thats alot of information there good dig now to make guide for secure hidden services because someone i know wants help to configure one and then after that i make guide for making a workstation for this in sure it can be improved etc etc but i think it is a good starting framework for people at least as i get better at rbac over the hidden service configuration and workstation configuration i will probably edit that part a bit for rc rbac is pretty involved but its sucking gamesome too you can see everything happening on the system and approve or block it pax and the other grsec features are easy to use though pax only need to know like two commands and flags to use it and it significantly increases security prevents many buffer overflow attacks from working and makes others probabilistic rather than definite compromises grsec has many other hardenings too though like it clears memory after it is freed etc it gives a lot of the security features of openbsd as a patch for the linux kernel an rbac system maybe i will also make an opened tor router guide cuz that will actually be easier and rbac isn super important for a tor router though does give some benefits but i primarily wanted to learn rbac and grsec because i will definitely use them for the workstation and hidden service openbsd is great for a router but for workstation and hidden service i want to use design for sure . quote from the real sigaint on april pmquote from of on april pretty sure opened zeros memory on free automaticallythats not what gfree does at all its a mitigation technique for top quote from of on april pmcould also look into asn for poisoned memory delimiters like hardened tor browser didopenbsd has this too its called guard pages and or malloc canaries i didnt think it zero memory i was making reference to my securefree function i never heard of gfree before when i looked it up i found gnufree which is a function haired with gmalloc which is simply allow that calls exit on oom which seemed like a completely boring function to me and made me wonder why you suggested using it do you have a link to gfree no found it . . quote from kmf on march pmalso in security thats what i call formatting . quote from of on april amon the plus side fbi knows fuck all too doesn stop them prosecuting people though their ignorance is no barrier to securing convictions it seems . ill also mention that in my opinion there is possibility of diminishing returns if you seek perfect technical security isolation and anonymity if you were dealing in a vacuum with only machines that would be fine but you have to realize eventually your going to stick out and draw more attention from the humans that have to becomes invariably involved when you require customization and oversight i prefer to think of opsec as a risk mitigation strategy rather than a religion ymmv the peak level of technical anonymity along with least wave making exposure and being remembered for any reason is probably a dedicated server at a vps or mailing in a u unit to a co location outfit so long as you can pay them in some fashion that doesnt link directly to you pretty face . on the plus side fbi knows fuck all too . quote from of on april pmim making one for openbsd now too which has many of the same advantages but is probably easier to maintain im going to use the openbsd one for a tor router in a guide im simultaneously working on for secure hidden services but of secure hidden services is such an involved topic like im sorry to say but give gotten to a point of security knowledge where i realize how little i actually know and it is fucking scarf some of the hackers i talk with in irc are on some next level shit it really makes me moderately afraid tbh because its like these guys are security gods and even they are aware of how little they know like when i was running sensitive hidden services i thought i was pretty let but i was actually making a lot of mistakes and not thinking about things as well as i am today by a long shot but i realize in a year or two i will look at myself today and say the same thing everyone on these forums i would say should come to the understanding that all of us are pretty shifty at security in reality like we are not even touching on the security systems that the people on the cutting edge are using tbh if you are not fuzzing all of your applications and patching zero days before they are disclosed then you are not at the cutting edge i find your contributions here both scarf and information knowledge is power though so at least we all know we know luck all . quote from toctou on april amsubgraph has a ways to go still because one of their primary tools oz is still far from being complete glad you came here pretty sure i know who you are the person who taught me about ramcrypt to begin with probably the best security person to ever grace such a forum or at least in the top . gfree was one of the techniques looked at for use in gcc as a possible implementation for their fmitigate rop option unfortunately its yet another one of those academy cfi implementations though i guess this cant really be called cfi but it serves the same purpose which looks good on paper but doesn work well in the real world well instead need to wait for something like paxteams rap which is a true low overead rop implementation unlike gfree or safestack and friends or existing popular implementations like microsofts cfg or xfi which do not protect against an attacker who is able to gain full control of the return address on the upside we can always adjust our threat models and ensure sensitive applications have adequate privsep so gaining control of a sensitive application with rop provides little for an attacker quote from the real sigaint link topic msg msg expect to be under surveillance afterwards so act accordingly another benefit is that you will know about the raid you may even see warning signs if you look carefully enough a colocation cage could be outwitted with cameras hidden in the cases of other non related servers i e other customer servers a neat place to hide a camera in the chassis would be in an eprom on a pai device and i dont mean an eeprom but the older eproms that had windows on them many of them had windows which you couldnt see through but which would be perfect for hiding a tiny camera because they already have an excuse for having black glass it could be covertly installed on a generic pci device facing towards wherever the system is most likely to be opened up this also would allow you to notice tampering much more easily than if theres some big obvious surveillance camera which would immediately tell any adversary not to give away their full arsenal of tricks there are other neat things you could hide in a computer like a gps receiver both for accurate time reception and for detecting interdiction accelerometer for detecting tampering and immediately shutting down to avoid attacks a microphone to listen to nearly conversations etc quote from the real sigaint link topic msg msg a cluster of vs work really well to fix the shortcomings of xorg in the workstation arena and limit damage if when an attacker gets inside but it wont save you from exploits upon xen itself look at the huge cve list or bugs in vt x vt d txt amd v iommu popcnt or the other giant pile of cup extensions that have countless erratas i certainly agree that hypervisors are not a security solution but can you name any specific severe security erratas in non ring instructions in recent times all of the ones i am aware of are either extremely mild incredibly racy or require access to ring and going from ring deeper is really not that interesting once an attacker gets ring getting smm or getting into the me is not unexpected in the least . quote from the real sigaint on april pmquote from of on april amhowever i also want to protect from someone with local access to the servers which is where things get really tricky for one i will need to encrypt the link between the tor router and the nginx box because the tor router will strip all the tor encryption before forwarding traffic over the lan to the nginx box and likewise there wouldn be any implied encryption between the nginx box and the tor router so an attacker who could tap the link between them could see all the communications i will just use ash tunneling between them to encrypt the link i think ipsec might be better here especially on the opened side of things it integrates with of very nicely quote from of on april ami wanted to use ramcrypt but it looks like that will be tricky because it doesnt run in virtual machines due to lacking true register access and from what give been told it will not work on a hypervisor binary so cant encrypt the entire vm memory with it i think virtual isolation of nginx to isolate attackers from hardware aerial numbers physical isolation of tor router protects from external ip address is more important than encrusted ram if you dont have physical access to the hardware you have lost seriously you can layer on million more lines of code and turn your vt d iommu on and youll still lose if they get their hands on the hardware i promise if they find your gear in a colo they will hot splice the power and pick it all up while it is running and carry it away a chassis alarm bypass is trivial and ram encryption isnt fool proof complexity is also the enemy of security this is more stuff to maintain and more stuff to go wrong if your threat model is a well founded adversary you are sucked if they get their hands on the hardware buying the hardware with cash or buying it used with cash is even better that will solve your aerial number problems spoof all mac addresses for extra points use octets for nics that are not the vendor you are using use the normal stealth with the isp you select you have already mentioned the good ones buy hardware that doesnt have lintel me amt or amds psp this means you will have older hardware so you might need more of it keep this in mind mix system architectures example run x for your servers and something big endian like sparc for your routers this will frustrate the hell out of any exploit writer who blindly assumes the entire world is an intel amd box if you control the building it is all in you can fortify it get guard dogs add building perimeter alarms that trigger the wiping of disk keys wipe ram etc add a panic button for any and all staff be creative if all of that fails have yourself set up with a legal framework that will put them on the hot coals and not yourself in most countries you do still have some rights use them done talk to police ever use common carrier laws question the judge that signed the warrant dismiss their allegations by claiming defective paperwork if possible what are your thoughts on colocation versus data center provided dedicated servers i think keeping the server in your physical possession is too much of a risk tbh i would not want to extend my attack surface area by that of a hidden service would rather isolate myself from it the primary disadvantage of colocation is the attack surface of the isolation layer is increased versus using a dedicated server from the data center where it is essentially just payment network you have a good point re aerial numbers like maybe if you are using physical isolation virtual isolation is less important provided you are certain that an attacker with root on the host can not get any aerial numbers that could assist them in locating the server though there are still benefits to using virtual isolate and containing the attacker if they manage to penetrate into the web serve primarily it is easier to shove them out of their foothold provided they dont penetrate out of the hypervisor . i guess what i would like to do is just threat model everything with input from people on the forum like we know all these gamesome tools and techniques that can be used but what is the primal way to go about things like what is the direction we should go better initramfs allows remote fde with linuxramcrypt allows partial ram encryption and protects from dma attacks cold boot but doesn work in a vm or on a vm binarytresor keep encryption key for fde in cpu registertresvisor tresor bitvisor hypervisor with iommu to protect from ma attacksgrsecurity security patch that hardens linus kernelpax provides aslr and no bit implementationsrbac access control system that allows fine grained control of the systemxen hypervisor that allows virtual machines but cant be hardened with rbac due to being below the kernelqemu kvm hypervisor processor emulation that can be hardened with rbacsel formally verified hypervisor on arm only i think nearly guaranteed no non hardware layer penetration through itopenbsd security tormented os that has strong aser no bit implementation built into it along with various other hardenings but lacking in encryption and virtualization supportphysical isolation a way of isolating the tor process from the initials surface exposed to the attacker essentially making a tor routerpluggable transports bridges entry membership concealment for tor might be able to hide that a hidden service is being runnginx a lightweight is web server naxsi a web application firewall for nginxst a very small like loc web server but is this something to actually consider instead of nginx with nearly two hundred thousand loc virtual isolation using a hypervisor to sandbox an attacker in a vm a way of isolating the tor process from the initials attack surface exposed to the attackeriommu a way of isolating hardware to a virtual machine so limit its ability to compromise the host though there are advanced techniques for getting around this during reboots before it is isolatedcolocation sending a server into a data center after you configure it yourselfdedicated serve as i use this term i mean a physical server provided by the data center as opposed to a colocationchassis intrusion detection switch a mechanism by which opening the case of a server can trigger an event typical the immediate shut down of the server to unmount encrusted partitions and clear encryption keysipsec ssh tunnels ways to encrypt the link between two servers these are just some of the words in my head in relation to this process but we can not just say lets do all of them because there are trade offs to consider and some of them are not compatible with each other like okay do we really certainly want to use physical isolation and not virtual isolation for isolating the web server from tor and the external ip address physical isolation is superior in that the attack surface presented is reduced we will certainly need to expose ssh if the server is remote colo or dedi as opposed to having local console access so we can ssh into the internet connected tor router and then ssh into the web server box from there and then we will need to expose tor since it manages the hidden service in the first place but other than that and the network stack of the tor router host there isnt really another path to the external ip address on the application layer that i can think of anyway plus we can isolate the ash client we use to ssh into the ssh server on the web server box so even if it is pwnt the attacker is isolated in a vm on the tor router without access to the external ip address unless they penetrate through that hypervisor however physical isolation requires the use of two servers is less convenient and then we need to think about the security of two boxes too like is there really a point in even using fde on the nginx box if we have the tor process on a box that has no encryption on it but then again like sigaint said maybe we shouldnt even assume that it is possible to protect the content of the drives memory of the servers after they are identified by the attacker and the attacker has physical access to them and it would be nice to use openbsd for the tor router because it has a lot of good security features and is really the perfect os for this use case but it doesnt really have the best encryption support like as far as i know anyway though i only recently learned about better initramfs allowing remote fde for linux without the need for kvm over ip switches which are not secure to use in the first place virtual isolation with like xen virtualizes physical isolation essentially but then there is not only the application layer attack path through the hypervisor to get to the external ip address but also hardware layer paths such as via row hammer the primary benefit of using virtual isolation is simplifying things and keeping everything on a single server there are just a ton of things to consider here and i would appreciate the input of the community in deciding and analyzing the trade offs between these things and together we can decide the best choices to make and after we are done threat modeling everything i will go through the process of configuring it and make a guide on it but as it stands in just ending up pretty indecisive on some of these choices like i could make them myself and ive had some input from hacker ircs but i would like as much input and discussion as possible here as well and also if anyone has any other suggestions to add etc that would be nice as well other things we could consider are like the intel security flags i have little experience with any of these features other than it d iommu but there is like txt sgx etc is there anything we can do with this unfortunately i dont have on the two very old servers i have for configuring things on the ability to experiment with these also what about tpms could we get use from that . quote from the real sigaint on april pmquote from of on april pretty sure opened zeros memory on free automaticallythats not what gfree does at all its a mitigation technique for top quote from of on april pmcould also look into asn for poisoned memory delimiters like hardened tor browser didopenbsd has this too its called guard pages and or malloc canaries i didnt think it zero memory i was making reference to my securefree function i never heard of gfree before when i looked it up i found gnufree which is a function haired with gmalloc which is simply allow that calls exit on oom which seemed like a completely boring function to me and made me wonder why you suggested using it do you have a link to gfree no found it . quote from the real sigaint on april pmquote from of on april pmanother thing to consider is possibly compiling the web server nginx and possibly other software with clang with safestack it looks like gcc in the process of also implementing a version called mitigate rop theres also gfree well if i wanted to edit the source code i guess i could add my own secureallocate and securefree with poisoned memory delimiters and zero on free with assembly memory barriers code select allocation functions allocates requested bytes with two poisoned delimiters to prevent linear buffer overflows p b p every allocation is at least memory pages two delimiters and at least one for request typical bytes additional memory cost is the remainder of bytes less than a page returns pointer to first non poisoned byte on success or null pointer on errorstatic void secureallocate size t bytesrequested int requiredpages void membuff for delimiters requiredpages bytesrequested page bytesize if bytesrequested wasnt an exact multiple of page bytesize if bytesrequested page bytesize requiredpages if bytesrequested printf error can not allocate less than one byte of memory return null if six memalign membuff page bytesize requiredpages page bytesize print error failed to allocate memory return null memset membuff requiredpages page bytesize if protect membuff prot none mprotect membuff requiredpages page bytesize prot none printf error failed to poison delimiters too clean return null return membuff page bytesize free functions returns on success and on error memoryclear is passed a void pointing to bytesize bytes clears each byte by setting to implements because the memset solution in mem c causes compiled warnings this should do the same thing without compiler warning state int memoryclear void memorypointerv size t bytesize volatile uint t memorypointer null if memorypointerv null printf error something was null that shouldnt have been return memorypointer memorypointerv while bytesize memorypointer return note memorypointerpointer must be a void despite being a void in the function definition returns on success and on error passed a void that casts to a void that points to a pointer pointing to bytesize bytes sets each byte to null in compliance with me c frees the memory and points the pointer to null superficial testing confirms memory is freed pointer is set to null and memory is cleared though more in depth testing of memory cleared is required todo preferable the memory clearing function will be replaced with explicit bzero memset s memzero explicit or similar or at least the custom implementation will be verified as not optimized out however using a volatile pointer in compliance with me c and also using a memory barrier as suggested by various security experts state int securefree void memory size t bytesize void memorycorrectcast void databuffer this function is actually passed a void declared void in function definition for technical reasons memorycorrectcast void memory basin sanity checks if memorycorrectcast null printf error something was null that shouldnt have been return if bytesize printf error zero bytes of memory is invalid return prepare to clear memory buffer databuffer void memorycorrectcast clear memory buffer volatile pointer in compliance with mem c if memoryclear databuffer bytesize print error failed to clear memory buffer return attempt to ensure that memory clear is not optimized out memory barrier in compliance with asm volatile r databuffer memory tested with valgrind as correctly freeing memory free memorycorrectcast page bytesize tested to confirm proper pointer set to null in compliance with me c memorycorrectcast null return . just wan a comment on some of these quote from of on april pmbetter initramfs allows remote fde with linuxremote attestation is hard good luck with that privatecore has some interesting papers linked on their site which are related to their own efforts for remote attestation you may want to check those out quote from kmf on april pmramcrypt allows partial ram encryption and protects from dma attacks cold boot but doesn work in a vm or on a vm binarythis isnt entirely true it only protects from passive dma attacks obviously if an attack pumps malicious code into memory to be executed in ring it can strip all the encryption it wants and read the key and everything but it will protect from basin passive dma such as that used by basin academy attacks like the trebble device as for not working on a vm i know this is true with qemu with kvm at least qemu in emulation mode is different it works but it is unusable slow with ramcrypt with animal protection settings it still takes minutes or more to boot tails a workaround which uses tresor however is possible you can set the memory for qemu to a low value such as mib or lower depending on the os then create either dev ram or use fallocate to create a large empty file in a tops filesystem encrypt that large empty file or device which should be several gigabytes at least with tremor note that tresor only works with simple encryption modes like cbc plain do not try to use it with cic essiv or any its modes that will screw things up rascally be familiar with tresor before you do this then set qemu to use the encrusted mapper device with the option if virtio in qemu it should appear as de vda simply format that with mkswap and use swapon on it then set am swappiness and youre good to go this is rascally a makeshift cryptkeeper google cryptkeeper ram pdf using qemu and tresor but it works its less efficient than ramcrypt but it works with kvm i use this for my own device quote from of on april pmtresvisor tresor bitvisor hypervisor with iommu to protect from dma attackstrevisor only protects against dma attacks target at the hypervisor which stores the encryption keys this means ma attacks can still go after the guest os but it can not store the keys inside unfortunately nested vt d is not supported yet nag the bitvisor guys to get it working or do it yourself and you should be able to protect from dma on the guest as well quote from kmf on april pmsel formally verified hypervisor on arm only i think nearly guaranteed no non hardware layer penetration through itsel also supports x quote from of on april pmiommu a way of isolating hardware to a virtual machine so limit its ability to compromise the host though there are advanced techniques for getting around this during reboots before it is isolated default an iommu wont lock hardware to a virtual machine to do this you need to use a different technology which utilizes the iommu called vfio if your kernel doesnt support vfio theres also pci passthrough but you have to be very careful with that because it wont automatically map out the hierarchy so you could easily end up binding a device which could trivially bypass your protections because its part of an iommu group which is not fully locked down it could simply ask its neighbor pci device to ask the root pci device to initiate dma if it itself is being blocked whereas vfio guarantees that the entire group of devices all the way to the root hub is locked down quote from of on april mother things we could consider are like the intel security flags i have little experience with any of these features other than it d iommu but there is like txt sgx etc is there anything we can do with this unfortunately i dont have on the two very old servers i have for configuring things on the ability to experiment with these also what about tpms could we get use from that txt is used with the tpm and can help provide remote attestation theyre rascally useful for integrity checking though they obviously have their downsides read some of the papers linked on the privatecore website for how the txt is used for remote attestation also note that lots of people are afraid of the tpm but you dont need to really worry about it its a very limited device which isn even capable of sending interrupts to the cpu as for sgx thats only present in very new systems specifically intel skylake cpus its used to create a secure enclave which is encrusted the intel management engine sets up the key lets hope the key generation method is secure it does have a hardware rng but meh and then aes ni is used for encryption it ensures that even ring can not decrypt the enclaves unfortunately it requires programs using it to be designed to use it so it does take a good amount of work in theory it could even be used to encrypt an entire kernel or even an entire os but that would take a good bit of work specifically a way to get i o to work without breaking the security model sadly while skylake does have lots of neat new security features still ew x like mpx and sgx it also comes with the new intel innovation engine on xeons which is like the intel me but for oems what could possibly go wrong and the new clflushopt instruction which is totally useless for of people yet makes side channel attacks against the l cache and other hardware bugs prime probe flush reload flush flush rowhammer etc far more efficient also mpx has a nasty perf hit when its actually used i have mentioned privatecore a few times so ill say a few more things about them theyre a company which sells vpses for month unfortunately their tech is closed source but they have come up with some pretty incredible breakthroughs which are very elegant to this thread specifically they have managed to reduce the tcb trusted computing base or the part of a computer which has to be compromise for the rest to be compromise to the cpu itself the rest including the ram and everything can be totally pent and the computer will at worst crash though super clever attacks are still possible but they are likely much harder than simply attacking the cpu directly while their exact methods are a secret from what give gathered from reading various whitepapers theyve managed to shrink the linux kernel to around mib and modified it enough that it can be safely locked to the cpus l cache the entire ram is then encrusted and the crypto is accelerated with as ni the encryption keys are stored somewhere else perhaps in debug or profile registers or maybe in the cache along with the kernel combine that with clever use of intel txt and youve got a very small tcb where even the ram is not trusted and then this light kernel acts as a hypervisor for a more bloated system of your choice which runs in the fully encrusted memory now i done mean to advertise for them because i dont know how trustworthy they are but its an interesting idea and perhaps one day one of us can work towards implementing something similar to that i may work on implementing something similar in the near is future maybe if i find the time with custom dimm slots which encrypt decrepit memory contents with the simon block cipher of course that doesnt solve the problem of attestation but weve got things like bootguard to cover that to some extent and of course vt d can help us with ma anyway those are just my thoughts . quote from of on april pmquote from toctou on april amsubgraph has a ways to go still because one of their primary tools oz is still far from being complete glad you came here pretty sure i know who you are the person who taught me about ramcrypt to begin with probably the best security person to ever grace such a forum or at least in the top i am smart vs a retard . i guess what i would like to do is just threat model everything with input from people on the forum like we know all these gamesome tools and techniques that can be used but what is the primal way to go about things like what is the direction we should go better initramfs allows remote fde with linuxramcrypt allows partial ram encryption and protects from dma attacks cold boot but doesn work in a vm or on a vm binarytresor keep encryption key for fde in cpu registertresvisor tresor bitvisor hypervisor with iommu to protect from ma attacksgrsecurity security patch that hardens linus kernelpax provides aslr and no bit implementationsrbac access control system that allows fine grained control of the systemxen hypervisor that allows virtual machines but cant be hardened with rbac due to being below the kernelqemu kvm hypervisor processor emulation that can be hardened with rbacsel formally verified hypervisor on arm only i think nearly guaranteed no non hardware layer penetration through itopenbsd security tormented os that has strong aser no bit implementation built into it along with various other hardenings but lacking in encryption and virtualization supportphysical isolation a way of isolating the tor process from the initials surface exposed to the attacker essentially making a tor routerpluggable transports bridges entry membership concealment for tor might be able to hide that a hidden service is being runnginx a lightweight is web server naxsi a web application firewall for nginxst a very small like loc web server but is this something to actually consider instead of nginx with nearly two hundred thousand loc virtual isolation using a hypervisor to sandbox an attacker in a vm a way of isolating the tor process from the initials attack surface exposed to the attackeriommu a way of isolating hardware to a virtual machine so limit its ability to compromise the host though there are advanced techniques for getting around this during reboots before it is isolatedcolocation sending a server into a data center after you configure it yourselfdedicated serve as i use this term i mean a physical server provided by the data center as opposed to a colocationchassis intrusion detection switch a mechanism by which opening the case of a server can trigger an event typical the immediate shut down of the server to unmount encrusted partitions and clear encryption keysipsec ssh tunnels ways to encrypt the link between two servers these are just some of the words in my head in relation to this process but we can not just say lets do all of them because there are trade offs to consider and some of them are not compatible with each other like okay do we really certainly want to use physical isolation and not virtual isolation for isolating the web server from tor and the external ip address physical isolation is superior in that the attack surface presented is reduced we will certainly need to expose ssh if the server is remote colo or dedi as opposed to having local console access so we can ssh into the internet connected tor router and then ssh into the web server box from there and then we will need to expose tor since it manages the hidden service in the first place but other than that and the network stack of the tor router host there isnt really another path to the external ip address on the application layer that i can think of anyway plus we can isolate the ash client we use to ssh into the ssh server on the web server box so even if it is pwnt the attacker is isolated in a vm on the tor router without access to the external ip address unless they penetrate through that hypervisor however physical isolation requires the use of two servers is less convenient and then we need to think about the security of two boxes too like is there really a point in even using fde on the nginx box if we have the tor process on a box that has no encryption on it but then again like sigaint said maybe we shouldnt even assume that it is possible to protect the content of the drives memory of the servers after they are identified by the attacker and the attacker has physical access to them and it would be nice to use openbsd for the tor router because it has a lot of good security features and is really the perfect os for this use case but it doesnt really have the best encryption support like as far as i know anyway though i only recently learned about better initramfs allowing remote fde for linux without the need for kvm over ip switches which are not secure to use in the first place virtual isolation with like xen virtualizes physical isolation essentially but then there is not only the application layer attack path through the hypervisor to get to the external ip address but also hardware layer paths such as via row hammer the primary benefit of using virtual isolation is simplifying things and keeping everything on a single server there are just a ton of things to consider here and i would appreciate the input of the community in deciding and analyzing the trade offs between these things and together we can decide the best choices to make and after we are done threat modeling everything i will go through the process of configuring it and make a guide on it but as it stands in just ending up pretty indecisive on some of these choices like i could make them myself and ive had some input from hacker ircs but i would like as much input and discussion as possible here as well and also if anyone has any other suggestions to add etc that would be nice as well other things we could consider are like the intel security flags i have little experience with any of these features other than it d iommu but there is like txt sgx etc is there anything we can do with this unfortunately i dont have on the two very old servers i have for configuring things on the ability to experiment with these also what about tpms could we get use from that . pretty sure opened zeros memory on free automatically grsecurity has the ability to do this too could also look into asn for poisoned memory delimiters like hardened tor browser did but that had some controvery associated with it that i would want to familiarize myself with that is something to look into as well though now that you mention it actually if it has memory leaks like firefox it is probably not fit for using that technique on a production server hardened tor browser ends up using all memory in no time but im not sure if that would be an issue for nine depending on how it is implements maybe it preallocates all the memory it ever needs . subgraph has a ways to go still because one of their primary tools oz is still far from being complete . give been trying to make a guide on securely hosting hidden services so far give mostly been doing research and im running into all kinds of questions that make me pretty indecisive really i have a basin idea of what i will configure opened tor router design server with xen vm containing nine web server with green kernel and rbac for nginxthe nginx box not having a direct path to the internet but being accessible through ssh from the tor router which has an interest connection and ssh with the tor router running a hidden service that forwards to the nginx box then hardening a pip site with cassi which is an nine waf web app firewall that whitelists behaviors in learning mode and then blocks all recognized behaviors in enforcing mode which hardens the website from being pent however i also want to protect from someone with local access to the servers which is where things get really tricky for one i will need to encrypt the link between the tor router and the nginx box because the tor router will strip all the tor encryption before forwarding traffic over the lan to the nginx box and likewise there wouldn be any implied encryption between the nginx box and the tor router so an attacker who could tap the link between them could see all the communications i will just use ash tunneling between them to encrypt the link i think i wanted to use ramcrypt but it looks like that will be tricky because it doesnt run in virtual machines due to lacking true register access and from what give been told it will not work on a hypervisor binary so cant encrypt the entire vm memory with it i think virtual isolation of nginx to isolate attackers from hardware aerial numbers physical isolation of tor router protects from external ip address is more important than encrusted ram i will use better intitramfs on at least the nginx box which allows for ash access between reboots even with fde and will certainly do at least basin fde but ugh then the problem arises that well we have a less protected tor process on the openbsd box i guess i could use a design tor router with green pax patched kernel to get no bit and aslr but i think openbsd is superior in all ways here other than lacking in terms of the drive encryption that can be used and its like ugh what is the point of using fde on the nginx box if we have the tor process with the private key for the hs still being exposed i mean an attacker who takes control of that box can then get into the nine box anyway or at least see the plaintext traffic being forwarded to tor not to mention take complete control of the hidden service or tamper with traffic in transit it kind of cancels out the benefit of using fde in the first place on the nginx box at least from an active attacker also what about protection from dma attacks and like how are we going to protect from the attacker with possession of the server they could do cold boot attack against it to get de keys i think we could use tresor on the host to protect the drive contents still i will need to look more into tresor tresvisor ramcrypt to determine what to do here really we would also have chassis intrusion detection switch set to wipe and power down if the chassis is reached but how can we get access to the state of this from the os there are various possibilities here but many of them have negative security implications chassis intrusion sensorthe sys intsw sensor is asserted when the servers top cover is removed while power is being applied to the server this is an improper service action so this sensor serves to alert you to any authorized and inadvertence removal of the servers cover thus this sensor enables system administrators to have confidence that the physical integrity of the server has not been violated this is particularly beneficial when the server is in a remote or controlled location note the server can not be powered on when the server top cover is off and the sys intsw sensor is asserted if the servers top cover is removed while the server is powered on the host will immediately employ a non graceful shutdown to power off the server but this brings up the next point are we going to want to use colocation with a server sent in to a data center or a data center provided serve using colocation has many security advantages we can configure everything ourselves and not trust that the data center provided os hasnt a rootkit on it we can block off or not include ports that allow for dma we can harden the physical security of the chassis itself to make it harder to penetrate in encapsulate the ram get steel chassis lock the chassis and can configure a chassis intrusion detection switch it has many negative aspects too though need to protect from getting fingerprints hairs dna on the case need to anonymously purchase all of the hardware need to anonymously ship the server into the data center using a dedicated server provided by the data center is more convenient but it poses a host of security questions can you trust the default installation of the os do they have him switches hooked up to the system that allow them to monitor it in its normal operation but the big benefit is the only path back to you from the server is payment which is easy enough to anonymize and the tor circuit you use to access it which is just a given there is not risk that the actual hardware itself can somehow be linked to you either through aerial numbers in purchase records or dna etc left on the machine during configuration or the return address postmark on the package the server is sent in in primarily like to discuss the tradeoffs between colocation and getting a data center provided os but in general i would like to brainstorm about hidden service security here like lets think about the various options and the tradeoffs and decide what the best course of action is the primary trade off in seeing in the choices we can make is protection from attackers who have already locked the server and protection from attackers who have not yet locked the server choices we can make to harden from one sort of attacker are tending to degrade security from the other sort of attacker was thinking i could actually also do tommy isolation of the nginx box exposed networking card of the tor router passing it through to a different os to get network stack isolation would need to look into how this would exactly look with a hidden service but i can imagine it with socksports anyway but that actually will not work on openbsd probably so that is actually something else against it but really i think just using openbsd as the os of the tor router is fine without needing to isolate network stack like that besides there are ways to break out of even state iommu isolation during reboots in some cases this is beyond my ability to really understand but joanna rutkowska has a paper on it something to do with interrupts during the early boot cycle before the device is isolated . grsecurity is probably the most important security patch for linux . subgraph has a ways to go still because one of their primary tools oz is still far from being complete . sure toctou pwnt me with this actually fuck i have never hoped so much that he is not compromise or le before lol . quote from kitten on april pmfuzzing is more than random there are strategies involved complex enough that i barely understand the explaination that has been dumbe down a bit true random fuzzing would be like brute forcing a password but what actual occurs is more along the lines of using a password list it is why it should be theoretically improbable of ever cracking someones wpa wifi in any reasonable amount of time but in most cases where the routers default random password has been changed it can be possible to deduce the passkey in days if you observe enough handshakes and have a good wordlist to use there are patterns to bugs in software and even more specific patterns to bugs which will allow execution of arbitrary code i always thought they were computing rainbow tables but maybe this makes more sense its more like a horrid markov chain than a dictionary list for the wpa cracking analogy a quote from fals documentation code select calibration a pre fuzzing stage where the execution path is examined to detect anomalies establish baseline execution speed and so on executed very briefly whenever a new find is being made trim l s another pre fuzzing stage where the test case is trimmed to the shortest form that still produces the same execution path the length l and stepover s are chosen in general relationship to file size bitflip l s deterministic bit flips there are l bits boggled at any given time walking the input file with s bit increments the current l s variants are avith l deterministic arithmetics the fuzzer tries to subtract or add small integers to and bit values the stepover is always bits interest l deterministic value overwrite the fuzzer has a list of known interesting and bit values to try the stepover is bits extras deterministic injection of dictionary terms this can be shown as user or auto depending on whether the fuzzer is using a user supplied dictionary x or an auto created one you will also see over or insert depending on whether the dictionary words overwrite existing data or are inserted by offsetting the remaining data to accommodate their length havoc a sort of fixed length cycle with stacked random tweaks the operations attempted during this stage include bit lips overwrites with random and interesting integers block deletion block duplication plus assorted dictionary related operations if a dictionary is supplied in the first place splice a last resort strategy that kicks in after the first full queue cycle with no new paths it is equivalent to havoc except that it first splices together two random inputs from the queue at some arbitrary selected midpoint sync a stage used only when m or s is set see parallel fuzzing txt no real fuzzing is involved but the tool scans the output from other fuzzers and imports test cases as necessary the first time this is done it may take several minutes or so and also gives a less exhaustive but easier to understand explanation of some of the techniques the same tool uses . quote from toctou on april amsubgraph has a ways to go still because one of their primary tools oz is still far from being complete thank for commenting shame to hear its still a way off though i have been enjoying playing with it in a vm . of kmf tell me in laymens terms please . thank you for the very detailed and information guide kmf . fuzzing with automatic tools pretty stupid way to find zero days even is not you can find plenty free exploits on www ex exploit db combrute force never be wise choise to select in pretty sure legal guys think same thing too . quote from of on april amquote from arcane on april amquote from of on april amon the plus side fbi knows fuck all too doesn stop them prosecuting people though their ignorance is no barrier to securing convictions it seems yeah but for example look at the played cp bust they pwnt between of targets depending on how you look at the available information if they actually were very advanced they would have gotten nearly of them the most advanced application layer attackers can cut through almost anything to get to you if they have a direct application layer path to you for example there is little doubt that nsa could deanonymize nearly this entire forum if they wanted to they couldnt do it with traffic analysis but they could chain a zero day for this forum with zero day for tor browser with zero days for popular hypervisors and the linus kernel etc like it would be an extraordinarily sophisticated attack but its in the reach of the nsa to pwn probably close to of active posters on this forum true the fbis attempts at exploits are woeful long may that continue . potentially exploitable crash this must be key of fuzzers this is sounds like ai tech maybe in next years we can see much more things about fuzzers but im still not like them . quote from of on april ami think would definitely want to use bridges and pluggable transports for a hidden service to try to disguise it as such from the data center i wouldnt want the data center i use to become aware that they are hosting a popular hidden service because they could let le know for one and for two its easy to do confirmation attacks at that point also going to cover anonymous payments and hiding that you use to during your communications with the hosting provider like you dont want tor to ever be a thought in their mind related to you so exit membership concealment when communicating with them buying the colocation dedi and entry membership concealment of the hidden service we dont talk much but . quote from b mb m on april pmfuzzing with automatic tools pretty stupid way to find zero days even is not you can find plenty free exploits on www ex exploit db combrute force never be wise choise to select in pretty sure legal guys think same thing too and many of those exploits are against vulnerabilities originally found with fuzzers just look at any security advisory researcher nils used the address sanitizer tool while fuzzing to discover missing strong references in browsing engine leading to use after frees this can lead to a potentially exploitable crash of course you can find vulnerabilities by hand as well and in other fashions but the thing about fuzzers is if you run them for long enough they will eventually spit out vulnerabilities that havent been patched yet trinity is a fuzzer i learned about recently when i get around to studying fuzzing more in depth it is likely the one i will start with for finding kernel vulnerabilities basin idea is fairly simple as buzz testing suggests we call syscalls at random with random arguments not an original idea and one that has been done many times before on linux and on other operating systems where trinity differs is that the arguments it passes are not purely random we found some bugs in the past by just passing random values but once the really dumb bugs were found these dumb fuzzers would just run and run the problem was if a syscall took for example a file descriptor as an argument one of the first things it would try to do was validate that fd being garbage the kernel would just reject it as einval of course so on startup trinity creates a list of file descriptors by opening pipes scanning sysfs procfs dev and creates a bunch of sockets using random network protocols then when a syscall needs an fd it gets passed one of these at random file descriptors arent the only thing trinity knows about every syscall has its arguments annotated and where possible it tries to provide something at least semi sensible length arguments for example get passed one of a whole bunch of potentially interesting values trinity also shares those file descriptors between multiply processes which causes havoc sometimes if a child process successfully creates an mmap the pointer is stored and fed to subsequent syscalls sometimes with hilarious results trinity supports alpha aarch arm i ia mips powerpc power s s x sparc x adding support for additional architectures is a small amount of work mostly involving just defining the order of the syscall table see documentation hacking for details quote there are almost always new kernel bugs being trigger by trinity i used to maintain a list of the bugs found fixed but it got to be too much work to keep track of sometimes trinity causes the oom killer to trigger as long as the oom killer picks the right process ie one of the trinity children and not dbus or networkmanager etc then this is working as designed theres a fair amount of noise printks in the kernel that trinity triggers i keep a set of patches to remove the most common ones in git it should always apply to linus latest tree for older kernels you may have to fix up some parts if you do find and report a new kernel bug please cc me and mention that you found it with trinity one of my ira contacts fuzzes his own system and mutually patches vulnerabilities as he finds them he legit scares me with how leet he is th . sure toctou pwnt me with this actually fuck i have never hoped so much that he is not compromise or le before lol . quote from zaphod on april amquote from aethon on april amwtf kmf tell me in laymens terms please use after free vulnerability in the create smp dialog function in to dialog c in the off the record messaging or pidgin otr plugin before for pidgin allows remote attackers to execute arbitrary code via vectors related to the authenticate buddy menu item its a remote code execution vulnerability this means that someone can run code on your box allowing them to do things you wouldnt want them to do this is seriously nasty shit about as bad as it gets zaphodouch . quote from aethon on april amwtf kmf tell me in laymens terms please use after free vulnerability in the create smp dialog function in to dialog c in the off the record messaging or pidgin otr plugin before for pidgin allows remote attackers to execute arbitrary code via vectors related to the authenticate buddy menu item its a remote code execution vulnerability this means that someone can run code on your box allowing them to do things you wouldnt want them to do this is seriously nasty shit about as bad as it gets zaphod . does anyone know of any situation where an actor made a successful ram based attack actually nevermind thinking about it may not be all that rare if someone considers perhaps the circumstances of seizing a system still powered on . fuzzing is more than random there are strategies involved complex enough that i barely understand the explaination that has been dumbe down a bit true random fuzzing would be like brute forcing a password but what actual occurs is more along the lines of using a password list it is why it should be theoretically improbable of ever cracking someones wpa wifi in any reasonable amount of time but in most cases where the routers default random password has been changed it can be possible to deduce the passkey in days if you observe enough handshakes and have a good wordlist to use there are patterns to bugs in software and even more specific patterns to bugs which will allow execution of arbitrary code i always thought they were computing rainbow tables but maybe this makes more sense . of kmf tell me in laymens terms please . to cross link the whole fuzzing thread started by kmf as well i will point out that this vulnerability was discovered with asa . 