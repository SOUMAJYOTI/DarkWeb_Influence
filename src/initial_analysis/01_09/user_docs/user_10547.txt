quote from lomax on august ami want one of those bit keys that would be cool im also curious about why would anyone opt for anything less than standard maximum key size is beyond me if there are two vendors and i cant make my mind up which one to chose i will alway chose the one with the longer key eh dont be like that consider for a moment that the one with the default bit key length just understands that if bit rsa is cracked then rsa is probably cracked for any key length maybe more probable still to affect every key length thats a power of two although no sensible reason to believe so to my knowledge meanwhile mr might actually be way less lucid about the security of his transmissions and operations if he puts too much trust in his bit bulletproof key i say this because cracking will take more resources time included than any entity can use in the known universe a bit cliche but its fair to remember but remember as well that this is only true if there is not already a fundamental hole in the cryptosystem that is being explained outside of public light there might be and its wide use would prove to have been a seriously astronomical fuck up on the part of globe society if we read about it in the headlines one morning anyway i use bit keys tl dr assume all vendors are le look up abagnale on google and employ security elsewhere if getting caught is more than a casual fear in your position . i just saw sigaints public pgp key and its way longer than a regular bit pip key and i was wondering how such a key would be generated here is the public key . quote from gathered on august pmquote from solov on august pmquote from gathered on august pmquote from solov on august pmquote from gathered on august pm solov nice copy and paste mate i would like to see you follow all that and make one sure ill make one because thats how much i care no need for sarcasm mate anyone with half a brain would know it was copy and passed mate am only buzzing no harm intended no need to follow all that there are hacked programs that make up to bit but you need intense computing power i used an lintel extreme i and gb of ram and it still took mins to make oh i thought the op was asking how to merge two pgp keys not how to generate long ones playing around with the source code of some open source pgp clients may yield a bit encryption key no problems some of the hacked programs do all the way up to bit but my computer stalled trying to do it honestly i have no need for such programmes two researchers once cracked a bit encryption key bit encryption is enough bit is average and bit is for overlay cautious people anything above bit is overkill not to mention slow also certain mathematical conjectures being true implies rsa algorithm being cracked so well have to switch to ecliptick curve cryptography which takes more computing power to generate keys . quote from gathered on august pm solov nice copy and paste mate i would like to see you follow all that and make one sure ill make one because thats how much i care no need for sarcasm mate anyone with half a brain would know it was copy and pasted . quote from gathered on august pm solov nice copy and paste mate i would like to see you follow all that and make one sure ill make one because thats how much i care no need for sarcasm mate anyone with half a brain would know it was copy and pasted . keys can get extremely long depending on their content i put that in quotation because the content of a public key can go far beyond the actual cryptographic key components needed to encrypt or verify this includes and is probably not limited to all of the public identities endured by the primary as a part of the whole cryptographic public verification keys names e mail addresses comments expiration dates as well as potentially many but usually zero graphical images ended for distribution as part of the full base encoded public key these are all parameters which in theory were meant to enable a healthy web of trust to exist this is solely to help users determine and identify which keys they should trust and it is easier to understand if you consider the recommendation not to trust expired keys unfortunately and despite the age of pip no long lived or widespread manifestations of the system have caught on as it was originally designed fortunately it has caught on to the extent of securing sensitive information working pretty well for most of us so far given its double learning curve essentially pgp is a user friendly human package wrapping the standard cryptographic functions of information security at a given time in this sense pgp is tireless in another it is still before its time either way thats why you see big ass keys from time to time theyre encoding much more than just the raw cryptographic keys that are technically required . quote from lomax on august ami want one of those bit keys that would be cool im also curious about why would anyone opt for anything less than standard maximum key size is beyond me if there are two vendors and i cant make my mind up which one to chose i will alway chose the one with the longer key eh dont be like that consider for a moment that the one with the default bit key length just understands that if bit rsa is cracked then rsa is probably cracked for any key length maybe more probable still to affect every key length thats a power of two although no sensible reason to believe so to my knowledge meanwhile mr might actually be way less lucid about the security of his transmissions and operations if he puts too much trust in his bit bulletproof key i say this because cracking will take more resources time included than any entity can use in the known universe a bit cliche but its fair to remember but remember as well that this is only true if there is not already a fundamental hole in the cryptosystem that is being explained outside of public light there might be and its wide use would prove to have been a seriously astronomical fuck up on the part of globe society if we read about it in the headlines one morning anyway i use bit keys tl dr assume all vendors are le look up abagnale on google and employ security elsewhere if getting caught is more than a casual fear in your position . quote from gathered on august pm solov nice copy and paste mate i would like to see you follow all that and make one sure ill make one because thats how much i care no need for sarcasm mate anyone with half a brain would know it was copy and pasted . i want one of those bit keys that would be cool im also curious about why would anyone opt for anything less than standard maximum key size is beyond me if there are two vendors and i cant make my mind up which one to chose i will alway chose the one with the longer key . the key is actually keys saint administration and sigaint advertising they also contain multiply email addresses i think zaphod is the expert on creating these things . i want one of those bit keys that would be cool im also curious about why would anyone opt for anything less than standard maximum key size is beyond me if there are two vendors and i cant make my mind up which one to chose i will alway chose the one with the longer key . i just saw sigaints public pgp key and its way longer than a regular bit pip key and i was wondering how such a key would be generated here is the public key . quote from gathered on august pmquote from solov on august pmquote from gathered on august pm solov nice copy and paste mate i would like to see you follow all that and make one sure ill make one because thats how much i care no need for sarcasm mate anyone with half a brain would know it was copy and passed mate am only buzzing no harm intended no need to follow all that there are hacked programs that make up to bit but you need intense computing power i used an lintel extreme i and gb of ram and it still took mins to make oh i thought the op was asking how to merge two pgp keys not how to generate long ones playing around with the source code of some open source pgp clients may yield a bit encryption key . quote from gathered on august pmquote from solov on august pmquote from gathered on august pm solov nice copy and paste mate i would like to see you follow all that and make one sure ill make one because thats how much i care no need for sarcasm mate anyone with half a brain would know it was copy and passed mate am only buzzing no harm intended no need to follow all that there are hacked programs that make up to bit but you need intense computing power i used an lintel extreme i and gb of ram and it still took mins to make oh i thought the op was asking how to merge two pgp keys not how to generate long ones playing around with the source code of some open source pgp clients may yield a bit encryption key . this is how to do it in linux i managed to do this with gpgsplit and recombining in doing this under linux commands for other oses might differ please read the whole mail before starting on one machine i have a key with encryption subkeys lets say a and b ithen use these commands mkdir key cd key gpg export secret keys gpgsplithere the sign simply indicates i type it at the prompt a common convention dont actually include the replace with your keyid indeed if i now do a listing of the files in this directory i see the following ls secret key user id sig secret subkey sig secret subkey sig sorry for the layout these files are the parts that together make up your whole key filenames are sequence number increasing and after the dash the packet type the packettype in human readable form is after the dot an explanation secret kettle primary key user idthe user id sighe signature binding user id and specifying preferences secret subkeythe first secret subkey encryption key a sigsignature binding a to the primary key secret subkeythe second secret subkey encryption key b sigsignature binding b to the primary key you can het more information on these packets with f e cat gog list packetsthis will list details about the packets in the same order as the files justcount now on the second machine i have the same key only unfortunately it hasencryption subkeys a and c that is on the first machine i miss key c and the second machine i miss key b i start out the same on the second machine mkdir key cd key gpg export secret keys gpgsplitthe files created will in this case actually have exactly the same names described above the big difference is the contents of the last two files secret subkeyencryption subkey c sigsignature binding c to the primary key unfortunately gog list packets does not list the key ids for key packets but it does list creation date in unfix time format and expiration date youcan use these numbers to match up which keys you want to combine no need tounderstand unfix time format just match up numbers so that you end up with allunique subkeys together you can always throw out unneeded ones later using gnupg now we want to have sucked c on the first machine assuming youve copied thedirectory key and its contents to the first machine you can do this cp key secret subkey key secret subkey cp key sig key sigactually the names are not very important as long as they are in the samesorting order as here i chose to continue the naming gnupg itself uses now directors key has the full key primary key and subkeys a b and c thesecan be combined to form the full key cd key cat secret key gpgthe difficulty you initials ran into is that gnupg will not import a key italready has in the keyring even if the subkeys are different so after making abackup of everything you delete the key already in the keyring i suggestmaking the backup before even starting all this to avoid disasters if you gotsomething wrong so on both machines we do gpg delete secret and public keys gpg import secret key gpgthe file secret key gpg is what we created in the previous step you should now have the full key on both systems i hope i didnt do something wrong here but the backup you made saves youfrom disasters in that case note if this is too cryptic you should not just type in what i say you need understand commands you enter at the prompt not blindly type in what somestranger on the internet says just ask for more into note i strongly suggest setting the passphrase the same on the two systems or youl run into funny behaviour when it prompts for the passphrase of yournew combined key you might even want to change the passphrase after theimport of the whole key but change it to the same passphrase you already had wont go into the details but this will make the key consistent with how gnupgnormally stores encrypted keys i done think gnupg was ever meant to supportthe interesting combining of encrusted keys we do here even though it works on a sidenote i think it would be cool if snug on import suspected allsubkeys and user ids in a key individually and add any that are missing ithink such functionality is useful and intuitive perhaps i should create afeature request ticket the commands i listed will only work if the account is rooted in design based distributions thats already done but in ubuntu based distros you must type sudo i and enter your root password . the key is actually keys saint administration and sigaint advertising they also contain multiply email addresses i think zaphod is the expert on creating these things . quote from lomax on august ami want one of those bit keys that would be cool im also curious about why would anyone opt for anything less than standard maximum key size is beyond me if there are two vendors and i cant make my mind up which one to chose i will alway chose the one with the longer key eh dont be like that consider for a moment that the one with the default bit key length just understands that if bit rsa is cracked then rsa is probably cracked for any key length maybe more probable still to affect every key length thats a power of two although no sensible reason to believe so to my knowledge meanwhile mr might actually be way less lucid about the security of his transmissions and operations if he puts too much trust in his bit bulletproof key i say this because cracking will take more resources time included than any entity can use in the known universe a bit cliche but its fair to remember but remember as well that this is only true if there is not already a fundamental hole in the cryptosystem that is being explained outside of public light there might be and its wide use would prove to have been a seriously astronomical fuck up on the part of globe society if we read about it in the headlines one morning anyway i use bit keys tl dr assume all vendors are le look up abagnale on google and employ security elsewhere if getting caught is more than a casual fear in your position . this is how to do it in linux i managed to do this with gpgsplit and recombining in doing this under linux commands for other oses might differ please read the whole mail before starting on one machine i have a key with encryption subkeys lets say a and b ithen use these commands mkdir key cd key gpg export secret keys gpgsplithere the sign simply indicates i type it at the prompt a common convention dont actually include the replace with your keyid indeed if i now do a listing of the files in this directory i see the following ls secret key user id sig secret subkey sig secret subkey sig sorry for the layout these files are the parts that together make up your whole key filenames are sequence number increasing and after the dash the packet type the packettype in human readable form is after the dot an explanation secret kettle primary key user idthe user id sighe signature binding user id and specifying preferences secret subkeythe first secret subkey encryption key a sigsignature binding a to the primary key secret subkeythe second secret subkey encryption key b sigsignature binding b to the primary key you can het more information on these packets with f e cat gog list packetsthis will list details about the packets in the same order as the files justcount now on the second machine i have the same key only unfortunately it hasencryption subkeys a and c that is on the first machine i miss key c and the second machine i miss key b i start out the same on the second machine mkdir key cd key gpg export secret keys gpgsplitthe files created will in this case actually have exactly the same names described above the big difference is the contents of the last two files secret subkeyencryption subkey c sigsignature binding c to the primary key unfortunately gog list packets does not list the key ids for key packets but it does list creation date in unfix time format and expiration date youcan use these numbers to match up which keys you want to combine no need tounderstand unfix time format just match up numbers so that you end up with allunique subkeys together you can always throw out unneeded ones later using gnupg now we want to have sucked c on the first machine assuming youve copied thedirectory key and its contents to the first machine you can do this cp key secret subkey key secret subkey cp key sig key sigactually the names are not very important as long as they are in the samesorting order as here i chose to continue the naming gnupg itself uses now directors key has the full key primary key and subkeys a b and c thesecan be combined to form the full key cd key cat secret key gpgthe difficulty you initials ran into is that gnupg will not import a key italready has in the keyring even if the subkeys are different so after making abackup of everything you delete the key already in the keyring i suggestmaking the backup before even starting all this to avoid disasters if you gotsomething wrong so on both machines we do gpg delete secret and public keys gpg import secret key gpgthe file secret key gpg is what we created in the previous step you should now have the full key on both systems i hope i didnt do something wrong here but the backup you made saves youfrom disasters in that case note if this is too cryptic you should not just type in what i say you need understand commands you enter at the prompt not blindly type in what somestranger on the internet says just ask for more into note i strongly suggest setting the passphrase the same on the two systems or youl run into funny behaviour when it prompts for the passphrase of yournew combined key you might even want to change the passphrase after theimport of the whole key but change it to the same passphrase you already had wont go into the details but this will make the key consistent with how gnupgnormally stores encrypted keys i done think gnupg was ever meant to supportthe interesting combining of encrusted keys we do here even though it works on a sidenote i think it would be cool if snug on import suspected allsubkeys and user ids in a key individually and add any that are missing ithink such functionality is useful and intuitive perhaps i should create afeature request ticket the commands i listed will only work if the account is rooted in design based distributions thats already done but in ubuntu based distros you must type sudo i and enter your root password . the key is actually keys saint administration and sigaint advertising they also contain multiply email addresses i think zaphod is the expert on creating these things . keys can get extremely long depending on their content i put that in quotation because the content of a public key can go far beyond the actual cryptographic key components needed to encrypt or verify this includes and is probably not limited to all of the public identities endured by the primary as a part of the whole cryptographic public verification keys names e mail addresses comments expiration dates as well as potentially many but usually zero graphical images ended for distribution as part of the full base encoded public key these are all parameters which in theory were meant to enable a healthy web of trust to exist this is solely to help users determine and identify which keys they should trust and it is easier to understand if you consider the recommendation not to trust expired keys unfortunately and despite the age of pip no long lived or widespread manifestations of the system have caught on as it was originally designed fortunately it has caught on to the extent of securing sensitive information working pretty well for most of us so far given its double learning curve essentially pgp is a user friendly human package wrapping the standard cryptographic functions of information security at a given time in this sense pgp is tireless in another it is still before its time either way thats why you see big ass keys from time to time theyre encoding much more than just the raw cryptographic keys that are technically required . this is how to do it in linux i managed to do this with gpgsplit and recombining in doing this under linux commands for other oses might differ please read the whole mail before starting on one machine i have a key with encryption subkeys lets say a and b ithen use these commands mkdir key cd key gpg export secret keys gpgsplithere the sign simply indicates i type it at the prompt a common convention dont actually include the replace with your keyid indeed if i now do a listing of the files in this directory i see the following ls secret key user id sig secret subkey sig secret subkey sig sorry for the layout these files are the parts that together make up your whole key filenames are sequence number increasing and after the dash the packet type the packettype in human readable form is after the dot an explanation secret kettle primary key user idthe user id sighe signature binding user id and specifying preferences secret subkeythe first secret subkey encryption key a sigsignature binding a to the primary key secret subkeythe second secret subkey encryption key b sigsignature binding b to the primary key you can het more information on these packets with f e cat gog list packetsthis will list details about the packets in the same order as the files justcount now on the second machine i have the same key only unfortunately it hasencryption subkeys a and c that is on the first machine i miss key c and the second machine i miss key b i start out the same on the second machine mkdir key cd key gpg export secret keys gpgsplitthe files created will in this case actually have exactly the same names described above the big difference is the contents of the last two files secret subkeyencryption subkey c sigsignature binding c to the primary key unfortunately gog list packets does not list the key ids for key packets but it does list creation date in unfix time format and expiration date youcan use these numbers to match up which keys you want to combine no need tounderstand unfix time format just match up numbers so that you end up with allunique subkeys together you can always throw out unneeded ones later using gnupg now we want to have sucked c on the first machine assuming youve copied thedirectory key and its contents to the first machine you can do this cp key secret subkey key secret subkey cp key sig key sigactually the names are not very important as long as they are in the samesorting order as here i chose to continue the naming gnupg itself uses now directors key has the full key primary key and subkeys a b and c thesecan be combined to form the full key cd key cat secret key gpgthe difficulty you initials ran into is that gnupg will not import a key italready has in the keyring even if the subkeys are different so after making abackup of everything you delete the key already in the keyring i suggestmaking the backup before even starting all this to avoid disasters if you gotsomething wrong so on both machines we do gpg delete secret and public keys gpg import secret key gpgthe file secret key gpg is what we created in the previous step you should now have the full key on both systems i hope i didnt do something wrong here but the backup you made saves youfrom disasters in that case note if this is too cryptic you should not just type in what i say you need understand commands you enter at the prompt not blindly type in what somestranger on the internet says just ask for more into note i strongly suggest setting the passphrase the same on the two systems or youl run into funny behaviour when it prompts for the passphrase of yournew combined key you might even want to change the passphrase after theimport of the whole key but change it to the same passphrase you already had wont go into the details but this will make the key consistent with how gnupgnormally stores encrypted keys i done think gnupg was ever meant to supportthe interesting combining of encrusted keys we do here even though it works on a sidenote i think it would be cool if snug on import suspected allsubkeys and user ids in a key individually and add any that are missing ithink such functionality is useful and intuitive perhaps i should create afeature request ticket the commands i listed will only work if the account is rooted in design based distributions thats already done but in ubuntu based distros you must type sudo i and enter your root password . i just saw sigaints public pgp key and its way longer than a regular bit pip key and i was wondering how such a key would be generated here is the public key . quote from gathered on august pmquote from solov on august pmquote from gathered on august pmquote from solov on august pmquote from gathered on august pm solov nice copy and paste mate i would like to see you follow all that and make one sure ill make one because thats how much i care no need for sarcasm mate anyone with half a brain would know it was copy and passed mate am only buzzing no harm intended no need to follow all that there are hacked programs that make up to bit but you need intense computing power i used an lintel extreme i and gb of ram and it still took mins to make oh i thought the op was asking how to merge two pgp keys not how to generate long ones playing around with the source code of some open source pgp clients may yield a bit encryption key no problems some of the hacked programs do all the way up to bit but my computer stalled trying to do it honestly i have no need for such programmes two researchers once cracked a bit encryption key bit encryption is enough bit is average and bit is for overlay cautious people anything above bit is overkill not to mention slow also certain mathematical conjectures being true implies rsa algorithm being cracked so well have to switch to ecliptick curve cryptography which takes more computing power to generate keys . quote from gathered on august pmquote from solov on august pmquote from gathered on august pmquote from solov on august pmquote from gathered on august pm solov nice copy and paste mate i would like to see you follow all that and make one sure ill make one because thats how much i care no need for sarcasm mate anyone with half a brain would know it was copy and passed mate am only buzzing no harm intended no need to follow all that there are hacked programs that make up to bit but you need intense computing power i used an lintel extreme i and gb of ram and it still took mins to make oh i thought the op was asking how to merge two pgp keys not how to generate long ones playing around with the source code of some open source pgp clients may yield a bit encryption key no problems some of the hacked programs do all the way up to bit but my computer stalled trying to do it honestly i have no need for such programmes two researchers once cracked a bit encryption key bit encryption is enough bit is average and bit is for overlay cautious people anything above bit is overkill not to mention slow also certain mathematical conjectures being true implies rsa algorithm being cracked so well have to switch to ecliptick curve cryptography which takes more computing power to generate keys . quote from gathered on august pmquote from solov on august pmquote from gathered on august pmquote from solov on august pmquote from gathered on august pm solov nice copy and paste mate i would like to see you follow all that and make one sure ill make one because thats how much i care no need for sarcasm mate anyone with half a brain would know it was copy and passed mate am only buzzing no harm intended no need to follow all that there are hacked programs that make up to bit but you need intense computing power i used an lintel extreme i and gb of ram and it still took mins to make oh i thought the op was asking how to merge two pgp keys not how to generate long ones playing around with the source code of some open source pgp clients may yield a bit encryption key no problems some of the hacked programs do all the way up to bit but my computer stalled trying to do it honestly i have no need for such programmes two researchers once cracked a bit encryption key bit encryption is enough bit is average and bit is for overlay cautious people anything above bit is overkill not to mention slow also certain mathematical conjectures being true implies rsa algorithm being cracked so well have to switch to ecliptick curve cryptography which takes more computing power to generate keys . quote from gathered on august pmquote from solov on august pmquote from gathered on august pm solov nice copy and paste mate i would like to see you follow all that and make one sure ill make one because thats how much i care no need for sarcasm mate anyone with half a brain would know it was copy and passed mate am only buzzing no harm intended no need to follow all that there are hacked programs that make up to bit but you need intense computing power i used an lintel extreme i and gb of ram and it still took mins to make oh i thought the op was asking how to merge two pgp keys not how to generate long ones playing around with the source code of some open source pgp clients may yield a bit encryption key . i just saw sigaints public pgp key and its way longer than a regular bit pip key and i was wondering how such a key would be generated here is the public key . i want one of those bit keys that would be cool im also curious about why would anyone opt for anything less than standard maximum key size is beyond me if there are two vendors and i cant make my mind up which one to chose i will alway chose the one with the longer key . keys can get extremely long depending on their content i put that in quotation because the content of a public key can go far beyond the actual cryptographic key components needed to encrypt or verify this includes and is probably not limited to all of the public identities endured by the primary as a part of the whole cryptographic public verification keys names e mail addresses comments expiration dates as well as potentially many but usually zero graphical images ended for distribution as part of the full base encoded public key these are all parameters which in theory were meant to enable a healthy web of trust to exist this is solely to help users determine and identify which keys they should trust and it is easier to understand if you consider the recommendation not to trust expired keys unfortunately and despite the age of pip no long lived or widespread manifestations of the system have caught on as it was originally designed fortunately it has caught on to the extent of securing sensitive information working pretty well for most of us so far given its double learning curve essentially pgp is a user friendly human package wrapping the standard cryptographic functions of information security at a given time in this sense pgp is tireless in another it is still before its time either way thats why you see big ass keys from time to time theyre encoding much more than just the raw cryptographic keys that are technically required . this is how to do it in linux i managed to do this with gpgsplit and recombining in doing this under linux commands for other oses might differ please read the whole mail before starting on one machine i have a key with encryption subkeys lets say a and b ithen use these commands mkdir key cd key gpg export secret keys gpgsplithere the sign simply indicates i type it at the prompt a common convention dont actually include the replace with your keyid indeed if i now do a listing of the files in this directory i see the following ls secret key user id sig secret subkey sig secret subkey sig sorry for the layout these files are the parts that together make up your whole key filenames are sequence number increasing and after the dash the packet type the packettype in human readable form is after the dot an explanation secret kettle primary key user idthe user id sighe signature binding user id and specifying preferences secret subkeythe first secret subkey encryption key a sigsignature binding a to the primary key secret subkeythe second secret subkey encryption key b sigsignature binding b to the primary key you can het more information on these packets with f e cat gog list packetsthis will list details about the packets in the same order as the files justcount now on the second machine i have the same key only unfortunately it hasencryption subkeys a and c that is on the first machine i miss key c and the second machine i miss key b i start out the same on the second machine mkdir key cd key gpg export secret keys gpgsplitthe files created will in this case actually have exactly the same names described above the big difference is the contents of the last two files secret subkeyencryption subkey c sigsignature binding c to the primary key unfortunately gog list packets does not list the key ids for key packets but it does list creation date in unfix time format and expiration date youcan use these numbers to match up which keys you want to combine no need tounderstand unfix time format just match up numbers so that you end up with allunique subkeys together you can always throw out unneeded ones later using gnupg now we want to have sucked c on the first machine assuming youve copied thedirectory key and its contents to the first machine you can do this cp key secret subkey key secret subkey cp key sig key sigactually the names are not very important as long as they are in the samesorting order as here i chose to continue the naming gnupg itself uses now directors key has the full key primary key and subkeys a b and c thesecan be combined to form the full key cd key cat secret key gpgthe difficulty you initials ran into is that gnupg will not import a key italready has in the keyring even if the subkeys are different so after making abackup of everything you delete the key already in the keyring i suggestmaking the backup before even starting all this to avoid disasters if you gotsomething wrong so on both machines we do gpg delete secret and public keys gpg import secret key gpgthe file secret key gpg is what we created in the previous step you should now have the full key on both systems i hope i didnt do something wrong here but the backup you made saves youfrom disasters in that case note if this is too cryptic you should not just type in what i say you need understand commands you enter at the prompt not blindly type in what somestranger on the internet says just ask for more into note i strongly suggest setting the passphrase the same on the two systems or youl run into funny behaviour when it prompts for the passphrase of yournew combined key you might even want to change the passphrase after theimport of the whole key but change it to the same passphrase you already had wont go into the details but this will make the key consistent with how gnupgnormally stores encrypted keys i done think gnupg was ever meant to supportthe interesting combining of encrusted keys we do here even though it works on a sidenote i think it would be cool if snug on import suspected allsubkeys and user ids in a key individually and add any that are missing ithink such functionality is useful and intuitive perhaps i should create afeature request ticket the commands i listed will only work if the account is rooted in design based distributions thats already done but in ubuntu based distros you must type sudo i and enter your root password . quote from gathered on august pm solov nice copy and paste mate i would like to see you follow all that and make one sure ill make one because thats how much i care no need for sarcasm mate anyone with half a brain would know it was copy and pasted . keys can get extremely long depending on their content i put that in quotation because the content of a public key can go far beyond the actual cryptographic key components needed to encrypt or verify this includes and is probably not limited to all of the public identities endured by the primary as a part of the whole cryptographic public verification keys names e mail addresses comments expiration dates as well as potentially many but usually zero graphical images ended for distribution as part of the full base encoded public key these are all parameters which in theory were meant to enable a healthy web of trust to exist this is solely to help users determine and identify which keys they should trust and it is easier to understand if you consider the recommendation not to trust expired keys unfortunately and despite the age of pip no long lived or widespread manifestations of the system have caught on as it was originally designed fortunately it has caught on to the extent of securing sensitive information working pretty well for most of us so far given its double learning curve essentially pgp is a user friendly human package wrapping the standard cryptographic functions of information security at a given time in this sense pgp is tireless in another it is still before its time either way thats why you see big ass keys from time to time theyre encoding much more than just the raw cryptographic keys that are technically required . quote from lomax on august ami want one of those bit keys that would be cool im also curious about why would anyone opt for anything less than standard maximum key size is beyond me if there are two vendors and i cant make my mind up which one to chose i will alway chose the one with the longer key eh dont be like that consider for a moment that the one with the default bit key length just understands that if bit rsa is cracked then rsa is probably cracked for any key length maybe more probable still to affect every key length thats a power of two although no sensible reason to believe so to my knowledge meanwhile mr might actually be way less lucid about the security of his transmissions and operations if he puts too much trust in his bit bulletproof key i say this because cracking will take more resources time included than any entity can use in the known universe a bit cliche but its fair to remember but remember as well that this is only true if there is not already a fundamental hole in the cryptosystem that is being explained outside of public light there might be and its wide use would prove to have been a seriously astronomical fuck up on the part of globe society if we read about it in the headlines one morning anyway i use bit keys tl dr assume all vendors are le look up abagnale on google and employ security elsewhere if getting caught is more than a casual fear in your position . i want one of those bit keys that would be cool im also curious about why would anyone opt for anything less than standard maximum key size is beyond me if there are two vendors and i cant make my mind up which one to chose i will alway chose the one with the longer key . quote from gathered on august pmquote from solov on august pmquote from gathered on august pm solov nice copy and paste mate i would like to see you follow all that and make one sure ill make one because thats how much i care no need for sarcasm mate anyone with half a brain would know it was copy and passed mate am only buzzing no harm intended no need to follow all that there are hacked programs that make up to bit but you need intense computing power i used an lintel extreme i and gb of ram and it still took mins to make oh i thought the op was asking how to merge two pgp keys not how to generate long ones playing around with the source code of some open source pgp clients may yield a bit encryption key . the key is actually keys saint administration and sigaint advertising they also contain multiply email addresses i think zaphod is the expert on creating these things . 