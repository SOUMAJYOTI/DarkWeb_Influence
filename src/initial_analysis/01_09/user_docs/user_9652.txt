encryption is fun and i have to say im fascinated by the mathematics behind it therefore im going to share what ive learned about how it works for those who are curious to know in sure most of you know it has something to do with primes the numbers that are only divisible by it self and like first you have to pick two random primes of about the same length ill pick and so a bits key ill call for p and for q so p and a multiply p q now all the mathematics i do is in modular that means i only have the numbers from to and it works like a clock but in this module i get back to so now it is time to find the public and secret key the public key must be a prime number that doesnt divide i got by this equation p q if the prime i chose divide then i cant get a secret key so ill chose to be my public key if my message is and i encrypt it then my encrusted message will be and since this is god to decrypt i need the number that when multiplied with my public key is in mod only primes that doesnt have a common factor with have this my secret key is since mod to decrypt i take mod and i get back the i encrypted with my sorry for the big numbers at the end . how to find the secret key to encrypt we need the public key which is and the modular which is p q these numbers are public to generate the secret key we used p q is a secret number so if someone were to factorize to they to can find the secret number and see what number they have to multiply with in mod to get then it is easy to find the secret key so why is it safe here is a number with p and q p q it is quite hard to factorize for a human can be done within reasonable time with a computer but we use p and a which isnt possible to factorize within a reasonable time . how to find the secret key to encrypt we need the public key which is and the modular which is p q these numbers are public to generate the secret key we used p q is a secret number so if someone were to factorize to they to can find the secret number and see what number they have to multiply with in mod to get then it is easy to find the secret key so why is it safe here is a number with p and q p q it is quite hard to factorize for a human can be done within reasonable time with a computer but we use p and a which isn t possible to factorize within a reasonable time . encryption is fun and i have to say im fascinated by the mathematics behind it therefore im going to share what ive learned about how it works for those who are curious to know in sure most of you know it has something to do with primes the numbers that are only divisible by it self and like first you have to pick two random primes of about the same length ill pick and so a bits key ill call for p and for q so p and a multiply p q now all the mathematics i do is in modular that means i only have the numbers from to and it works like a clock but in this module i get back to so now it is time to find the public and secret key the public key must be a prime number that doesnt divide i got by this equation p q if the prime i chose divide then i cant get a secret key so ill chose to be my public key if my message is and i encrypt it then my encrusted message will be and since this is god to decrypt i need the number that when multiplied with my public key is in mod only primes that doesnt have a common factor with have this my secret key is since mod to decrypt i take mod and i get back the i encrypted with my sorry for the big numbers at the end . how to find the secret key to encrypt we need the public key which is and the modular which is p q these numbers are public to generate the secret key we used p q is a secret number so if someone were to factorize to they to can find the secret number and see what number they have to multiply with in mod to get then it is easy to find the secret key so why is it safe here is a number with p and q p q it is quite hard to factorize for a human can be done within reasonable time with a computer but we use p and a which isnt possible to factorize within a reasonable time . encryption is fun and i have to say i m fascinated by the mathematics behind it therefore i m going to share what i ve learned about how it works for those who are curious to know i m sure most of you know it has something to do with primes the numbers that are only divisible by it self and like first you have to pick two random primes of about the same length i ll pick and so a bits key i ll call for p and for q so p and a multiply p q now all the mathematics i do is in modular that means i only have the numbers from to and it works like a clock but in this module i get back to so now it is time to find the public and secret key the public key must be a prime number that doesn t divide i got by this equation p q if the prime i chose divide then i can t get a secret key so i ll chose to be my public key if my message is and i encrypt it then my encrusted message will be and since this is god to decrypt i need the number that when multiplied with my public key is in mod only primes that doesn t have a common factor with have this my secret key is since mod to decrypt i take mod and i get back the i encrypted with my sorry for the big numbers at the end . how to find the secret key to encrypt we need the public key which is and the modular which is p q these numbers are public to generate the secret key we used p q is a secret number so if someone were to factorize to they to can find the secret number and see what number they have to multiply with in mod to get then it is easy to find the secret key so why is it safe here is a number with p and q p q it is quite hard to factorize for a human can be done within reasonable time with a computer but we use p and a which isnt possible to factorize within a reasonable time . encryption is fun and i have to say im fascinated by the mathematics behind it therefore im going to share what ive learned about how it works for those who are curious to know in sure most of you know it has something to do with primes the numbers that are only divisible by it self and like first you have to pick two random primes of about the same length ill pick and so a bits key ill call for p and for q so p and a multiply p q now all the mathematics i do is in modular that means i only have the numbers from to and it works like a clock but in this module i get back to so now it is time to find the public and secret key the public key must be a prime number that doesnt divide i got by this equation p q if the prime i chose divide then i cant get a secret key so ill chose to be my public key if my message is and i encrypt it then my encrusted message will be and since this is god to decrypt i need the number that when multiplied with my public key is in mod only primes that doesnt have a common factor with have this my secret key is since mod to decrypt i take mod and i get back the i encrypted with my sorry for the big numbers at the end . did not want to make a new thread plus cool to revive this one anyway so i was thinking about ways to come up with passwords that would be bruteforce safe yet also easy to remember and one idea came to me was hashing forexample one can use just two words a unique word and a unique salt withthe linux supplied my pass tool to create a unique hash one can then md sum that hash to get a unique number which in turn can be used as a password that is easy to compute fromtwo memorable words one could also produce their unique hash from a picture of any file really now the space of hashes is finite so indeed one could theoretically bruteforce yourpassword but from what i have read this is impracticable given ourcurrent hardware also a very very good article here which covers the latest crypto tools and attack vectorshxxp senderek ie research security secret key protection html prngand from it i note as factoring of the modulus is doomed to failure if a sufficient large key is used attacks which current have become known were directed towards the implementation of the algorithm timing attack or they presuppose the attacker being able to submit a chosen message to the victim for signing chosen ciphertext attack both types of attacks have been discussed in detail by w unruh so i will not dig into that matter any further to protect yourself against these attacks you should avoid signing a document which could contain arbitrary hidden data for instance an unknown word processor document containing information on formatting which is not to be seen in the plain text as the chosen ciphertext attack is based on the fact that an attacker is able to smuggle some skilful chosen data into the message so that an encryption with the secret key turns out to be actually a decryption of the message or at least part of it but even if the attacker was successful he would not get the secret key itself the existence of the chosen ciphertext attack is one reason why you do not sign the whole document but a fingerprint of it created by the one way hash function md to avoid such attacks the signature made on this representation of the document is smaller now but also the security of digital signatures now does not depend on rsa only but on the hash function as well this stuck out the existence of the chosen ciphertext attack is one reason why you do not sign the whole document but a fingerprint of it created by the one way hash function md to avoid such attacks the signature made on this representation of the document is smaller now but also the security of digital signatures now does not depend on rsa only but on the hash function as well so from what i understand here one would in effect sign md sum encrypted message anyway any insights welcome spitfire you seemed to be up to speed with this kinda stuff . did not want to make a new thread plus cool to revive this one anyway so i was thinking about ways to come up with passwords that would be bruteforce safe yet also easy to remember and one idea came to me was hashing forexample one can use just two words a unique word and a unique salt withthe linux supplied my pass tool to create a unique hash one can then md sum that hash to get a unique number which in turn can be used as a password that is easy to compute fromtwo memorable words one could also produce their unique hash from a picture of any file really now the space of hashes is finite so indeed one could theoretically bruteforce yourpassword but from what i have read this is impracticable given ourcurrent hardware also a very very good article here which covers the latest crypto tools and attack vectorshxxp senderek ie research security secret key protection html prngand from it i note as factoring of the modulus is doomed to failure if a sufficient large key is used attacks which current have become known were directed towards the implementation of the algorithm timing attack or they presuppose the attacker being able to submit a chosen message to the victim for signing chosen ciphertext attack both types of attacks have been discussed in detail by w unruh so i will not dig into that matter any further to protect yourself against these attacks you should avoid signing a document which could contain arbitrary hidden data for instance an unknown word processor document containing information on formatting which is not to be seen in the plain text as the chosen ciphertext attack is based on the fact that an attacker is able to smuggle some skilful chosen data into the message so that an encryption with the secret key turns out to be actually a decryption of the message or at least part of it but even if the attacker was successful he would not get the secret key itself the existence of the chosen ciphertext attack is one reason why you do not sign the whole document but a fingerprint of it created by the one way hash function md to avoid such attacks the signature made on this representation of the document is smaller now but also the security of digital signatures now does not depend on rsa only but on the hash function as well this stuck out the existence of the chosen ciphertext attack is one reason why you do not sign the whole document but a fingerprint of it created by the one way hash function md to avoid such attacks the signature made on this representation of the document is smaller now but also the security of digital signatures now does not depend on rsa only but on the hash function as well so from what i understand here one would in effect sign md sum encrypted message anyway any insights welcome spitfire you seemed to be up to speed with this kinda stuff . did not want to make a new thread plus cool to revive this one anyway so i was thinking about ways to come up with passwords that would be bruteforce safe yet also easy to remember and one idea came to me was hashing forexample one can use just two words a unique word and a unique salt withthe linux supplied my pass tool to create a unique hash one can then md sum that hash to get a unique number which in turn can be used as a password that is easy to compute fromtwo memorable words one could also produce their unique hash from a picture of any file really now the space of hashes is finite so indeed one could theoretically bruteforce yourpassword but from what i have read this is impracticable given ourcurrent hardware also a very very good article here which covers the latest crypto tools and attack vectorshxxp senderek ie research security secret key protection html prngand from it i note as factoring of the modulus is doomed to failure if a sufficient large key is used attacks which current have become known were directed towards the implementation of the algorithm timing attack or they presuppose the attacker being able to submit a chosen message to the victim for signing chosen ciphertext attack both types of attacks have been discussed in detail by w unruh so i will not dig into that matter any further to protect yourself against these attacks you should avoid signing a document which could contain arbitrary hidden data for instance an unknown word processor document containing information on formatting which is not to be seen in the plain text as the chosen ciphertext attack is based on the fact that an attacker is able to smuggle some skilful chosen data into the message so that an encryption with the secret key turns out to be actually a decryption of the message or at least part of it but even if the attacker was successful he would not get the secret key itself the existence of the chosen ciphertext attack is one reason why you do not sign the whole document but a fingerprint of it created by the one way hash function md to avoid such attacks the signature made on this representation of the document is smaller now but also the security of digital signatures now does not depend on rsa only but on the hash function as well this stuck out the existence of the chosen ciphertext attack is one reason why you do not sign the whole document but a fingerprint of it created by the one way hash function md to avoid such attacks the signature made on this representation of the document is smaller now but also the security of digital signatures now does not depend on rsa only but on the hash function as well so from what i understand here one would in effect sign md sum encrypted message anyway any insights welcome spitfire you seemed to be up to speed with this kinda stuff . did not want to make a new thread plus cool to revive this one anyway so i was thinking about ways to come up with passwords that would be bruteforce safe yet also easy to remember and one idea came to me was hashing forexample one can use just two words a unique word and a unique salt withthe linux supplied my pass tool to create a unique hash one can then md sum that hash to get a unique number which in turn can be used as a password that is easy to compute fromtwo memorable words one could also produce their unique hash from a picture of any file really now the space of hashes is finite so indeed one could theoretically bruteforce yourpassword but from what i have read this is impracticable given ourcurrent hardware also a very very good article here which covers the latest crypto tools and attack vectorshxxp senderek ie research security secret key protection html prngand from it i note as factoring of the modulus is doomed to failure if a sufficient large key is used attacks which current have become known were directed towards the implementation of the algorithm timing attack or they presuppose the attacker being able to submit a chosen message to the victim for signing chosen ciphertext attack both types of attacks have been discussed in detail by w unruh so i will not dig into that matter any further to protect yourself against these attacks you should avoid signing a document which could contain arbitrary hidden data for instance an unknown word processor document containing information on formatting which is not to be seen in the plain text as the chosen ciphertext attack is based on the fact that an attacker is able to smuggle some skilful chosen data into the message so that an encryption with the secret key turns out to be actually a decryption of the message or at least part of it but even if the attacker was successful he would not get the secret key itself the existence of the chosen ciphertext attack is one reason why you do not sign the whole document but a fingerprint of it created by the one way hash function md to avoid such attacks the signature made on this representation of the document is smaller now but also the security of digital signatures now does not depend on rsa only but on the hash function as well this stuck out the existence of the chosen ciphertext attack is one reason why you do not sign the whole document but a fingerprint of it created by the one way hash function md to avoid such attacks the signature made on this representation of the document is smaller now but also the security of digital signatures now does not depend on rsa only but on the hash function as well so from what i understand here one would in effect sign md sum encrypted message anyway any insights welcome spitfire you seemed to be up to speed with this kinda stuff . 