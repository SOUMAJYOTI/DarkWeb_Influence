i have a question for somebody who knows their linus crypto a lot better than me probably somebody like zaphod maybe its my understanding that live operating systems like tails and virtual machines like whonix have a problem with not getting enough entropy this is because a live os starts in exactly the same state every time it boots up and therefore has no entropy what concerns me about tails is that the first thing that happens after you connect to internet is it immediately generates encryption keys and connects to tor possibly before there is enough entropy available for dev urandom to be properly seemed at most the only entropy your system will get before connecting to tor is maybe a few mouse movements virtual machines have exactly the same problem only worse because any hardware rng that you have on your system likely wont be available to dev urandom in the virtual machine my question does anybody think this actually a problem in tails or phoenix give read cryptographic papers about identical keys ssl keys being found in the wild because of this exact problem if this is a problem is there anything you can do to fix this . from is a fallback usually to rdtsc in hanged case the generic fallback is clock gettime clock monotony ts so tails will use your systems clock as an initials seed to a pseudorandom number generator on bootup edit sorry forgot to answer your question directly once sufficient entropy is generated de random is a far far better source for random numbers thus restart tor after you have missed around a bit and it will pull from that source first not sure how feasible that is in tails . i have a question for somebody who knows their linus crypto a lot better than me probably somebody like zaphod maybe its my understanding that live operating systems like tails and virtual machines like whonix have a problem with not getting enough entropy this is because a live os starts in exactly the same state every time it boots up and therefore has no entropy what concerns me about tails is that the first thing that happens after you connect to internet is it immediately generates encryption keys and connects to tor possibly before there is enough entropy available for dev urandom to be properly seemed at most the only entropy your system will get before connecting to tor is maybe a few mouse movements virtual machines have exactly the same problem only worse because any hardware rng that you have on your system likely wont be available to dev urandom in the virtual machine my question does anybody think this actually a problem in tails or phoenix give read cryptographic papers about identical keys ssl keys being found in the wild because of this exact problem if this is a problem is there anything you can do to fix this . from is a fallback usually to rdtsc in hanged case the generic fallback is clock gettime clock monotony ts so tails will use your systems clock as an initials seed to a pseudorandom number generator on bootup edit sorry forgot to answer your question directly once sufficient entropy is generated de random is a far far better source for random numbers thus restart tor after you have missed around a bit and it will pull from that source first not sure how feasible that is in tails . quote from claptrap on march ami have a question for somebody who knows their linus crypto a lot better than me probably somebody like zaphod maybe its my understanding that live operating systems like tails and virtual machines like whonix have a problem with not getting enough entropy this is because a live os starts in exactly the same state every time it boots up and therefore has no entropy what concerns me about tails is that the first thing that happens after you connect to internet is it immediately generates encryption keys and connects to tor possibly before there is enough entropy available for dev urandom to be properly seemed at most the only entropy your system will get before connecting to tor is maybe a few mouse movements virtual machines have exactly the same problem only worse because any hardware rng that you have on your system likely wont be available to dev urandom in the virtual machine my question does anybody think this actually a problem in tails or phoenix give read cryptographic papers about identical keys ssl keys being found in the wild because of this exact problem if this is a problem is there anything you can do to fix this it would appear that the tails developers are aware of this issue and consider it closed as a result of including hanged see to the design package page quotelinux entropy source using the havege algorithmhaveged is a userspace entropy daemon which is not dependent upon the standard mechanisms for harvesting randomness for the system entry pool this is important in systems with high entropy needs or limited user interaction e g headless servers haveged uses havege hardware volatile entropy gathering and expansion to maintain a m pool of random bytes used to fill de random whenever the supply of random bits in de random falls below the low water mark of the device see also also . quote from claptrap on march ami have a question for somebody who knows their linus crypto a lot better than me probably somebody like zaphod maybe its my understanding that live operating systems like tails and virtual machines like whonix have a problem with not getting enough entropy this is because a live os starts in exactly the same state every time it boots up and therefore has no entropy what concerns me about tails is that the first thing that happens after you connect to internet is it immediately generates encryption keys and connects to tor possibly before there is enough entropy available for dev urandom to be properly seemed at most the only entropy your system will get before connecting to tor is maybe a few mouse movements virtual machines have exactly the same problem only worse because any hardware rng that you have on your system likely wont be available to dev urandom in the virtual machine my question does anybody think this actually a problem in tails or phoenix give read cryptographic papers about identical keys ssl keys being found in the wild because of this exact problem if this is a problem is there anything you can do to fix this it would appear that the tails developers are aware of this issue and consider it closed as a result of including hanged see to the design package page quotelinux entropy source using the havege algorithmhaveged is a userspace entropy daemon which is not dependent upon the standard mechanisms for harvesting randomness for the system entry pool this is important in systems with high entropy needs or limited user interaction e g headless servers haveged uses havege hardware volatile entropy gathering and expansion to maintain a m pool of random bytes used to fill de random whenever the supply of random bits in de random falls below the low water mark of the device see also also . from is a fallback usually to rdtsc in hanged case the generic fallback is clock gettime clock monotony ts so tails will use your systems clock as an initials seed to a pseudorandom number generator on bootup edit sorry forgot to answer your question directly once sufficient entropy is generated de random is a far far better source for random numbers thus restart tor after you have missed around a bit and it will pull from that source first not sure how feasible that is in tails . from is a fallback usually to rdtsc in hanged case the generic fallback is clock gettime clock monotony ts so tails will use your systems clock as an initials seed to a pseudorandom number generator on bootup edit sorry forgot to answer your question directly once sufficient entropy is generated de random is a far far better source for random numbers thus restart tor after you have missed around a bit and it will pull from that source first not sure how feasible that is in tails . quote from claptrap on march ami have a question for somebody who knows their linus crypto a lot better than me probably somebody like zaphod maybe its my understanding that live operating systems like tails and virtual machines like whonix have a problem with not getting enough entropy this is because a live os starts in exactly the same state every time it boots up and therefore has no entropy what concerns me about tails is that the first thing that happens after you connect to internet is it immediately generates encryption keys and connects to tor possibly before there is enough entropy available for dev urandom to be properly seemed at most the only entropy your system will get before connecting to tor is maybe a few mouse movements virtual machines have exactly the same problem only worse because any hardware rng that you have on your system likely wont be available to dev urandom in the virtual machine my question does anybody think this actually a problem in tails or phoenix give read cryptographic papers about identical keys ssl keys being found in the wild because of this exact problem if this is a problem is there anything you can do to fix this it would appear that the tails developers are aware of this issue and consider it closed as a result of including hanged see to the design package page quotelinux entropy source using the havege algorithmhaveged is a userspace entropy daemon which is not dependent upon the standard mechanisms for harvesting randomness for the system entry pool this is important in systems with high entropy needs or limited user interaction e g headless servers haveged uses havege hardware volatile entropy gathering and expansion to maintain a m pool of random bytes used to fill de random whenever the supply of random bits in de random falls below the low water mark of the device see also also . quote from claptrap on march ami have a question for somebody who knows their linus crypto a lot better than me probably somebody like zaphod maybe its my understanding that live operating systems like tails and virtual machines like whonix have a problem with not getting enough entropy this is because a live os starts in exactly the same state every time it boots up and therefore has no entropy what concerns me about tails is that the first thing that happens after you connect to internet is it immediately generates encryption keys and connects to tor possibly before there is enough entropy available for dev urandom to be properly seemed at most the only entropy your system will get before connecting to tor is maybe a few mouse movements virtual machines have exactly the same problem only worse because any hardware rng that you have on your system likely wont be available to dev urandom in the virtual machine my question does anybody think this actually a problem in tails or phoenix give read cryptographic papers about identical keys ssl keys being found in the wild because of this exact problem if this is a problem is there anything you can do to fix this it would appear that the tails developers are aware of this issue and consider it closed as a result of including hanged see to the design package page quotelinux entropy source using the havege algorithmhaveged is a userspace entropy daemon which is not dependent upon the standard mechanisms for harvesting randomness for the system entry pool this is important in systems with high entropy needs or limited user interaction e g headless servers haveged uses havege hardware volatile entropy gathering and expansion to maintain a m pool of random bytes used to fill de random whenever the supply of random bits in de random falls below the low water mark of the device see also also . i have a question for somebody who knows their linus crypto a lot better than me probably somebody like zaphod maybe its my understanding that live operating systems like tails and virtual machines like whonix have a problem with not getting enough entropy this is because a live os starts in exactly the same state every time it boots up and therefore has no entropy what concerns me about tails is that the first thing that happens after you connect to internet is it immediately generates encryption keys and connects to tor possibly before there is enough entropy available for dev urandom to be properly seemed at most the only entropy your system will get before connecting to tor is maybe a few mouse movements virtual machines have exactly the same problem only worse because any hardware rng that you have on your system likely wont be available to dev urandom in the virtual machine my question does anybody think this actually a problem in tails or phoenix give read cryptographic papers about identical keys ssl keys being found in the wild because of this exact problem if this is a problem is there anything you can do to fix this . i have a question for somebody who knows their linus crypto a lot better than me probably somebody like zaphod maybe its my understanding that live operating systems like tails and virtual machines like whonix have a problem with not getting enough entropy this is because a live os starts in exactly the same state every time it boots up and therefore has no entropy what concerns me about tails is that the first thing that happens after you connect to internet is it immediately generates encryption keys and connects to tor possibly before there is enough entropy available for dev urandom to be properly seemed at most the only entropy your system will get before connecting to tor is maybe a few mouse movements virtual machines have exactly the same problem only worse because any hardware rng that you have on your system likely wont be available to dev urandom in the virtual machine my question does anybody think this actually a problem in tails or phoenix give read cryptographic papers about identical keys ssl keys being found in the wild because of this exact problem if this is a problem is there anything you can do to fix this . thanks guys for your responses thanks for pointing out the links to the tails developers comments i wasnt aware they considered it a solved issue i guess the avenged algorithm is good enough at gathering entry anyway heres my two cents on possible solutions regardless of what the tails developers have done with avenged its probably a good idea to play around with your computer a while before connecting to a network or generating pip keys maybe mess around with a word processor or something to be secure enough for crypto youd likely need bits of entropy to seed dev urandom if you got time maybe you can do six sided dice throws this adds up to bits of entropy save result into text file and then go to a command terminal and do cat dice txt dev randomthis wont increase the kernels official entry count but at least youll know that the kernel is properly seemed the linux kernel and presumably tails which is based on design supports hardware random number generators if your system has one but not very many systems do have them if youre running on an intel i of i rd generation and up then you have the rdrand instruction available to you i know rdrand might be backdoored but surely its better than nothing maybe tails should include support for something like this dunno i really like compartmentalization benefits of tails but this ring issue needs to be solved . thanks guys for your responses thanks for pointing out the links to the tails developers comments i wasnt aware they considered it a solved issue i guess the avenged algorithm is good enough at gathering entry anyway heres my two cents on possible solutions regardless of what the tails developers have done with avenged its probably a good idea to play around with your computer a while before connecting to a network or generating pip keys maybe mess around with a word processor or something to be secure enough for crypto youd likely need bits of entropy to seed dev urandom if you got time maybe you can do six sided dice throws this adds up to bits of entropy save result into text file and then go to a command terminal and do cat dice txt dev randomthis wont increase the kernels official entry count but at least youll know that the kernel is properly seemed the linux kernel and presumably tails which is based on design supports hardware random number generators if your system has one but not very many systems do have them if youre running on an intel i of i rd generation and up then you have the rdrand instruction available to you i know rdrand might be backdoored but surely its better than nothing maybe tails should include support for something like this dunno i really like compartmentalization benefits of tails but this ring issue needs to be solved . thanks guys for your responses thanks for pointing out the links to the tails developers comments i wasnt aware they considered it a solved issue i guess the avenged algorithm is good enough at gathering entry anyway heres my two cents on possible solutions regardless of what the tails developers have done with avenged its probably a good idea to play around with your computer a while before connecting to a network or generating pip keys maybe mess around with a word processor or something to be secure enough for crypto youd likely need bits of entropy to seed dev urandom if you got time maybe you can do six sided dice throws this adds up to bits of entropy save result into text file and then go to a command terminal and do cat dice txt dev randomthis wont increase the kernels official entry count but at least youll know that the kernel is properly seemed the linux kernel and presumably tails which is based on design supports hardware random number generators if your system has one but not very many systems do have them if youre running on an intel i of i rd generation and up then you have the rdrand instruction available to you i know rdrand might be backdoored but surely its better than nothing maybe tails should include support for something like this dunno i really like compartmentalization benefits of tails but this ring issue needs to be solved . quote from claptrap on march amthanks guys for your responses thanks for pointing out the links to the tails developers comments i wasnt aware they considered it a solved issue i guess the avenged algorithm is good enough at gathering entropy my initials impression would have been to disagree with havegd being good enough but i decided to do a little more digging and here is what i found quotemotivationsan unpredictable random number generator is a practical approximation of a truly random number generator most previous software algorithms for generating unpredictable random number sequences rely on entropy gathering from measuring unpredictable external events the throughput of these generators are in the range of bits per second this limits them to being used as seeds for pseudo random generators such unpredictable random number generators are needed for cryptography modern superscalar processors feature a large number of hardware mechanisms which aim at improving performance caches branch predictors tlbs long pipelines instruction level parallelism the state of these components is not architectural i e the result of an ordinary application does not depend on it it is also volatile and can not be directly monitor by the user on the other hand every invocation of the operating system modifies thousands of these binary volatile states overviewhavege hardware volatile entropy gathering and expansion is a user level software unpredictable random number generator for general purpose computers that exploits these modifications of the internal volatile hardware states as a source of uncertainty during an initialization phase the hardware clock cycle counter of the processor is used to gather part of this entropy tens of thousands of unpredictable bits can be gathered per operating system call in average have combines on the fly hardware volatile entropy gathering with pseudo random number generation the internal state of havege includes thousands of internal volatile hardware states and is merely unmonitorable therefore havege features a very high security level havege can reach an unprecedented throughput for a software unpredictable random number generator several hundreds of megabits per second on current workstations and pcs the throughput of havege favourably competes with usual pseudo random number generators such as rand or random while havege was initials designed for cryptology like application this high throughput makes havege unable for all application domains demanding for high performance and high quality random number generators e g monte carlo simulations last but not leastmore and more modern appliances such as pdas cell phones etc are built around low power superscalar processors e g stronger intel xscale and features complex operating systems havege can also be implements on these platforms a demonstrator of havege for such a pda featuring pocketpc and a scale processor is available more about havegefurther details about havege can be found in the publications section quote from claptrap on march amanyway heres my two cents on possible solutions regardless of what the tails developers have done with avenged its probably a good idea to play around with your computer a while before connecting to a network or generating pip keys maybe mess around with a word processor or something to be secure enough for crypto youd likely need bits of entropy to seed dev urandom if you got time maybe you can do six sided dice throws this adds up to bits of entropy save result into text file and then go to a command terminal and do cat dice txt dev randomthis wont increase the kernels official entry count but at least youll know that the kernel is properly seemed the linux kernel and presumably tails which is based on design supports hardware random number generators if your system has one but not very many systems do have them if youre running on an intel i of i rd generation and up then you have the rdrand instruction available to you i know rdrand might be backdoored but surely its better than nothing maybe tails should include support for something like this dunno i really like compartmentalization benefits of tails but this ring issue needs to be solved i for one dont have the expertise needed to critique what the havegd guys have been doing but from their paper published in the am transactions on modeling and computer simulation vol no october pages i think it can be argued that these guys are not dilettantes by any stretch of the imagination in that regard it is worthy of note that they mention monte carlo simulations these types of simulations require large quantities of really high quality random numbers if what they claim is true that internal processor states can be used to generate large volumes of random numbers even good enough for monte carlo simulations then i can understand why the tails developers chose to put their faith in this rng see also also . quote from claptrap on march amthanks guys for your responses thanks for pointing out the links to the tails developers comments i wasnt aware they considered it a solved issue i guess the avenged algorithm is good enough at gathering entropy my initials impression would have been to disagree with havegd being good enough but i decided to do a little more digging and here is what i found quotemotivationsan unpredictable random number generator is a practical approximation of a truly random number generator most previous software algorithms for generating unpredictable random number sequences rely on entropy gathering from measuring unpredictable external events the throughput of these generators are in the range of bits per second this limits them to being used as seeds for pseudo random generators such unpredictable random number generators are needed for cryptography modern superscalar processors feature a large number of hardware mechanisms which aim at improving performance caches branch predictors tlbs long pipelines instruction level parallelism the state of these components is not architectural i e the result of an ordinary application does not depend on it it is also volatile and can not be directly monitor by the user on the other hand every invocation of the operating system modifies thousands of these binary volatile states overviewhavege hardware volatile entropy gathering and expansion is a user level software unpredictable random number generator for general purpose computers that exploits these modifications of the internal volatile hardware states as a source of uncertainty during an initialization phase the hardware clock cycle counter of the processor is used to gather part of this entropy tens of thousands of unpredictable bits can be gathered per operating system call in average have combines on the fly hardware volatile entropy gathering with pseudo random number generation the internal state of havege includes thousands of internal volatile hardware states and is merely unmonitorable therefore havege features a very high security level havege can reach an unprecedented throughput for a software unpredictable random number generator several hundreds of megabits per second on current workstations and pcs the throughput of havege favourably competes with usual pseudo random number generators such as rand or random while havege was initials designed for cryptology like application this high throughput makes havege unable for all application domains demanding for high performance and high quality random number generators e g monte carlo simulations last but not leastmore and more modern appliances such as pdas cell phones etc are built around low power superscalar processors e g stronger intel xscale and features complex operating systems havege can also be implements on these platforms a demonstrator of havege for such a pda featuring pocketpc and a scale processor is available more about havegefurther details about havege can be found in the publications section quote from claptrap on march amanyway heres my two cents on possible solutions regardless of what the tails developers have done with avenged its probably a good idea to play around with your computer a while before connecting to a network or generating pip keys maybe mess around with a word processor or something to be secure enough for crypto youd likely need bits of entropy to seed dev urandom if you got time maybe you can do six sided dice throws this adds up to bits of entropy save result into text file and then go to a command terminal and do cat dice txt dev randomthis wont increase the kernels official entry count but at least youll know that the kernel is properly seemed the linux kernel and presumably tails which is based on design supports hardware random number generators if your system has one but not very many systems do have them if youre running on an intel i of i rd generation and up then you have the rdrand instruction available to you i know rdrand might be backdoored but surely its better than nothing maybe tails should include support for something like this dunno i really like compartmentalization benefits of tails but this ring issue needs to be solved i for one dont have the expertise needed to critique what the havegd guys have been doing but from their paper published in the am transactions on modeling and computer simulation vol no october pages i think it can be argued that these guys are not dilettantes by any stretch of the imagination in that regard it is worthy of note that they mention monte carlo simulations these types of simulations require large quantities of really high quality random numbers if what they claim is true that internal processor states can be used to generate large volumes of random numbers even good enough for monte carlo simulations then i can understand why the tails developers chose to put their faith in this rng see also also . thanks guys for your responses thanks for pointing out the links to the tails developers comments i wasnt aware they considered it a solved issue i guess the avenged algorithm is good enough at gathering entry anyway heres my two cents on possible solutions regardless of what the tails developers have done with avenged its probably a good idea to play around with your computer a while before connecting to a network or generating pip keys maybe mess around with a word processor or something to be secure enough for crypto youd likely need bits of entropy to seed dev urandom if you got time maybe you can do six sided dice throws this adds up to bits of entropy save result into text file and then go to a command terminal and do cat dice txt dev randomthis wont increase the kernels official entry count but at least youll know that the kernel is properly seemed the linux kernel and presumably tails which is based on design supports hardware random number generators if your system has one but not very many systems do have them if youre running on an intel i of i rd generation and up then you have the rdrand instruction available to you i know rdrand might be backdoored but surely its better than nothing maybe tails should include support for something like this dunno i really like compartmentalization benefits of tails but this ring issue needs to be solved . quote from claptrap on march amthanks guys for your responses thanks for pointing out the links to the tails developers comments i wasnt aware they considered it a solved issue i guess the avenged algorithm is good enough at gathering entropy my initials impression would have been to disagree with havegd being good enough but i decided to do a little more digging and here is what i found quotemotivationsan unpredictable random number generator is a practical approximation of a truly random number generator most previous software algorithms for generating unpredictable random number sequences rely on entropy gathering from measuring unpredictable external events the throughput of these generators are in the range of bits per second this limits them to being used as seeds for pseudo random generators such unpredictable random number generators are needed for cryptography modern superscalar processors feature a large number of hardware mechanisms which aim at improving performance caches branch predictors tlbs long pipelines instruction level parallelism the state of these components is not architectural i e the result of an ordinary application does not depend on it it is also volatile and can not be directly monitor by the user on the other hand every invocation of the operating system modifies thousands of these binary volatile states overviewhavege hardware volatile entropy gathering and expansion is a user level software unpredictable random number generator for general purpose computers that exploits these modifications of the internal volatile hardware states as a source of uncertainty during an initialization phase the hardware clock cycle counter of the processor is used to gather part of this entropy tens of thousands of unpredictable bits can be gathered per operating system call in average have combines on the fly hardware volatile entropy gathering with pseudo random number generation the internal state of havege includes thousands of internal volatile hardware states and is merely unmonitorable therefore havege features a very high security level havege can reach an unprecedented throughput for a software unpredictable random number generator several hundreds of megabits per second on current workstations and pcs the throughput of havege favourably competes with usual pseudo random number generators such as rand or random while havege was initials designed for cryptology like application this high throughput makes havege unable for all application domains demanding for high performance and high quality random number generators e g monte carlo simulations last but not leastmore and more modern appliances such as pdas cell phones etc are built around low power superscalar processors e g stronger intel xscale and features complex operating systems havege can also be implements on these platforms a demonstrator of havege for such a pda featuring pocketpc and a scale processor is available more about havegefurther details about havege can be found in the publications section quote from claptrap on march amanyway heres my two cents on possible solutions regardless of what the tails developers have done with avenged its probably a good idea to play around with your computer a while before connecting to a network or generating pip keys maybe mess around with a word processor or something to be secure enough for crypto youd likely need bits of entropy to seed dev urandom if you got time maybe you can do six sided dice throws this adds up to bits of entropy save result into text file and then go to a command terminal and do cat dice txt dev randomthis wont increase the kernels official entry count but at least youll know that the kernel is properly seemed the linux kernel and presumably tails which is based on design supports hardware random number generators if your system has one but not very many systems do have them if youre running on an intel i of i rd generation and up then you have the rdrand instruction available to you i know rdrand might be backdoored but surely its better than nothing maybe tails should include support for something like this dunno i really like compartmentalization benefits of tails but this ring issue needs to be solved i for one dont have the expertise needed to critique what the havegd guys have been doing but from their paper published in the am transactions on modeling and computer simulation vol no october pages i think it can be argued that these guys are not dilettantes by any stretch of the imagination in that regard it is worthy of note that they mention monte carlo simulations these types of simulations require large quantities of really high quality random numbers if what they claim is true that internal processor states can be used to generate large volumes of random numbers even good enough for monte carlo simulations then i can understand why the tails developers chose to put their faith in this rng see also also . quote from claptrap on march amthanks guys for your responses thanks for pointing out the links to the tails developers comments i wasnt aware they considered it a solved issue i guess the avenged algorithm is good enough at gathering entropy my initials impression would have been to disagree with havegd being good enough but i decided to do a little more digging and here is what i found quotemotivationsan unpredictable random number generator is a practical approximation of a truly random number generator most previous software algorithms for generating unpredictable random number sequences rely on entropy gathering from measuring unpredictable external events the throughput of these generators are in the range of bits per second this limits them to being used as seeds for pseudo random generators such unpredictable random number generators are needed for cryptography modern superscalar processors feature a large number of hardware mechanisms which aim at improving performance caches branch predictors tlbs long pipelines instruction level parallelism the state of these components is not architectural i e the result of an ordinary application does not depend on it it is also volatile and can not be directly monitor by the user on the other hand every invocation of the operating system modifies thousands of these binary volatile states overviewhavege hardware volatile entropy gathering and expansion is a user level software unpredictable random number generator for general purpose computers that exploits these modifications of the internal volatile hardware states as a source of uncertainty during an initialization phase the hardware clock cycle counter of the processor is used to gather part of this entropy tens of thousands of unpredictable bits can be gathered per operating system call in average have combines on the fly hardware volatile entropy gathering with pseudo random number generation the internal state of havege includes thousands of internal volatile hardware states and is merely unmonitorable therefore havege features a very high security level havege can reach an unprecedented throughput for a software unpredictable random number generator several hundreds of megabits per second on current workstations and pcs the throughput of havege favourably competes with usual pseudo random number generators such as rand or random while havege was initials designed for cryptology like application this high throughput makes havege unable for all application domains demanding for high performance and high quality random number generators e g monte carlo simulations last but not leastmore and more modern appliances such as pdas cell phones etc are built around low power superscalar processors e g stronger intel xscale and features complex operating systems havege can also be implements on these platforms a demonstrator of havege for such a pda featuring pocketpc and a scale processor is available more about havegefurther details about havege can be found in the publications section quote from claptrap on march amanyway heres my two cents on possible solutions regardless of what the tails developers have done with avenged its probably a good idea to play around with your computer a while before connecting to a network or generating pip keys maybe mess around with a word processor or something to be secure enough for crypto youd likely need bits of entropy to seed dev urandom if you got time maybe you can do six sided dice throws this adds up to bits of entropy save result into text file and then go to a command terminal and do cat dice txt dev randomthis wont increase the kernels official entry count but at least youll know that the kernel is properly seemed the linux kernel and presumably tails which is based on design supports hardware random number generators if your system has one but not very many systems do have them if youre running on an intel i of i rd generation and up then you have the rdrand instruction available to you i know rdrand might be backdoored but surely its better than nothing maybe tails should include support for something like this dunno i really like compartmentalization benefits of tails but this ring issue needs to be solved i for one dont have the expertise needed to critique what the havegd guys have been doing but from their paper published in the am transactions on modeling and computer simulation vol no october pages i think it can be argued that these guys are not dilettantes by any stretch of the imagination in that regard it is worthy of note that they mention monte carlo simulations these types of simulations require large quantities of really high quality random numbers if what they claim is true that internal processor states can be used to generate large volumes of random numbers even good enough for monte carlo simulations then i can understand why the tails developers chose to put their faith in this rng see also also . thanks for the discussion guys i dont understand half of what was said but this is why i come to the hub . thanks for the discussion guys i dont understand half of what was said but this is why i come to the hub . thanks for the discussion guys i dont understand half of what was said but this is why i come to the hub . thanks for the discussion guys i dont understand half of what was said but this is why i come to the hub . he needs something like this before telling him to use this it has changed as obfs has been dated anyone can chime in on how to use it now i would also appreciate it personally i am trying to find out a way to get the following running with tails obfs which is supported by tails obfsproxy is a tool that attempts to circumvent censorship by transforming the tor traffic between the client and the bridge this way censors who usually monitor traffic between the client and the bridge will see innocent looking transformed traffic instead of the actual tor traffic brdgrd brdgrd is short for bridge guard a program which is meant to protect tor bridges from being scanned and as a result blocked by the great firewall of china if anyone can help me attain the setup in tails with the two above things it would be much appreciated by me in sure the op would be happy to have a good answer as well my question is why is this setup not recommended to all vendors and buyers what am i not seeing . this is not normally the type of topic we discuss here but i wanted some input someone i know has to move to china for months for business and since im the crypto whiz guy he knows he came to me with a few questions i didnt know how to answer its my understanding so give heard though i might be incorrect that many privacy enhancing tools that people in western countries take for granted like vpns tor etc are blocked in china as are most services westerners use like gmail facebook etc the guy just rascally wants a way to talk to his wife an other family without being eavesdroppers on by the chinese while hes away its also my understanding that bringing things like pgp encryption software into china is illegal he be operating under the assumption that all phone calls are wiretapped by either the chinese or the us all popular american internet services are blocked and that bringing encryption software into china besides what comes with his operating system will get him in trouble my suggestion was to buy a domain name and set up email hosting at that domain in some european country canada etc since it would be his own personal website its unlikely it would be blocked or maybe he could set up an openvpn server at his own house of course for work he has access to the incorporate vpn which is intermittent blocked by the chinese from his company laptop and all the software he needs to do his job but they dont want him using the company network for personal business since give never been to china i dont have a for sure answer for him i know how to get around surveillance but getting around surveillance high censorship adds another layer of complexity does anyone here have any experience with this . most business travellers buy a disposal phone when going to china because at the airport they sometimes seize it and disappear for a few minutes with it likely backdooring or god knows what to it schneier post about security in china for travellers also automatic radio attacking shenanigans going on at all world airports if you have a compatible phone and can run one of those baseband monitoring programs youll immediately see that fake towers and other shit is going crazy in the radio whenever you go near an airport so your entire sdcard could be getting yankee off the phone redphone and signal ios all work in china without issue should also work which is a skype like clone made by people from chans g that uses dj bernsteins crypto box and runs on windows osx adroit ect whatsapp also uses textsecure to encrypt its messages could also tunnel these through a vpn but china likes to block those by detecting them minutes after you make a connection through the firewall . what a fascinating subject trying to outwit those crafty chinese i know that people who tried to use tor first had their connection cut and after a few tries they were told to leave the hotel things are really weird down there as if we didnt have enough with those imperialists and nose isps trying to sniff our innocent commsanyway heres what i would suggest him rent some vps or something and install a private vpn there and if he has some spare pc at home install another private vpn at home just in case the first will provide some good bandwidth and and even security of the machine hosting it wouldn be a major concern while the second would be a backup of course a standalone pc so its isolated from the rest of his home network now if those chinese block all vpn comms and i wouldnt be surprised if they did then his own site hosting an email service would be some solution now i wouldnt bet this would be a secure solution as the chinese have their way around tls and the like as for tor i have heard people set up their own personal bridgesas for me i wouldnt mind the chinese listening to my calls i would probably throw in some heavy sexual stuff just to get them hot in their stuffy uniformsmaybe he could befriend some party official and tell him how he would like to communicate with his family without nasty uncle sam listening maybe he could be offered some solution from inside and even some job opportunities . he could spoof his tor connections with some bridges but i am not sure if this is illegal or not in china . he could spoof his tor connections with some bridges but i am not sure if this is illegal or not in china . this is not normally the type of topic we discuss here but i wanted some input someone i know has to move to china for months for business and since im the crypto whiz guy he knows he came to me with a few questions i didnt know how to answer its my understanding so give heard though i might be incorrect that many privacy enhancing tools that people in western countries take for granted like vpns tor etc are blocked in china as are most services westerners use like gmail facebook etc the guy just rascally wants a way to talk to his wife an other family without being eavesdroppers on by the chinese while hes away its also my understanding that bringing things like pgp encryption software into china is illegal he be operating under the assumption that all phone calls are wiretapped by either the chinese or the us all popular american internet services are blocked and that bringing encryption software into china besides what comes with his operating system will get him in trouble my suggestion was to buy a domain name and set up email hosting at that domain in some european country canada etc since it would be his own personal website its unlikely it would be blocked or maybe he could set up an openvpn server at his own house of course for work he has access to the incorporate vpn which is intermittent blocked by the chinese from his company laptop and all the software he needs to do his job but they dont want him using the company network for personal business since give never been to china i dont have a for sure answer for him i know how to get around surveillance but getting around surveillance high censorship adds another layer of complexity does anyone here have any experience with this . he could spoof his tor connections with some bridges but i am not sure if this is illegal or not in china . this is not normally the type of topic we discuss here but i wanted some input someone i know has to move to china for months for business and since im the crypto whiz guy he knows he came to me with a few questions i didnt know how to answer its my understanding so give heard though i might be incorrect that many privacy enhancing tools that people in western countries take for granted like vpns tor etc are blocked in china as are most services westerners use like gmail facebook etc the guy just rascally wants a way to talk to his wife an other family without being eavesdroppers on by the chinese while hes away its also my understanding that bringing things like pgp encryption software into china is illegal he be operating under the assumption that all phone calls are wiretapped by either the chinese or the us all popular american internet services are blocked and that bringing encryption software into china besides what comes with his operating system will get him in trouble my suggestion was to buy a domain name and set up email hosting at that domain in some european country canada etc since it would be his own personal website its unlikely it would be blocked or maybe he could set up an openvpn server at his own house of course for work he has access to the incorporate vpn which is intermittent blocked by the chinese from his company laptop and all the software he needs to do his job but they dont want him using the company network for personal business since give never been to china i dont have a for sure answer for him i know how to get around surveillance but getting around surveillance high censorship adds another layer of complexity does anyone here have any experience with this . most business travellers buy a disposal phone when going to china because at the airport they sometimes seize it and disappear for a few minutes with it likely backdooring or god knows what to it schneier post about security in china for travellers also automatic radio attacking shenanigans going on at all world airports if you have a compatible phone and can run one of those baseband monitoring programs youll immediately see that fake towers and other shit is going crazy in the radio whenever you go near an airport so your entire sdcard could be getting yankee off the phone redphone and signal ios all work in china without issue should also work which is a skype like clone made by people from chans g that uses dj bernsteins crypto box and runs on windows osx adroit ect whatsapp also uses textsecure to encrypt its messages could also tunnel these through a vpn but china likes to block those by detecting them minutes after you make a connection through the firewall . what a fascinating subject trying to outwit those crafty chinese i know that people who tried to use tor first had their connection cut and after a few tries they were told to leave the hotel things are really weird down there as if we didnt have enough with those imperialists and nose isps trying to sniff our innocent commsanyway heres what i would suggest him rent some vps or something and install a private vpn there and if he has some spare pc at home install another private vpn at home just in case the first will provide some good bandwidth and and even security of the machine hosting it wouldn be a major concern while the second would be a backup of course a standalone pc so its isolated from the rest of his home network now if those chinese block all vpn comms and i wouldnt be surprised if they did then his own site hosting an email service would be some solution now i wouldnt bet this would be a secure solution as the chinese have their way around tls and the like as for tor i have heard people set up their own personal bridgesas for me i wouldnt mind the chinese listening to my calls i would probably throw in some heavy sexual stuff just to get them hot in their stuffy uniformsmaybe he could befriend some party official and tell him how he would like to communicate with his family without nasty uncle sam listening maybe he could be offered some solution from inside and even some job opportunities . he needs something like this before telling him to use this it has changed as obfs has been dated anyone can chime in on how to use it now i would also appreciate it personally i am trying to find out a way to get the following running with tails obfs which is supported by tails obfsproxy is a tool that attempts to circumvent censorship by transforming the tor traffic between the client and the bridge this way censors who usually monitor traffic between the client and the bridge will see innocent looking transformed traffic instead of the actual tor traffic brdgrd brdgrd is short for bridge guard a program which is meant to protect tor bridges from being scanned and as a result blocked by the great firewall of china if anyone can help me attain the setup in tails with the two above things it would be much appreciated by me in sure the op would be happy to have a good answer as well my question is why is this setup not recommended to all vendors and buyers what am i not seeing . this is not normally the type of topic we discuss here but i wanted some input someone i know has to move to china for months for business and since im the crypto whiz guy he knows he came to me with a few questions i didnt know how to answer its my understanding so give heard though i might be incorrect that many privacy enhancing tools that people in western countries take for granted like vpns tor etc are blocked in china as are most services westerners use like gmail facebook etc the guy just rascally wants a way to talk to his wife an other family without being eavesdroppers on by the chinese while hes away its also my understanding that bringing things like pgp encryption software into china is illegal he be operating under the assumption that all phone calls are wiretapped by either the chinese or the us all popular american internet services are blocked and that bringing encryption software into china besides what comes with his operating system will get him in trouble my suggestion was to buy a domain name and set up email hosting at that domain in some european country canada etc since it would be his own personal website its unlikely it would be blocked or maybe he could set up an openvpn server at his own house of course for work he has access to the incorporate vpn which is intermittent blocked by the chinese from his company laptop and all the software he needs to do his job but they dont want him using the company network for personal business since give never been to china i dont have a for sure answer for him i know how to get around surveillance but getting around surveillance high censorship adds another layer of complexity does anyone here have any experience with this . he could spoof his tor connections with some bridges but i am not sure if this is illegal or not in china . most business travellers buy a disposal phone when going to china because at the airport they sometimes seize it and disappear for a few minutes with it likely backdooring or god knows what to it schneier post about security in china for travellers also automatic radio attacking shenanigans going on at all world airports if you have a compatible phone and can run one of those baseband monitoring programs youll immediately see that fake towers and other shit is going crazy in the radio whenever you go near an airport so your entire sdcard could be getting yankee off the phone redphone and signal ios all work in china without issue should also work which is a skype like clone made by people from chans g that uses dj bernsteins crypto box and runs on windows osx adroit ect whatsapp also uses textsecure to encrypt its messages could also tunnel these through a vpn but china likes to block those by detecting them minutes after you make a connection through the firewall . what a fascinating subject trying to outwit those crafty chinese i know that people who tried to use tor first had their connection cut and after a few tries they were told to leave the hotel things are really weird down there as if we didnt have enough with those imperialists and nose isps trying to sniff our innocent commsanyway heres what i would suggest him rent some vps or something and install a private vpn there and if he has some spare pc at home install another private vpn at home just in case the first will provide some good bandwidth and and even security of the machine hosting it wouldn be a major concern while the second would be a backup of course a standalone pc so its isolated from the rest of his home network now if those chinese block all vpn comms and i wouldnt be surprised if they did then his own site hosting an email service would be some solution now i wouldnt bet this would be a secure solution as the chinese have their way around tls and the like as for tor i have heard people set up their own personal bridgesas for me i wouldnt mind the chinese listening to my calls i would probably throw in some heavy sexual stuff just to get them hot in their stuffy uniformsmaybe he could befriend some party official and tell him how he would like to communicate with his family without nasty uncle sam listening maybe he could be offered some solution from inside and even some job opportunities . he needs something like this before telling him to use this it has changed as obfs has been dated anyone can chime in on how to use it now i would also appreciate it personally i am trying to find out a way to get the following running with tails obfs which is supported by tails obfsproxy is a tool that attempts to circumvent censorship by transforming the tor traffic between the client and the bridge this way censors who usually monitor traffic between the client and the bridge will see innocent looking transformed traffic instead of the actual tor traffic brdgrd brdgrd is short for bridge guard a program which is meant to protect tor bridges from being scanned and as a result blocked by the great firewall of china if anyone can help me attain the setup in tails with the two above things it would be much appreciated by me in sure the op would be happy to have a good answer as well my question is why is this setup not recommended to all vendors and buyers what am i not seeing . he needs something like this before telling him to use this it has changed as obfs has been dated anyone can chime in on how to use it now i would also appreciate it personally i am trying to find out a way to get the following running with tails obfs which is supported by tails obfsproxy is a tool that attempts to circumvent censorship by transforming the tor traffic between the client and the bridge this way censors who usually monitor traffic between the client and the bridge will see innocent looking transformed traffic instead of the actual tor traffic brdgrd brdgrd is short for bridge guard a program which is meant to protect tor bridges from being scanned and as a result blocked by the great firewall of china if anyone can help me attain the setup in tails with the two above things it would be much appreciated by me in sure the op would be happy to have a good answer as well my question is why is this setup not recommended to all vendors and buyers what am i not seeing . what a fascinating subject trying to outwit those crafty chinese i know that people who tried to use tor first had their connection cut and after a few tries they were told to leave the hotel things are really weird down there as if we didnt have enough with those imperialists and nose isps trying to sniff our innocent commsanyway heres what i would suggest him rent some vps or something and install a private vpn there and if he has some spare pc at home install another private vpn at home just in case the first will provide some good bandwidth and and even security of the machine hosting it wouldn be a major concern while the second would be a backup of course a standalone pc so its isolated from the rest of his home network now if those chinese block all vpn comms and i wouldnt be surprised if they did then his own site hosting an email service would be some solution now i wouldnt bet this would be a secure solution as the chinese have their way around tls and the like as for tor i have heard people set up their own personal bridgesas for me i wouldnt mind the chinese listening to my calls i would probably throw in some heavy sexual stuff just to get them hot in their stuffy uniformsmaybe he could befriend some party official and tell him how he would like to communicate with his family without nasty uncle sam listening maybe he could be offered some solution from inside and even some job opportunities . most business travellers buy a disposal phone when going to china because at the airport they sometimes seize it and disappear for a few minutes with it likely backdooring or god knows what to it schneier post about security in china for travellers also automatic radio attacking shenanigans going on at all world airports if you have a compatible phone and can run one of those baseband monitoring programs youll immediately see that fake towers and other shit is going crazy in the radio whenever you go near an airport so your entire sdcard could be getting yankee off the phone redphone and signal ios all work in china without issue should also work which is a skype like clone made by people from chans g that uses dj bernsteins crypto box and runs on windows osx adroit ect whatsapp also uses textsecure to encrypt its messages could also tunnel these through a vpn but china likes to block those by detecting them minutes after you make a connection through the firewall . repost from bruce schneiers websiteclearnet from bruce schneierhistory of the first crypto waras were all gearing up to fight the second crypto war over governments demands to be able to back door any cryptographic system it pays for us to remember the history of the first crypto war the open technology institute has written the story of those years in the mid s the act that truly launched the crypto wars was the white houses introduction of the clipper chip in the clipper chip was a state of the art microchip developed by government engineers which could be inserted into consumer hardware telephones providing the public with strong cryptographic tools without sacrificing the ability of law enforcement and intelligence agencies to access unencrypted versions of those communications the technology relied on a system of key escrow in which a copy of each chips unique encryption key would be stored by the government although white house officials mobilized both political and technical allies in support of the proposal it faced immediate backlash from technical experts privacy advocates and industry leaders who were concerned about the security and economic impact of the technology in addition to obvious civil liberties concerns as the battle wore on throughout and into leaders from across the political spectrum joined the fray supported by a broad coalition that opposed the clipper chip when computer scientist matt blaze discovered a flaw in the system in may it proved to be the final death blow the clipper chip was dead nonetheless the idea that the government could find a palatable way to access the keys to encrypted communications lived on throughout the s many policymakers held onto hopes that it was possible to securely implement what they called software key escrow to preserve access to phone calls emails and other communications and storage applications under key escrow schemes a government certified third party would keep a key to every device but the governments shift in tactics ultimately proved unsuccessful the privacy security and economic concerns continued to outweigh any potential benefits by there was an overwhelming amount of evidence against moving ahead with any key escrow schemes the second crypto war is going to be harder and nastier and i am less optimistic that strong cryptography will win in the short term the good news for the united states is the the us congress seems to be opposed to the idea of backdooring cryptography but i really fear for the uk and austrailia . repost from bruce schneiers websiteclearnet from bruce schneierhistory of the first crypto waras were all gearing up to fight the second crypto war over governments demands to be able to back door any cryptographic system it pays for us to remember the history of the first crypto war the open technology institute has written the story of those years in the mid s the act that truly launched the crypto wars was the white houses introduction of the clipper chip in the clipper chip was a state of the art microchip developed by government engineers which could be inserted into consumer hardware telephones providing the public with strong cryptographic tools without sacrificing the ability of law enforcement and intelligence agencies to access unencrypted versions of those communications the technology relied on a system of key escrow in which a copy of each chips unique encryption key would be stored by the government although white house officials mobilized both political and technical allies in support of the proposal it faced immediate backlash from technical experts privacy advocates and industry leaders who were concerned about the security and economic impact of the technology in addition to obvious civil liberties concerns as the battle wore on throughout and into leaders from across the political spectrum joined the fray supported by a broad coalition that opposed the clipper chip when computer scientist matt blaze discovered a flaw in the system in may it proved to be the final death blow the clipper chip was dead nonetheless the idea that the government could find a palatable way to access the keys to encrypted communications lived on throughout the s many policymakers held onto hopes that it was possible to securely implement what they called software key escrow to preserve access to phone calls emails and other communications and storage applications under key escrow schemes a government certified third party would keep a key to every device but the governments shift in tactics ultimately proved unsuccessful the privacy security and economic concerns continued to outweigh any potential benefits by there was an overwhelming amount of evidence against moving ahead with any key escrow schemes the second crypto war is going to be harder and nastier and i am less optimistic that strong cryptography will win in the short term the good news for the united states is the the us congress seems to be opposed to the idea of backdooring cryptography but i really fear for the uk and austrailia . repost from bruce schneiers websiteclearnet from bruce schneierhistory of the first crypto waras were all gearing up to fight the second crypto war over governments demands to be able to back door any cryptographic system it pays for us to remember the history of the first crypto war the open technology institute has written the story of those years in the mid s the act that truly launched the crypto wars was the white houses introduction of the clipper chip in the clipper chip was a state of the art microchip developed by government engineers which could be inserted into consumer hardware telephones providing the public with strong cryptographic tools without sacrificing the ability of law enforcement and intelligence agencies to access unencrypted versions of those communications the technology relied on a system of key escrow in which a copy of each chips unique encryption key would be stored by the government although white house officials mobilized both political and technical allies in support of the proposal it faced immediate backlash from technical experts privacy advocates and industry leaders who were concerned about the security and economic impact of the technology in addition to obvious civil liberties concerns as the battle wore on throughout and into leaders from across the political spectrum joined the fray supported by a broad coalition that opposed the clipper chip when computer scientist matt blaze discovered a flaw in the system in may it proved to be the final death blow the clipper chip was dead nonetheless the idea that the government could find a palatable way to access the keys to encrypted communications lived on throughout the s many policymakers held onto hopes that it was possible to securely implement what they called software key escrow to preserve access to phone calls emails and other communications and storage applications under key escrow schemes a government certified third party would keep a key to every device but the governments shift in tactics ultimately proved unsuccessful the privacy security and economic concerns continued to outweigh any potential benefits by there was an overwhelming amount of evidence against moving ahead with any key escrow schemes the second crypto war is going to be harder and nastier and i am less optimistic that strong cryptography will win in the short term the good news for the united states is the the us congress seems to be opposed to the idea of backdooring cryptography but i really fear for the uk and austrailia . repost from bruce schneiers websiteclearnet from bruce schneierhistory of the first crypto waras were all gearing up to fight the second crypto war over governments demands to be able to back door any cryptographic system it pays for us to remember the history of the first crypto war the open technology institute has written the story of those years in the mid s the act that truly launched the crypto wars was the white houses introduction of the clipper chip in the clipper chip was a state of the art microchip developed by government engineers which could be inserted into consumer hardware telephones providing the public with strong cryptographic tools without sacrificing the ability of law enforcement and intelligence agencies to access unencrypted versions of those communications the technology relied on a system of key escrow in which a copy of each chips unique encryption key would be stored by the government although white house officials mobilized both political and technical allies in support of the proposal it faced immediate backlash from technical experts privacy advocates and industry leaders who were concerned about the security and economic impact of the technology in addition to obvious civil liberties concerns as the battle wore on throughout and into leaders from across the political spectrum joined the fray supported by a broad coalition that opposed the clipper chip when computer scientist matt blaze discovered a flaw in the system in may it proved to be the final death blow the clipper chip was dead nonetheless the idea that the government could find a palatable way to access the keys to encrypted communications lived on throughout the s many policymakers held onto hopes that it was possible to securely implement what they called software key escrow to preserve access to phone calls emails and other communications and storage applications under key escrow schemes a government certified third party would keep a key to every device but the governments shift in tactics ultimately proved unsuccessful the privacy security and economic concerns continued to outweigh any potential benefits by there was an overwhelming amount of evidence against moving ahead with any key escrow schemes the second crypto war is going to be harder and nastier and i am less optimistic that strong cryptography will win in the short term the good news for the united states is the the us congress seems to be opposed to the idea of backdooring cryptography but i really fear for the uk and austrailia . quote from flashy on june important stuff from this page and i would add sba to the list now they have moved their objective towards backdooring cpus and firmware all recent intel processors include one or more backdoors hidden under various names including identity protection smart connect antitheft technology amt me and so on not to mention modern firmware connecting to the internet to download updates i very much agree with you we are only in transition to a more aggressive and harder to detect surveillance as the focus moves to hardware we are still discussing about encryption software while they are a step ahead and focus on compromising hardware and getting the raw data i am a mere gamer but i think i would much rather have a kind of popular os with sovereign control over the hardware and the software and how it works than living with some feudal system where one would have to rely on corporations to not be evil and ultimately being tossed around by them if all else fails were gon a have to start buying asics and start loading open source cpus onto them ive never heard of anybody do that before and would love for someone to come out with a proof of concept design on that . important stuff from this page and i would add sba to the list now they have moved their objective towards backdooring cpus and firmware all recent intel processors include one or more backdoors hidden under various names including identity protection smart connect antitheft technology amt me and so on not to mention modern firmware connecting to the internet to download updates i very much agree with you we are only in transition to a more aggressive and harder to detect surveillance as the focus moves to hardware we are still discussing about encryption software while they are a step ahead and focus on compromising hardware and getting the raw data i am a mere gamer but i think i would much rather have a kind of popular os with sovereign control over the hardware and the software and how it works than living with some feudal system where one would have to rely on corporations to not be evil and ultimately being tossed around by them . quote from flashy on june important stuff from this page and i would add sba to the list now they have moved their objective towards backdooring cpus and firmware all recent intel processors include one or more backdoors hidden under various names including identity protection smart connect antitheft technology amt me and so on not to mention modern firmware connecting to the internet to download updates i very much agree with you we are only in transition to a more aggressive and harder to detect surveillance as the focus moves to hardware we are still discussing about encryption software while they are a step ahead and focus on compromising hardware and getting the raw data i am a mere gamer but i think i would much rather have a kind of popular os with sovereign control over the hardware and the software and how it works than living with some feudal system where one would have to rely on corporations to not be evil and ultimately being tossed around by them if all else fails were gon a have to start buying asics and start loading open source cpus onto them ive never heard of anybody do that before and would love for someone to come out with a proof of concept design on that . important stuff from this page and i would add sba to the list now they have moved their objective towards backdooring cpus and firmware all recent intel processors include one or more backdoors hidden under various names including identity protection smart connect antitheft technology amt me and so on not to mention modern firmware connecting to the internet to download updates i very much agree with you we are only in transition to a more aggressive and harder to detect surveillance as the focus moves to hardware we are still discussing about encryption software while they are a step ahead and focus on compromising hardware and getting the raw data i am a mere gamer but i think i would much rather have a kind of popular os with sovereign control over the hardware and the software and how it works than living with some feudal system where one would have to rely on corporations to not be evil and ultimately being tossed around by them . important stuff from this page and i would add sba to the list now they have moved their objective towards backdooring cpus and firmware all recent intel processors include one or more backdoors hidden under various names including identity protection smart connect antitheft technology amt me and so on not to mention modern firmware connecting to the internet to download updates i very much agree with you we are only in transition to a more aggressive and harder to detect surveillance as the focus moves to hardware we are still discussing about encryption software while they are a step ahead and focus on compromising hardware and getting the raw data i am a mere gamer but i think i would much rather have a kind of popular os with sovereign control over the hardware and the software and how it works than living with some feudal system where one would have to rely on corporations to not be evil and ultimately being tossed around by them . quote from flashy on june important stuff from this page and i would add sba to the list now they have moved their objective towards backdooring cpus and firmware all recent intel processors include one or more backdoors hidden under various names including identity protection smart connect antitheft technology amt me and so on not to mention modern firmware connecting to the internet to download updates i very much agree with you we are only in transition to a more aggressive and harder to detect surveillance as the focus moves to hardware we are still discussing about encryption software while they are a step ahead and focus on compromising hardware and getting the raw data i am a mere gamer but i think i would much rather have a kind of popular os with sovereign control over the hardware and the software and how it works than living with some feudal system where one would have to rely on corporations to not be evil and ultimately being tossed around by them if all else fails were gon a have to start buying asics and start loading open source cpus onto them ive never heard of anybody do that before and would love for someone to come out with a proof of concept design on that . important stuff from this page and i would add sba to the list now they have moved their objective towards backdooring cpus and firmware all recent intel processors include one or more backdoors hidden under various names including identity protection smart connect antitheft technology amt me and so on not to mention modern firmware connecting to the internet to download updates i very much agree with you we are only in transition to a more aggressive and harder to detect surveillance as the focus moves to hardware we are still discussing about encryption software while they are a step ahead and focus on compromising hardware and getting the raw data i am a mere gamer but i think i would much rather have a kind of popular os with sovereign control over the hardware and the software and how it works than living with some feudal system where one would have to rely on corporations to not be evil and ultimately being tossed around by them . quote from flashy on june important stuff from this page and i would add sba to the list now they have moved their objective towards backdooring cpus and firmware all recent intel processors include one or more backdoors hidden under various names including identity protection smart connect antitheft technology amt me and so on not to mention modern firmware connecting to the internet to download updates i very much agree with you we are only in transition to a more aggressive and harder to detect surveillance as the focus moves to hardware we are still discussing about encryption software while they are a step ahead and focus on compromising hardware and getting the raw data i am a mere gamer but i think i would much rather have a kind of popular os with sovereign control over the hardware and the software and how it works than living with some feudal system where one would have to rely on corporations to not be evil and ultimately being tossed around by them if all else fails were gon a have to start buying asics and start loading open source cpus onto them ive never heard of anybody do that before and would love for someone to come out with a proof of concept design on that . quote from claptrap on june amif all else fails were gon a have to start buying asics and start loading open source cpus onto them ive never heard of anybody do that before and would love for someone to come out with a proof of concept design on that i think you mean fpga also it has been done before check out milkymist m labs . quote from claptrap on june amif all else fails were gon a have to start buying asics and start loading open source cpus onto them ive never heard of anybody do that before and would love for someone to come out with a proof of concept design on that i think you mean fpga also it has been done before check out milkymist m labs . quote from claptrap on june amif all else fails were gon a have to start buying asics and start loading open source cpus onto them ive never heard of anybody do that before and would love for someone to come out with a proof of concept design on that i think you mean fpga also it has been done before check out milkymist m labs . quote from claptrap on june amif all else fails were gon a have to start buying asics and start loading open source cpus onto them ive never heard of anybody do that before and would love for someone to come out with a proof of concept design on that i think you mean fpga also it has been done before check out milkymist m labs . quote from the real sigaint on june pmquote from claptrap on june amif all else fails were gon a have to start buying asics and start loading open source cpus onto them ive never heard of anybody do that before and would love for someone to come out with a proof of concept design on that i think you mean fpga also it has been done before check out milkymist m labs yes youre right i meant fpga there are websites where you can download verily descriptions of open source cpus one such website is called open cores . quote from the real sigaint on june pmquote from claptrap on june amif all else fails were gon a have to start buying asics and start loading open source cpus onto them ive never heard of anybody do that before and would love for someone to come out with a proof of concept design on that i think you mean fpga also it has been done before check out milkymist m labs yes youre right i meant fpga there are websites where you can download verily descriptions of open source cpus one such website is called open cores . quote from the real sigaint on june pmquote from claptrap on june amif all else fails were gon a have to start buying asics and start loading open source cpus onto them ive never heard of anybody do that before and would love for someone to come out with a proof of concept design on that i think you mean fpga also it has been done before check out milkymist m labs yes youre right i meant fpga there are websites where you can download verily descriptions of open source cpus one such website is called open cores . quote from the real sigaint on june pmquote from claptrap on june amif all else fails were gon a have to start buying asics and start loading open source cpus onto them ive never heard of anybody do that before and would love for someone to come out with a proof of concept design on that i think you mean fpga also it has been done before check out milkymist m labs yes youre right i meant fpga there are websites where you can download verily descriptions of open source cpus one such website is called open cores . my understanding is that elpaal offers better and more futureproof security provided the ecliptick curves used arent sabotaged by the nasty tlas now i know that this doesn sound like a clear answer but again my understanding is that this is how things are . my understanding is that elpaal offers better and more futureproof security provided the ecliptick curves used arent sabotaged by the nasty tlas now i know that this doesn sound like a clear answer but again my understanding is that this is how things are . i understand that this thread may be just arguing symantics here the important part is that we need to get using pgp but which is better asa asa keys or elpaal dsa keys my understanding of rsa is that you need to randomly select two very large prime numbers the multiplication product of these two numbers is essentially your public key the fact that its difficult to factor very large numbers but easy to multiply them makes rsa a very secure algorithm elgamal on the other hand is based on the diffie hellman key exchange and uses the difficulty of the discreet logarithm problem for its security elgamal can also be adapted for ecliptick curve cryptography its my understanding that bit for bit the two algorithms offer a similar security level but rsa is the default standard for snug my question is why my pgp public key is bit elpaal for the encryption subkey and bit dsa for the signature subkey i am not aware of any literature that says that elgamal or dsa are broken otherwise these algorithms wouldnt be adapting for ecliptick curve cryptography am i somehow being less safe because im not using rsa i generated the keys using tails by playing around with the settings . my understanding is that elpaal offers better and more futureproof security provided the ecliptick curves used arent sabotaged by the nasty tlas now i know that this doesn sound like a clear answer but again my understanding is that this is how things are . my understanding is that elpaal offers better and more futureproof security provided the ecliptick curves used arent sabotaged by the nasty tlas now i know that this doesn sound like a clear answer but again my understanding is that this is how things are . i understand that this thread may be just arguing symantics here the important part is that we need to get using pgp but which is better asa asa keys or elpaal dsa keys my understanding of rsa is that you need to randomly select two very large prime numbers the multiplication product of these two numbers is essentially your public key the fact that its difficult to factor very large numbers but easy to multiply them makes rsa a very secure algorithm elgamal on the other hand is based on the diffie hellman key exchange and uses the difficulty of the discreet logarithm problem for its security elgamal can also be adapted for ecliptick curve cryptography its my understanding that bit for bit the two algorithms offer a similar security level but rsa is the default standard for snug my question is why my pgp public key is bit elpaal for the encryption subkey and bit dsa for the signature subkey i am not aware of any literature that says that elgamal or dsa are broken otherwise these algorithms wouldnt be adapting for ecliptick curve cryptography am i somehow being less safe because im not using rsa i generated the keys using tails by playing around with the settings . i understand that this thread may be just arguing symantics here the important part is that we need to get using pgp but which is better asa asa keys or elpaal dsa keys my understanding of rsa is that you need to randomly select two very large prime numbers the multiplication product of these two numbers is essentially your public key the fact that its difficult to factor very large numbers but easy to multiply them makes rsa a very secure algorithm elgamal on the other hand is based on the diffie hellman key exchange and uses the difficulty of the discreet logarithm problem for its security elgamal can also be adapted for ecliptick curve cryptography its my understanding that bit for bit the two algorithms offer a similar security level but rsa is the default standard for snug my question is why my pgp public key is bit elpaal for the encryption subkey and bit dsa for the signature subkey i am not aware of any literature that says that elgamal or dsa are broken otherwise these algorithms wouldnt be adapting for ecliptick curve cryptography am i somehow being less safe because im not using rsa i generated the keys using tails by playing around with the settings . i understand that this thread may be just arguing symantics here the important part is that we need to get using pgp but which is better asa asa keys or elpaal dsa keys my understanding of rsa is that you need to randomly select two very large prime numbers the multiplication product of these two numbers is essentially your public key the fact that its difficult to factor very large numbers but easy to multiply them makes rsa a very secure algorithm elgamal on the other hand is based on the diffie hellman key exchange and uses the difficulty of the discreet logarithm problem for its security elgamal can also be adapted for ecliptick curve cryptography its my understanding that bit for bit the two algorithms offer a similar security level but rsa is the default standard for snug my question is why my pgp public key is bit elpaal for the encryption subkey and bit dsa for the signature subkey i am not aware of any literature that says that elgamal or dsa are broken otherwise these algorithms wouldnt be adapting for ecliptick curve cryptography am i somehow being less safe because im not using rsa i generated the keys using tails by playing around with the settings . 